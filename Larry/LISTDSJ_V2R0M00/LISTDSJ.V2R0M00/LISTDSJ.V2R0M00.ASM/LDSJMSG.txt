         TITLE 'LDSJMSG - Message Processor for LISTDSJ               '
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*  ==================================================================
*
* LL       DDDDD     SSSS   TTTTTTTT  MM   MM   SSSS     GGG
* LL       DD  DD   SS  SS     TT     MMM MMM  SS  SS   GG  GG
* LL       DD   DD  SS         TT     MM M MM  SS      GG
* LL       DD   DD   SSSS      TT     MM M MM   SSSS   GG  GGG
* LL       DD   DD      SS     TT     MM   MM      SS  GG    G
* LL       DD  DD   SS  SS     TT     MM   MM  SS  SS   GG  GG
* LLLLLLL  DDDDD     SSSS      TT     MM   MM   SSSS     GGG
*
*  ==================================================================
*
*  Program: LDSJMSG
*
*  Author:  Larry Belmontes Jr.
*           https://ShareABitofIT.net/LISTDSJ-for-MVS-3-8J
*           Copyright (C) 2019-2021  Larry Belmontes, Jr.
*
*  Disclaimer: <DSCLAIMR>
*  ===================================================================
*
*     No guarantee; No warranty; Install / Use at your own risk.
*
*     This software is provided "AS IS" and without any expressed
*  or implied warranties, including, without limitation, the
*  implied warranties of merchantability and fitness for a
*  particular purpose.
*
*     The author requests keeping authors name intact in any
*  modified versions.
*
*     In addition, the author requests readers to submit any
*  code modifications / enhancements and associated comments
*  for consideration into a subsequent release (giving credit
*  to contributor(s)) thus, improving overall functionality
*  and further benefiting the MVS 3.8J hobbyist public domain
*  community.
*
*
         EJECT
*  Overview:
*  ================================================================
*
*     This program performs all message requests for LISTDSJ using
*  a parameter address list macro (#IMAL) which must be set before
*  invoking LDSJMSG.
*
*     #MPAL (portion of macro)
*     --------------------------------------------------------
*     PMSGPALS DS    0F
*     PMSGREQ  DS    CL4     Message Request Type
*     PMSGNBR  DS    F       Message Number
*     PMSGT    DS    F       Starting address to receive text
*     PMSGL    DS    F       Length of area to receive text
*     PMSGTXTL DS    F       Length of message text moved (OUTPUT)
*
*
*
*     Sample priming code
*     --------------------------------------------------------
*     MVC   PMSGREQ,=C'MSG '    Set MESSAGE request type
*     MVC   PMSGNBR,RCEXIT      Set message number
*     LA    R1,DJMSG+15         Set DJMSG starting address
*     ST    R1,PMSGT
*     LA    R1,L'DJMSG-15       Set DJMSG length
*     ST    R1,PMSGL
*     MVC   PMSGTXTL,=F'0'      Init final msg text length
*     LA    R1,PMSGPALS         R1 = Parm List
*     L     R15,LDSJMSG         Call LDSJMSG
*     BALR  R14,R15
*     ST    R15,SAVER15M        SAVE R15
*     LTR   R15,R15             R15=0?  Message Found
*     BZ    MSGPRCRX            YES, return
*     C     R15,=F'02'          R15=2?  Message Not Found
*     BE    MSGPRCRX            YES, return
*     .   *******               Unexpected return from LDSJMSG
*     .
*     .
*
*
*     Request Types (PMSGREQ)
*     --------------------------------------------------------
*      'MSG '    Message Code Request
*      'RSN '    Reason Code Request
*      'CD  '    Return Code Request
*
*
*
         EJECT
*  Programs Called:
*  ==================================================================
*
*    o  GETMAIN/FREEMAIN       Working Storage
*
*
         EJECT
*  Table 1 - Program Register Usage
*
*  +------+----------------------------------------------------------+
*  | REG  |                                                          |
*  |USAGE |  DESCRIPTION                                             |
*  +------+----------------------------------------------------------+
*  |  R13 |  Calling program registers (R14-R12) upon entry          |
*  |  R14 |  Calling program return address upon entry               |
*  |  R15 |  Called  program entry address  upon entry               |
*  |  R1  |  Called  program parms starting address                  |
*  +------+----------------------------------------------------------+
*  |  R0  |  Working Register                                        |
*  |  R1  |  Working Register                                        |
*  |  R2  |  Working Register                                        |
*  |  R3  |  Working Register                                        |
*  |  R4  |  Working Register                                        |
*  |  R5  |  Working Register                                        |
*  |  R6  |  Working Register                                        |
*  |  R7  |  Working Register                                        |
*  |  R8  |  Working Register                                        |
*  |  R9  |  Address of WORKAREA via GETMAIN/FREEMAIN                |
*  |  R10 |  Base Register 1                                         |
*  |  R11 |  Working Register                                        |
*  |  R12 |  Working Register                                        |
*  |  R13 |  Address of SAVEAREA                                     |
*  +------+----------------------------------------------------------+
*  |  R15 |  Return Code upon exit                                   |
*  +------+----------------------------------------------------------+
*
         EJECT
*  Table 2 - Return Codes
*
*  +------+----------------------------------------------------------+
*  |RETURN|                                                          |
*  | CODE |  DESCRIPTION                                             |
*  +------+----------------------------------------------------------+
*  |  00  |  Message found                                           |
*  +------+----------------------------------------------------------+
*  |  02  |  Message not found, but message text returned            |
*  +------+----------------------------------------------------------+
*  |  12  |  No PARMS                                                |
*  +------+----------------------------------------------------------+
*  |  16  |  Invalid Request Type                                    |
*  +------+----------------------------------------------------------+
*
         EJECT
*  Macros and SYSLIB Location:
*  ==================================================================
*
*  Macro     Description                         Library
*  --------  ----------------------------------  --------------------
*  YREGS     Register Equates                    SYS2.MACLIB
*  #MPAL     Message Parameter Address List      LISTDSJ maclib
*
*
*  References:
*  ==================================================================
*
*  - None
*
*
         EJECT
*  Change History: <CHGHIST>
*  ==================================================================
*
*  MM/DD/CCYY Version  Name / Description
*  ---------- -------  --------------------------------------------
*
*  04/02/2021 2.0.00   Larry Belmontes Jr.
*                      - Initial version released to MVS 3.8J
*                        hobbyist public domain
*
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
LDSJMSG  CSECT
         USING LDSJMSG,R10         my BASE REGISTER(S)
         PRINT NOGEN
*
*     * /********************************************************/
*     * /* Save regs and declare base registers R10             */
*     * /* including saving R1 (PARMS) in R2                    */
*     * /* - R1  myPARMS address on entry                       */
*     * /* - R15 myENTRY address on entry                       */
*     * /********************************************************/
         STM   R14,R12,12(R13)     Save calling program registers
         LR    R10,R15             Load base1 w R15
         LR    R15,R13             Save callers registers
         LR    R2,R1               Save PARM addr
*
*     * /********************************************************/
*     * /* Program Eyecatcher                                   */
*     * /********************************************************/
         B     OVRSTAMP            Branch past eye-catcher
MYSTAMP  EQU   *
PGMID    DC    CL8'LDSJMSG'        My Program STAMP
         DC    CL8'MVS3.8J '       OS
         DC    CL8'V2.0.00 '       .Version
         DC    CL8'04022021'       ..date  MMDDCCYY
         DC    CL1' '
PGMDS    DC    CL8'&SYSDATE'       Assemble Date
         DC    CL3' - '            .and
PGMTS    DC    CL8'&SYSTIME'       ..Time
         DC    C'Copyright (C) 2021'
         DC    C'Larry Belmontes, Jr. '
         DC    C'https://ShareABitofIT.net/LISTDSJ-in-MVS38J'
MYSTAMPL EQU   *-MYSTAMP
OVRSTAMP DS    0H
*
         EJECT
*     * /********************************************************/
*     * /* GETMAIN, working storage, using R9                   */
*     * /* - R0  Working register (Size of Workarea)            */
*     * /* - R1  Working register (GETMAIN address)             */
*     * /* - R9  Working Storage DSECT address  **              */
*     * /********************************************************/
         LA    R0,WSAREAL          R0 = size of Workarea DSECT
         GETMAIN   R,LV=(R0)       Get Storage, R1 = addr of storage
         LTR   R15,R15             Did we get the storage?
         BNZ   NOMAINS             NO, return with rc in R15
         LR    R9,R1               YES. R9 = Workarea DSECT Register
         USING WSDSECT,R9          Tell Assembler
*
*     * /********************************************************/
*     * /* Update Save Areas for caller and calling programs    */
*     * /* - R1  myPARMS address on entry  (restored)           */
*     * /********************************************************/
         LR    R15,R13             Save callers savearea addr
         LA    R13,SAVEAREA        Load Addr of my savearea
         ST    R15,4(,R13)         Chain callers to my savearea
         ST    R13,8(,R15)         Chain my savearea to callers
         LR    R1,R2               Restore R1 as PARM addr
*
         EJECT
*     * /********************************************************/
*     * /* Get PARAMETER information passed to program          */
*     * /* - R1 myPARMS address on entry                        */
*     * /********************************************************/
PARMS    EQU   *                   We have a parm...
         LTR   R1,R1               Do I have a PARM?
         BNZ   PARMIN              YES, check parms
         MVC   RCEXIT,=F'12'       NO, return with RC=12 (no parm)
         B     MYEXIT              Branch to MYEXIT
*
*     * /********************************************************/
*     * /* Process Message Request Type                         */
*     * /* - R1 Starting parms address                          */
*     * /* - R3 Message Table DSECT                             */
*     * /* - R6 Address of message text receiving area          */
*     * /* - R7 Length  of message text receiving area          */
*     * /********************************************************/
PARMIN   EQU   *                   NO,  must be PARM addr
         USING PMSGPAL,R1          Tell Assembler, R1=PARMS pointer
         USING TBLMSG,R3           Tell Assembler, R3=Msg tbl pointer
         MVC   RCEXIT,=F'0'        Initialize RCEXIT
         L     R6,PMSGT            R6=Address of PMSGT
         L     R7,PMSGL            R7=Length  of PMSGL
         CLC   =C'MSG ',PMSGREQ    Message Request?
         BE    REQMSG
         CLC   =C'RSN ',PMSGREQ    Reason Code Request?
         BE    REQRSN
         CLC   =C'CD  ',PMSGREQ    Return Code Request?
         BE    REQCD
         MVC   RCEXIT,=F'16'       Invalid Request Type
         B     MYEXIT              Branch to MYEXIT
*
         EJECT
*     * /********************************************************/
*     * /* Set message table parameters based on request type   */
*     * /* - R2 Number of message table entries                 */
*     * /* - R3 Address of message table                        */
*     * /********************************************************/
REQMSG   EQU   *
         LA    R2,MSGTENT#         R2=Number of MSGTBL entries
         LA    R3,MSGTBL           R3=Starting address of MSGTBL
         B     LOOK4MSG            Search for message
*
REQRSN   EQU   *
         LA    R2,RSNTENT#         R2=Number of RSNTBL entries
         LA    R3,RSNTBL           R3=Starting address of RSNTBL
         B     LOOK4MSG            Search for message
*
REQCD    EQU   *
         LA    R2,RCTENT#          R2=Number of RCTBL entries
         LA    R3,RCTBL            R3=Starting address of RCTBL
         B     LOOK4MSG            Search for message
*
         EJECT
*     * /********************************************************/
*     * /* Search for message, return message text              */
*     * /* - R5, R7, R8      Working Register                   */
*     * /********************************************************/
LOOK4MSG EQU   *
         CLC   TMSGNUM,PMSGNBR     Requested msg number?
         BE    MSG$TXT             Yes, move message text
         CLC   TMSGNUM,MSGTEOT     End of msg table?
         BE    MSGNOTFN            Yes, requested msg not found!
         LA    R3,TBLMSGL(R3)      Bump up to next entry
         BCT   R2,LOOK4MSG         Look again...
MSG$EOT  EQU   *                   Exhausted msg table! Msg not found
         LA    R3,MANUALTE         Reset R3- addrs of manual msg entry
         L     R2,MSGTEOT          End of Msg Table value (x'FFFFFFFF')
         ST    R2,0(R3)
         LA    R2,MSGNFND          Address of MSGNFND message
         ST    R2,4(R3)
         LA    R2,L'MSGNFND        Length  of MSGNFND message
         ST    R2,8(R3)
MSGNOTFN EQU   *                   Requested message not found
         MVC   RCEXIT,=F'2'
MSG$TXT  EQU   *                   Requested message found
         L     R8,TMSGTXTL         Length of TMSGTXT
         CR    R7,R8               Sufficient length to recv TMSGTXT?
         BL    MSGSMALR            No, use smaller length
         B     MSGOKLEN            YES, use msg txt length
MSGSMALR EQU   *
         LR    R8,R7               Reset TMSGTXTL via R8
MSGOKLEN EQU   *
         BCTR  R8,0                Adjust for EX MVC
         L     R5,TMSGTXT
         EX    R8,MVCMSG           EX MVC of MSG text
         LA    R8,1(R8)            Restore length of TMSGTXT
         ST    R8,PMSGTXTL         Set message length moved
         CLC   RCEXIT,=F'2'        Msg not found condition?
         BE    MSGXR02             Yes, add msg number to text
         B     MYEXIT              No, Done...
*
*     * /********************************************************/
*     * /* - Place msg number in msg not found text             */
*     * /********************************************************/
MSGXR02  EQU   *
         L     R8,PMSGNBR          Yes, indicate message number
         CVD   R8,DW               Convert to decimal
         UNPK  08(05,R6),DW+5(03)  Unpack and
         OI    08+05-01(R6),X'F0'  ... force and F zone
         B     MYEXIT              Done...
*
MVCMSG   MVC   0(0,R6),0(R5)       Move message to requestor area
*
         EJECT
*     * /********************************************************/
*     * /* - Restore savearea, FREEMAIN, and                    */
*     * /*   return to caller                                   */
*     * /********************************************************/
MYEXIT   EQU   *
*
*        STM   R0,R1,DW            SAVE    R0,R1  to   DW before TPUT
*        TPUT  DJMSG,L'DJMSG
*        LM    R0,R1,DW            RESTORE R0,R1  from DW after  TPUT
*
*     * /--------------------------------------------------------/
*     * /* R1 = my Working Storage Address from GETMAIN         */
*     * /********************************************************/
         LR    R1,R13              Working Storage Addr
*
*     * /--------------------------------------------------------/
*     * /* Get callers savearea into R13 and overlay my R15     */
*     * /* to be returned to caller                             */
*     * /--------------------------------------------------------/
         L     R13,SAVEAREA+4      Restore R13
         L     R5,RCEXIT           Set R15 to my exit value
*
*     * /--------------------------------------------------------/
*     * /* Working Storage FREEMAIN                             */
*     * /--------------------------------------------------------/
         LA    R0,WSAREAL          Size of WSAREA DSECT
         FREEMAIN  R,LV=(R0),A=(R1)    Free Storage
*
*     * /--------------------------------------------------------/
*     * /* Restore caller registers and return to caller        */
*     * /--------------------------------------------------------/
         LR    R15,R5              R15 = RC for exit
NOMAINS  EQU   *
         L     R14,12(R13)         Restore R14
         LM    R0,R12,20(R13)      Restore R0 thru R12
         BR    R14                 Return to caller
*
         TITLE 'LDSJMSG - Literal Pool                                '
         LTORG
*
         TITLE 'LDSJMSG - Message Address Table / Message Text        '
*     * /********************************************************/
*     * /* Message Address Table                                */
*     * /********************************************************/
MSGTBL   DS    0F
*              MSGNUM ,MSGTXT    ,MSGTXTL
*              -------,----------,-----------
         DC    A(4004),A(MSG4004),A(L'MSG4004)
         DC    A(4005),A(MSG4004),A(L'MSG4004)         Same as 4004
         DC    A(4008),A(MSG4009),A(L'MSG4009)         Same as 4009
         DC    A(4009),A(MSG4009),A(L'MSG4009)
         DC    A(4010),A(MSG4009),A(L'MSG4009)         Same as 4009
         DC    A(4095),A(MSG4095),A(L'MSG4095)
         DC    A(4097),A(MSG4097),A(L'MSG4097)
         DC    A(4098),A(MSG4098),A(L'MSG4098)
         DC    A(4099),A(MSG4099),A(L'MSG4099)
         DC    A(0015),A(MSGJ015),A(L'MSGJ015)
         DC    A(0017),A(MSGJ017),A(L'MSGJ017)
         DC    A(0018),A(MSGJ018),A(L'MSGJ018)
         DC    A(0020),A(MSGJ020),A(L'MSGJ020)
         DC    A(0021),A(MSGJ021),A(L'MSGJ021)
         DC    A(0022),A(MSGJ022),A(L'MSGJ022)
         DC    A(0025),A(MSGJ025),A(L'MSGJ025)
         DC    A(0027),A(MSGJ027),A(L'MSGJ027)
         DC    A(0030),A(MSGJ030),A(L'MSGJ030)
         DC    A(0031),A(MSGJ031),A(L'MSGJ031)
         DC    A(0032),A(MSGJ032),A(L'MSGJ032)
MSGTLAST DC    X'FFFFFFFF',A(MSGNFND),A(L'MSGNFND)     Last Entry
MSGTENTL EQU   *-MSGTLAST          Length of each entry
MSGTBLL  EQU   *-MSGTBL            Length of table
MSGTENT# EQU   MSGTBLL/MSGTENTL    Number of table entries
*
MSGTEOT  DC    X'FFFFFFFF'
         EJECT
*     * /********************************************************/
*     * /* Message Text                                         */
*     * /********************************************************/
MSGS     EQU   *
MSGNFND  DC    C'Message nnnnn not found'
MSG4004  DC    C'PARM Not supplied'
MSG4009  DC    C'CPPL No variables' ZERO
MSG4095  DC    C'Cannot link to LDSJISP'
MSG4097  DC    C'Cannot link to IKJDAIR'
MSG4098  DC    C'Cannot link to IKJCT441'
MSG4099  DC    C'Must run under TSO'
*
MSGJ015  DC    C'DIR option not valid, ignored'
MSGJ017  DC    C'RC=xxx Allocate PDS error'
MSGJ018  DC    C'RC=xxx Free PDS error'
MSGJ020  DC    C'RC=xxx DSCB-Fx CAMLST NAME error'
MSGJ021  DC    C'RC=xxx DSCB-Fx CAMLST SEARCH error'
MSGJ022  DC    C'RC=xxx DSCB-Fx CAMLST SEEK error'
MSGJ025  DC    C'1234567890 xxx not defined in table'
MSGJ027  DC    C'RC=xxx IKJCT441 error w zzzzzzzzzzzzzzzzzz'
MSGJ030  DC    C'RC=xxx Open PDS error'
MSGJ031  DC    C'RC=xxx Close PDS error'
MSGJ032  DC    C'RC=xxx ISPF 12345678 .                   .'            LB1010h
*
MSGSL    EQU   *-MSGS
*
         TITLE 'LDSJMSG - Reason Code Address Table / Reason Code Text'
*     * /********************************************************/
*     * /* Reason Code Address Table                            */
*     * /********************************************************/
RSNTBL   DS    0F
         DC    A(0000),A(RSMSG00),A(L'RSMSG00)
         DC    A(0002),A(RSMSG02),A(L'RSMSG02)
         DC    A(0003),A(RSMSG03),A(L'RSMSG03)
         DC    A(0005),A(RSMSG05),A(L'RSMSG05)
         DC    A(0006),A(RSMSG06),A(L'RSMSG06)
         DC    A(0007),A(RSMSG07),A(L'RSMSG07)
         DC    A(0012),A(RSMSG12),A(L'RSMSG12)
         DC    A(0013),A(RSMSG13),A(L'RSMSG13)
         DC    A(0014),A(RSMSG14),A(L'RSMSG14)
         DC    A(0017),A(RSMSG17),A(L'RSMSG17)
         DC    A(0019),A(RSMSG19),A(L'RSMSG19)
         DC    A(0021),A(RSMSG21),A(L'RSMSG21)
         DC    A(0022),A(RSMSG22),A(L'RSMSG22)
         DC    A(0023),A(RSMSG23),A(L'RSMSG23)
         DC    A(0024),A(RSMSG24),A(L'RSMSG24)
         DC    A(0026),A(RSMSG26),A(L'RSMSG26)
         DC    A(0028),A(RSMSG28),A(L'RSMSG28)
         DC    A(0029),A(RSMSG29),A(L'RSMSG29)
         DC    A(0090),A(RSMSG90),A(L'RSMSG90)
         DC    A(0099),A(RSMSG99),A(L'RSMSG99)
RSNTLAST DC    X'FFFFFFFF',A(MSGNFND),A(L'MSGNFND)  Must be last entry
RSNTENTL EQU   *-RSNTLAST          Length of each entry
RSNTBLL  EQU   *-RSNTBL            Length of table
RSNTENT# EQU   (RSNTBLL/RSNTENTL)  Number of table entries
         EJECT
*     * /********************************************************/
*     * /* Reason Code Text                                     */
*     * /********************************************************/
RSMSG00  DC    C'Normal completion'
RSMSG02  DC    C'Dynamic allocation error'
RSMSG03  DC    C'Data set type cannot be processed'                     LB1040g
RSMSG05  DC    C'Dataset not catalogued'
RSMSG06  DC    C'Error obtaining DSN'
RSMSG07  DC    C'Device type not found- DVCLST table'                   LB1040e
RSMSG12  DC    C'VSAM datasets not supported'                           LB1040d
RSMSG13  DC    C'Dataset could not open or close'
RSMSG14  DC    C'Device type not found in UCB table'                    LB1040e
RSMSG17  DC    C'System or User Abend error'                            LB1010h
RSMSG19  DC    C'Dataset resides on multiple volumes'
RSMSG21  DC    C'Catalog error trying to locate DSN'
RSMSG22  DC    C'Volume not mounted'
RSMSG23  DC    C'Permanent I/O error on volume'
RSMSG24  DC    C'Dataset name not found'
RSMSG26  DC    C'Dataset on Mass Storage device'
RSMSG28  DC    C'DD name must be 1-8 characters'                        LB1010g
RSMSG29  DC    C'Dataset or DD name required'                           LB1010g
RSMSG90  DC    C'DDN not allocated (not found)'                         LB1010g
RSMSG99  DC    C'ABOUT request, no DSN info retrieved'
*
         TITLE 'LDSJMSG - Return Code Address Table / Return Code Text'
*     * /********************************************************/
*     * /* Return Code Address Table                            */
*     * /********************************************************/
RCTBL    DS    0F
         DC    A(0000),A(RCMSG00),A(L'RCMSG00)
         DC    A(0004),A(RCMSG04),A(L'RCMSG04)
         DC    A(0016),A(RCMSG16),A(L'RCMSG16)
RCTLAST  DC    X'FFFFFFFF',A(MSGNFND),A(L'MSGNFND)  Must be last entry
RCTENTL  EQU   *-RCTLAST           Length of each entry
RCTBLL   EQU   *-RCTBL             Length of table
RCTENT#  EQU   RCTBLL/RCTENTL      Number of table entries
         EJECT
*     * /********************************************************/
*     * /* Reason Code Text                                     */
*     * /********************************************************/
RCMSG00  DC    C'Successful request'
RCMSG04  DC    C'Some dataset information is unavailable'
RCMSG16  DC    C'Error occured, variable data invalid'
*
         TITLE 'LDSJMSG - Equates                                     '
*     * /********************************************************/
*     * /* Register Equates                                     */
*     * /********************************************************/
         YREGS                     Register EQU as Rn or Rnn
*
*R0       EQU   0
*R1       EQU   0
*R2       EQU   0
*R3       EQU   0
*R4       EQU   0
*R5       EQU   0
*R6       EQU   0
*R7       EQU   0
*R8       EQU   0
*R9       EQU   0
*R10      EQU   0
*R11      EQU   0
*R12      EQU   0
*R13      EQU   0
*R14      EQU   0
*R15      EQU   0
*
         TITLE 'LDSJMSG - DSECTS                                      '
PMSGPAL  DSECT
         #MPAL                     Message PAL
*
         EJECT
*     * /********************************************************/
*     * /* Message Address Table                                */
*     * /********************************************************/
TBLMSG   DSECT
TMSGNUM  DS    A                   Message Number
TMSGTXT  DS    A                   Message Text Starting address
TMSGTXTL DS    A                   Message Text Length
TBLMSGL  EQU   *-TBLMSG            Length of Message Address Table
*
         TITLE 'LDSJMSG - Working Storage Variables                   '
*     * /********************************************************/
*     * /* Working Storage  DSECT                               */
*     * /********************************************************/
WSDSECT  DSECT
WSAREA   EQU   *
*
*     * /********************************************************/
*     * /* mySAVEARA                                            */
*     * /********************************************************/
SAVEAREA DS    18F                 my Savearea
*                      +00  A(savearea of current CSECT)
*                      +04  A(savearea of calling CSECT)
*                      +08  A(savearea of called  CSECT)
*                      +12  R14
*                      +16  R15
*                      +20  R0
*                      +24  R1
*                      +28  R2
*                      +32  R3
*                      +36  R4
*                      +40  R5
*                      +44  R6
*                      +48  R7
*                      +52  R8
*                      +56  R9
*                      +60  R10
*                      +64  R11
*                      +68  R12
*
*     * /********************************************************/
*     * /* Misc Variables                                       */
*     * /********************************************************/
SAVER15  DS    F                   R15 Hold
DW       DS    D                   Double Word area
FW       DS    F                   Full Word   area
RCEXIT   DS    F                   Exit RC
RC       DS    CL2                 Return Code
*
MANUALTE DS    3F                  Manual entry of MSGTBL row
*
WSAREAE  EQU   *                   Working Storage END
WSAREAL  EQU   WSAREAE-WSAREA      Working Storage Area Length
*
         END   LDSJMSG
