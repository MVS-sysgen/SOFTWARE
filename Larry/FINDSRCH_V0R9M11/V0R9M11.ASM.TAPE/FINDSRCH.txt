         MACRO
         EXIT  &RC=,&R=
.*
.*--------------------------------------------------------------------
.*
.*       MACRO = EXIT
.*
.*       AUTHOR = VINH VU
.*
.*       DATE-WRITTEN = 09/02/81
.*
.*       PURPOSE = TO EXIT FROM A MODULE
.*             THIS HAS TO BE USED IN CONJUNCTION WITH MACRO
.*             SET WHICH IS THE INITIALIZATION MACRO.
.*
.*       EXAMPLES :
.*
.*         *   EXIT RC=10
.*
.*             THIS WILL GENERATE A RETURN CODE OF 10. NO FREEMAIN
.*                WILL BE DONE
.*
.*         *   EXIT R=R9
.*
.*             THIS WILL GENERATE RETURN CODE FROM CONTENTS OF REG 9.
.*                A FREEMAIN WILL BE DONE ALSO ASSUMING ADDRESS OF
.*                GETMAINED AREA IS IN REG13 (DONE IN MACRO SET).
.*
.*--------------------------------------------------------------------
.*
         GBLC  &SETEXIT
         AIF   ('&SETEXIT' EQ '').NOFREE
         LR    R1,R13              GET ADDR OF GMAREA INTO R1
         L     R13,4(,R13)         GET PREVIOUS SAVE AREA
         FREEMAIN R,LV=&SETEXIT,A=(R1)
         AGO   .FREEIT
.NOFREE  ANOP
         L     R13,4(,R13)         GET PREVIOUS SAVE AREA
.FREEIT  ANOP
         AIF   (T'&RC EQ 'O').CKR
         LA    R15,&RC             GET RETURN CODE
         AGO   .THRU
.CKR     ANOP
         AIF   (T'&R EQ 'O').NONE
         LR    R15,&R              GET RETURN CODE
         AGO   .THRU
.NONE    ANOP
         SR    R15,R15             RETURN CODE IS ZERO
.THRU    ANOP
         L     R14,12(0,R13)       GET R14
         LM    R0,R12,20(R13)      GET REG 0 - 12
         BR    R14                 RETURN TO CALLER
         MEND
         MACRO
         SET   &BASE,&LV=,&DSECT=,&REG=
.*
.*--------------------------------------------------------------------
.*
.*       MACRO = SET
.*
.*       AUTHOR = VINH VU
.*
.*       DATE-WRITTEN = 08/31/81
.*
.*       PURPOSE = TO SET UP BASE REGS FOR A SOURCE MODULE.
.*             IF LV IS OMITTED, PROGRAM IS ASSUMED NOT TO BE
.*             RE-ENTRANT. USE EXIT MACRO IN CONJUNCTION WITH THIS
.*             MACRO.
.*             FOR RE-ENTRANT MODULE, 18F AS SAVE AREA WILL
.*             BE ASSUMED TO BE FIRST. PAY ATTENTION TO THIS
.*             WHEN YOU SET UP THE DSECT.
.*
.*       EXAMPLES =
.*
.*         *   SET (R12,R11),LV=WKLENG,DSECT=WKAREA
.*
.*             R12 AND R11 WILL BE BASE REGISTERS.
.*             LV WILL ASSUME A RE-ENTRANT MODULE AND THIS IS THE
.*                LENGTH OF THE GETMAIN AREA BEING OBTAINED (WHICH
.*                ALSO INCLUDES THE SAVE AREA OF 18F THAT WILL BE
.*                AT THE BEGINNING OF THE GETMAINED AREA.)
.*                THE GETMAINED DSECT SHOULD LOOK LIKE :
.*                           WKAREA    DSECT
.*                                     DS    18F
.*                           USER1     DS    CL256
.*                                     ETC   ........
.*
.*         *   SET LV=WKLENG
.*
.*             THIS ASSUMES R12 AS BASE REGISTER, A RE-ENTRANT
.*                MODULE, BUT YOU WILL HAVE TO CODE THE USING
.*                STATEMENT FOR THE GETMAIN AREA DSECT
.*
.*         *   SET
.*
.*             THIS ASSUMES A NON-RE-ENTRANT MODULE, R12 WILL BE
.*                BASE REGISTER.
.*
.*--------------------------------------------------------------------
.*
         LCLA  &C,&TEST,&ORG,&CSLENG
         LCLC  &B,&SAVE
         GBLC  &SETEXIT
&SETEXIT SETC  ''
&ORG     SETA  0
&TEST    SETA  1
         AIF   (T'&BASE EQ 'O').DEF
&C       SETA  N'&BASE
&B       SETC  '&BASE(&TEST)'
         AGO   .EQU
.DEF     ANOP
&C       SETA  1
&B       SETC  'R12'
.EQU     ANOP
         AIF   (T'&REG EQ 'O').SETREG
         AGO   .REGDONE
.SETREG  ANOP
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
.REGDONE ANOP
         B     28(R15)             BRANCH AROUND
&CSLENG  SETA  K'&SYSECT
         DC    AL2(&CSLENG)        LENG OF CSECT NAME
         DC    CL8'&SYSECT'        CSECT NAME
         DC    CL8'&SYSDATE'       THIS IS DATE
         DC    CL6'&SYSTIME'       THIS IS TIME
         CNOP  0,4                 GET ALIGNMENT
         STM   R14,R12,12(R13)     SAVE PREVIOUS REGS
         LR    &B,R15              GET BASE REG SETUP
         USING &SYSECT,&B          ESTABLISH ADDRESABILITY
.LOOP    ANOP
         AIF   (&TEST EQ &C).THRU
&SAVE    SETC  '&BASE(&TEST)'
&ORG     SETA  &ORG+4096
&TEST    SETA  &TEST+1
&B       SETC  '&BASE(&TEST)'
         USING &SYSECT+&ORG,&B
         LA    &B,4095(,&SAVE)
         LA    &B,1(,&B)
         AGO   .LOOP
.THRU    ANOP
         AIF   (T'&LV EQ 'O').NORENT
&SETEXIT SETC  '&LV'
         GETMAIN R,LV=&LV
         ST    R13,4(,R1)          SAVE REG13 FROM PREVIOUS
         L     R15,24(,R13)        SAVE REG 1
         ST    R1,8(,R13)          SAVE MY REG13 IN PREV SAVE AREA
         LR    R13,R1              GET MY REG 13 READY
         LR    R1,R15              GET REG1 BACK
         AIF   (T'&DSECT EQ 'O').FINAL
         USING &DSECT,R13          ESTABLISH ADDRESSABILITY
.FINAL   ANOP
         MEXIT
.NORENT  ANOP
         CNOP  0,4                 GET ALIGNMENT
         BAL   R1,*+76             BRANCH AROUND
         DS    18F                 THIS IS MY SAVE AREA
         ST    R13,4(,R1)          SAVE REG13 FROM PREVIOUS
         L     R15,24(,R13)        SAVE REG 1
         ST    R1,8(,R13)          SAVE MY REG13 IN PREV SAVE AREA
         LR    R13,R1              GET MY REG 13 READY
         LR    R1,R15              GET REG1 BACK
         MEND
FINDSRCH TITLE 'FINDSRCH --- TO SEARCH FOR AN ARGUMENT IN A PDS'        LB
*
*-------------------------------------------------------------------
*        PROGRAM - FINDSRCH (modified version of FIND)                  LB
*        PURPOSE - TO SEARCH ARGUMENT IN A PDS.
*        AUTHOR - VINH VU
*        DATE-WRITTEN - 02/82
*        Modified by Larry Belmontes 09/26/2020                         LB
*         - Renamed to FINDSRCH as to not to interfere with             LB
*           original module name (FIND)                                 LB
*         - Added three parameters for enhanced use                     LB
*           QUIET, VOL, FILE                                            LB
*        MACROS USED -
*              SET,EXIT,READ,NOTE,POINT,TPUT,TGET,GETMAIN,
*              FREEMAIN,OPEN,CLOSE,DCB,DCBD
*        NOTE -
*              THIS IS A COMMAND PROCESSOR. ALL MISSING POSITIONAL
*              PARAMETERS WILL BE PROMPTED AT TERMINAL.
*
*        COMMAND FORMAT :
*              FINDSRCH 'XXXXX' S('YYY') LOWER GROUP('TTT') QUICK       LB
*                       QUIET FILE VOL(VVVVVV)                          LB
*        WHERE :
*          *   'XXXX' = PDS TO BE SEARCHED
*          *   S - STANDS FOR STRING, 'YYY' = ARGUMENT STRING. THIS
*              IS OPTIONAL. IF NOT ENTERED, YOU WILL BE PROMPTED FOR.
*          *   LOWER = OPTIONAL KEYWORD. TO USE SEARCH ARGUMENT AS
*              ENTERED (DO NOT TURN TO UPPERCASE). THE DEFAULT IS
*              'NOT LOWER'.
*          *   GROUP = OPTIONAL KEYWORD. TO START SEARCHING ON
*              MEMBERS WITH NAME PREFIXED BY THIS.
*          *   QUICK = OPTIONAL KEYWORD. STOP THE SEARCH IN A MEMBER
*              ONCE THE CHARACTER STRING IS FOUND.  WILL PROCEED TO
*              NEXT MEMBER.
*          *   QUIET = OPTIONAL KEYWORD. STOP DISPLAY OF SEARCH         LB
*              RESULTS ON TERMINAL.                                     LB
*          *   VOL   = OPTIONAL KEYWORD. TO SPECIFY VOLUME SERIAL       LB
*              NUMBER OF PDS TO BE SEARCHED.                            LB
*          *   FILE  = OPTIONAL KEYWORD. TO SPECIFY SEQUENTIAL DATASET  LB
*              TO STORE SEARCH RESULTS.  FILE MUST BE PRE-ALLOCATED     LB
*              WITH DCB (LRECL=80, BLKSIZE=3200, RECFM=FB, DSO=PS)      LB
*-------------------------------------------------------------------
*
FINDSRCH CSECT                                                          LB
         SET   DSECT=WKAREA,LV=WKLENG
         LR    R11,R1              GET CPPL ADDR
         USING CPPL,R11            ESTAB ADDR
         XC    WKPPL,WKPPL         CLEAR OUT PPL
         LA    R4,WKPPL            GET ADDR OF PPL
         USING PPL,R4              ESTAB ADDR
         MVC   PPLUPT,CPPLUPT      GET UPT
         MVC   PPLECT,CPPLECT      GET ECT
         XC    MYECB,MYECB         CLEAR MY ECB
         LA    R1,MYECB            GET A(ECB)
         ST    R1,PPLECB           GET ECB
         MVC   PPLPCL,APCL         GET PPLPCL
         LA    R1,ANS
         ST    R1,PPLANS           GET ANS
         MVC   PPLCBUF,CPPLCBUF    GET CBUF
         CALLTSSR EP=IKJPARS,MF=(E,WKPPL)
         LTR   R15,R15
         BNZ   ABEND020
         L     R7,ANS              GET ANS
         LA    R1,0(0,R7)          CLEAR OUT TRASH
         LTR   R1,R1               CHECK IF ANS IS THERE
         BZ    ABEND020            NOP - THEN ABEND
         USING IKJPARMD,R7         ESTAB ADDR
*
         XC    FILESW,FILESW       TURN OFF 'FILE' SW                   LB
         CLI   FFILE+1,0           IS 'FILE' ENTERED ??                 LB
         BE    CKQUIET             NOP - THEN GO THRU                   LB
         MVI   FILESW,X'FF'        ELSE - TURN ON SWITCH                LB
*                                                                       LB
CKQUIET  EQU   *                                                        LB
*                                                                       LB
         XC    QUIETSW,QUIETSW     TURN OFF 'FILE' SW                   LB
         CLI   FQUIET+1,0          IS 'QUIET' ENTERED ??                LB
         BE    CKQUIK              NOP - THEN GO THRU                   LB
         MVI   QUIETSW,X'FF'       ELSE - TURN ON SWITCH                LB
*                                                                       LB
CKQUIK   EQU   *                                                        LB
         XC    QKSW,QKSW           TURN OFF 'QK' SW
         CLI   FQUICK+1,0          IS 'QK' ENTERED ??
         BE    CKLOWER             NOP - THEN GO THRU
         MVI   QKSW,X'FF'          ELSE - TURN ON SWITCH
*
CKLOWER  EQU   *
*
         MVI   UPPER,X'FF'         TURN ON SWITCH
         CLI   FLOWER+1,0          IS 'LOWER' ENTERED ?
         BE    NOLOWER             NOP - THEN GO THRU
         MVI   UPPER,X'00'         ELSE - TURN OFF SWITCH
*
NOLOWER  EQU   *
         MVC   WKDSTEST,BLANK
         LA    R1,44               GET LENG OF DSNAME
         STH   R1,WKDST            STORE IT
         TM    FPDS+6,X'80'        SOURCE NAME THERE ?
         BZ    ABEND020            NOP - THEN ABEND
         TM    FPDS+6,X'40'        SOURCE NAME HAS QUOTES ?
         BZ    PREFIXTS            NOP - THEN PREFIX IT WITH USER-ID
         L     R1,FPDS             GET POINTER TO SOURCE NAME
         LH    R2,FPDS+4           GET LENG OF SOURCE NAME
         BCTR  R2,R0               MINUS 1 FOR EX
         EX    R2,MVCFPDS          MOVE DSN
         B     CHECK               GOTO ALLOCIT
*
PREFIXTS EQU   *
         L     R1,CPPLPSCB         GET ADDR OF PSCB
         USING PSCB,R1             ESTABLISH ADDRESSABILITY
         MVC   WKDSTEST(L'PSCBUSER),PSCBUSER
         XR    R15,R15             CLEAR REG 15
         LA    R14,WKDSTEST        GET ADDR OF WKSOURCE
         IC    R15,PSCBUSRL        GET LENG OF USER-ID
         LA    R14,0(R14,R15)      GET TO END OF IT
         MVI   0(R14),C'.'         MOVE '.' IN THERE
         DROP  R1                  DROP ADDR
         L     R1,FPDS             GET POINTER TO SOURCE NAME
         LH    R2,FPDS+4           GET LENG OF SOURCE NAME
         BCTR  R2,R0               MINUS 1 FOR EX
         EX    R2,MVCPFR           MOVE DSN
         B     CHECK               GO TO ALLOCIT
*
MVCFPDS  MVC   WKDSTEST(0),0(R1)
MVCPFR   MVC   1(0,R14),0(R1)
*
*
CHECK    EQU   *
         CLI   FKEYWD+1,0          KEY WORD ENTERED ?
         BE    ALLOCIT             NOP - THEN DO THE TGET
         L     R10,STRING          ELSE - GET POINTER INTO R10
         LH    R2,STRING+4         GET LENG
         ST    R2,ARGLENG          STORE LENG
         BCTR  R2,R0               MINUS 1 FOR EX
         MVC   ARG,BLANK           BLANK OUT THIS AREA FIRST
         EX    R2,SAVEARG          SAVE THE ARGUMENT
         B     THRU                THEN GO THRU
*
ALLOCIT  EQU   *
         LA    R9,MSG1             GET MSG
         TPUT  (R9),L'MSG1         DO TPUT
         LTR   R15,R15             GOOD RET CODE ?
         BNZ   BADPUT              NOP - THEN ABEND 10
*
LOOPGET  EQU   *
         MVC   BUFFER,BLANK        BLANK THE BUFFER
         LA    R9,BUFFER           GET ADDR OF BUFFER
         TGET  (R9),L'BUFFER       DO THE GET
         CLC   BUFFER,BLANK        IS IT STILL BLANK ?
         BE    ALLOCIT             YEAH - THEN GOBACK TO LOOP
         TRT   BUFFER,QUOTE        CHECK FOR 1ST QUOTE
         BC    8,PROMPT            IF NOT FND , GO TO PROMPT
         LA    R15,BUFFER+L'BUFFER GET TO THE END
         LA    R1,1(0,R1)          GET PAST THE QUOTE
         LR    R10,R1              SAVE BEGINNING ADDRESSS
         SR    R15,R1              GET LENG
         BZ    PROMPT              IF ZERO THEN GOTO PROMPT
         BCTR  R15,R0              MINUS 1 FOR EX
         EX    R15,TRTQUOTE        DO THE SEARCH AGAIN
         BC    8,PROMPT            IF NOT FND , GO TO PROMPT
         SR    R1,R10              GET LENG OF ARGUMENT
         ST    R1,ARGLENG          SAVE ARGUMENT LENG
         BCTR  R1,R0               MINUS 1 FOR EX
         MVC   ARG,BLANK           BLANK OUT THIS AREA FIRST
         EX    R1,SAVEARG          SAVE THE ARGUMENT
         B     THRU                THEN GO THRU
*
TRTQUOTE TRT   0(0,R10),QUOTE      DO THE TRT
SAVEARG  MVC   ARG(0),0(R10)
*
PROMPT   EQU   *
         LA    R9,MSG2             GET MSG
         TPUT  (R9),L'MSG2         DO TPUT
         LTR   R15,R15             GOOD RET CODE ?
         BNZ   BADPUT              NOP - THEN ABEND 10
         B     LOOPGET             GOBACK TO GET
*
THRU     EQU   *
         CLI   UPPER,X'FF'         SHOULD TURN ON TO UPPERCASE ?
         BNE   THRU01              NOP - THEN GO THRU
         TR    ARG,TRTABLE         ELSE - TURN ON TO UPPERCASE
*
THRU01   EQU   *
*--------------
         B     THRU02              BYPASS EVERYBODY FOR NOW
*--------------
         L     R15,CPPLPSCB        GET PSCB POINTER
         TM    PSCBATR1-PSCB(R15),PSCBCTRL     OPER ON ?
         BO    THRU02              YEAH - THEN GO THRU
         MVC   TESTUSER,BLANK      TO BLANK IT FIRST
         MVC   TESTUSER(7),PSCBUSER-PSCB(R15)    ELSE - SAVE USER-ID
         XR    R14,R14             CLEAR REG 14
         IC    R14,PSCBUSRL-PSCB(R15)   GET LENG OF USER
         LA    R1,TESTUSER         GET ADDR INTO R1
         LA    R1,0(R14,R1)
         MVI   0(R1),C'.'          PUT IN PERIOD
         EX    R14,TESTDSN         THEN DO THE TEST
         BE    THRU02              IF EQ THEN LET THRU
         LA    R9,ERR3             GET MSG
         TPUT  (R9),L'ERR3         DO TPUT
         LTR   R15,R15             GOOD RET CODE ?
         BNZ   BADPUT              NOP - THEN ABEND 10
         B     ENDIT
*
TESTDSN  CLC   TESTUSER(0),WKDSTEST
MOVE     MVC   KGROUP(0),0(R1)
COMPARE  CLC   SAVEMEM(0),KGROUP
*
THRU02   EQU   *
*
         XC    GROUPSW,GROUPSW     CLEAR GROUPSW
         TM    PGROUP+6,X'80'      IS GROUP THERE ???
         BZ    THRU03              NOP - THEN FORGET IT
         MVI   GROUPSW,X'FF'       TURN ON SWITCH
         L     R1,PGROUP           ELSE - GET ITS ADDRESS
         LH    R9,PGROUP+4         GET LENG
         BCTR  R9,R0               MINUS 1 FOR EXECUTE
         ST    R9,LGROUP           SAVE LENG FOR LATER COMPARE
         EX    R9,MOVE             NOW DO THE MOVE
*
THRU03   EQU   *
         XC    ETAB,ETAB           CLEAR TABLE
         XR    R9,R9               CLEAR REG 9
         IC    R9,ARG              GET FIRST BYTE INTO TABLE
         LA    R9,ETAB(R9)         GET TO THE POINT
         MVI   0(R9),X'FF'         TURN ON STOP INDICATOR
         XC    WKDAP08,WKDAP08     CLEAR AREA
         LA    R9,WKDAP08          GET ADDR INTO R9
         USING DAPB08,R9           ESTAB ADDR
         MVC   DA08CD,=XL2'0008'
         LA    R1,WKDST            GET ADDR OF DSNAME BUFF (TEST)
         ST    R1,DA08PDSN
         MVC   DA08DDN,BLANK       BLANK OUT DDNAME
         MVC   DA08UNIT,=CL8'SYSDA'
         TM    PVOL+6,X'80'        IS VOL   THERE ???                   LB
         BZ    VOLBLNK             NOP - Use Blanks                     LB
         L     R1,PVOL             Load address of PVOL                 LB
         MVC   DA08SER,0(R1)       Use specified VOL                    LB
         B     VOLXIT              Continue                             LB
VOLBLNK  EQU   *                                                        LB
         MVC   DA08SER,BLANK       BLANK SER NO
VOLXIT   EQU   *                                                        LB
         MVC   SAVEVOLS,DA08SER    SAVE VOLSER                          LB
         MVC   DA08PSWD,BLANK      BLANK OUT PSWD
         MVC   DA08MNM,BLANK       BLANK OUT MEMBER NAME
         OI    DA08DSP1,DA08SHR    SHR
         DROP  R9
         XC    WKDAPL,WKDAPL       CLEAR AREA
         LA    R9,WKDAPL           GET ADDR INTO R9
         USING DAPL,R9             ESTAB ADDTR
         MVC   DAPLUPT,CPPLUPT     GET UPT
         MVC   DAPLECT,CPPLECT     GET ECT
         XC    MYECB,MYECB         CLEAR MYECB
         LA    R1,MYECB            GET ITS ADDR
         ST    R1,DAPLECB          GET IT INTO LIST
         MVC   DAPLPSCB,CPPLPSCB   GET PSCB
         LA    R1,WKDAP08          GET ADDR OF DAIR
         ST    R1,DAPLDAPB         GET IT INTO LIST
         LA    R1,WKDAPL           GET ADDR OF PARM LIST
         CALLTSSR EP=IKJDAIR,MF=(E,WKDAPL)
         LTR   R15,R15             TEST RET CODE
         BNZ   DAIRERR             BAD - GOTO DAIR ERR
         LA    R9,WKDAP08          GET ADDR INTO R9
         USING DAPB08,R9           ESTAB ADDR
         MVC   SAVEDDTS,DA08DDN    SAVE DD NAME FOR TEST MASTER
         TM    DA08DSO,X'02'       PDS ???
         BZ    NOTPDS              NOP - THEN ERROR
         ZAP   COUNTER,=P'0'
         ZAP   TOT,=P'0'           ZERO OUT FINAL COUNTER
         ZAP   MEMTOT,=P'0'        ZERO OUT THE MEMBER TOTAL
         DROP  R9
*
*                                                                       LB
*********************************************************************** LB
*        OPEN  OUTFIL                                                 * LB
*********************************************************************** LB
         CLI   FILESW,X'FF'        Is 'FILE' SW ON ??                   LB
         BNE   NOFILE01            No, bypass FILE IO                   LB
*                                  Yes, open file                       LB
         MVC   WOUTFIL,OUTFIL      Move DCB constant to workarea        LB
         MVC   WOPENO,OPENO        Move Open constant to workarea       LB
         LA    R9,WOUTFIL                                               LB
         OPEN  ((R9),(OUTPUT)),MF=(E,WOPENO)                            LB
         LA    R1,WOUTFIL                                               LB
         USING IHADCB,R1                                                LB
         TM    DCBOFLGS,DCBOFOPN   IS OPEN GOOD ?                       LB
         BC    8,BADOPENO          NO _ GOTO BAD OPEN FOR OUTFIL        LB
         DROP  R1                                                       LB
NOFILE01 EQU   *                                                        LB
*********************************************************************** LB
*                                                                       LB
         MVC   WMASTER,MASTER      GET DCB INTO WK AREA
         MVC   WOPENM,OPENM        MOVE OPEN LIST TO WK AREA
         LA    R1,WMASTER          GET DCB
         USING IHADCB,R1           ESTAB ADDR
         MVC   DCBDDNAM,SAVEDDTS   GET DDNAME
         DROP  R1                  DROP ADDR
         OPEN  (WMASTER),MF=(E,WOPENM)
         LA    R1,WMASTER          GET DCB
         USING IHADCB,R1           ESTAB ADDR
         TM    DCBOFLGS,DCBOFOPN   IS OPEN GOOD ?
         BC    8,BADOPEN           NO - GOTO BAD OPEN
         MVC   SAVESIZE,DCBBLKSI   SAVE REAL BLK SIZE
         MVC   SAVERECL,DCBLRECL   SAVE REAL LRECL
         MVC   DCBBLKSI,H256       BLKSIZE IS 256
         DROP  R1                  DROP ADDR
         LA    R5,DIR              GET ADD OF DIR AREA
         BAL   R9,READNXT          DO THE READ
         BAL   R9,CHECKIT          DO THE CHECK
         NOTE  WMASTER             GET CURR TTR
         LA    R1,1(0,R1)          BUMP IT BY 1
         ST    R1,TTR              SAVE IT
         LA    R1,WMASTER          GET DCB ADDR
         USING IHADCB,R1           ESTAB ADDR
         LA    R2,LOOPPROC         GET ADDRT OF EODAD
         STCM  R2,B'0111',DCBEODA  STORE INTO DCB
         DROP  R1                  DROP ADDR
         B     LOOPCK              GOTO LOOP
*
READIR   EQU   *
*
*--------------
*        THIS IS A LOOP TO READ DIR
*--------------
*
         LA    R1,WMASTER          GET DCB ADDR
         USING IHADCB,R1           ESTAB ADDR
         MVC   DCBBLKSI,H256       BLKSIZE IS 256
         MVC   SAVEODAD,DCBEODA    SAVE EODAD
         LA    R2,ENDRPT           GET NEW EODAD
         STCM  R2,B'0111',DCBEODA
         DROP  R1                  DROP ADDR
         POINT WMASTER,TTR         GET TO NEW POS
         LA    R5,DIR              GET RECORD AREA
         BAL   R9,READNXT          THEN READ
         BAL   R9,CHECKIT          AND CHECK THE READ
         LA    R1,WMASTER          GET DCB ADDR
         USING IHADCB,R1           ESTAB ADDR
         MVC   DCBEODA(3),SAVEODAD GET OLD EODAD BACK
         DROP  R1                  DROP R1
         NOTE  WMASTER
         LA    R1,1(0,R1)          BUMP IT BY 1
         ST    R1,TTR              SAVE THE TTR FOR NEXT TIME
*
LOOPCK   EQU   *
         LA    R1,DIR              GET DIR ADDR
         LH    R2,DIR              GET THE BYTES USED
         AR    R1,R2               GET ENDING ADDR
         ST    R1,SAVEEND          SAVE IT
         LA    R5,2                GET R5 AS 1ST BASE TO MEM NAME
         ST    R5,SAVECURR         SAVE CURR POS
*
LOOPPROC EQU   *
*
*--------------
*        THIS IS A LOOP TO CHECK DIR ENTRY FOR EACH MEMBER
*--------------
*
         CP    COUNTER,=P'0'       IS COUNTER GREATER THAN 0
         BE    LOOPPR1             ZERO ? THEN GO THRU
         AP    TOT,COUNTER         ADD COUNTER TO FINAL TOTAL
         AP    MEMTOT,=P'1'        ADD 1 TO MEMBER TOTAL
         MVC   BUFFER,BLANK        CLEAR BUFFER
         MVC   BUFFER(L'MSG4),MSG4 GET MSG
         MVC   BUFFER+44(L'SAVEMEM),SAVEMEM
         MVC   BUFFER+55(L'PAT),PAT
         ED    BUFFER+55(L'PAT),COUNTER+2
*                                                                       LB
*********************************************************************** LB
*        PUT   OUTFIL - DETAILS for member totals                     * LB
*********************************************************************** LB
         CLI   FILESW,X'FF'        IS 'FILE' SW ON ??                   LB
         BNE   NOFILE02            NO, BYPASS FILE IO                   LB
         MVC   PREC,BLANK          CLEAR PRINT RCD                      LB
         MVI   PRCDTYP,C'2'        Member Details RCD                   LB
         MVC   PDSN,WKDSTEST                                            LB
         MVC   PVOLSER,SAVEVOLS                                         LB
         MVC   PDSO,=C'PO '                                             LB
         MVC   PMBR,SAVEMEM        Member Name                          LB
         MVC   PFNDCNT,BUFFER+56   Total Occurances                     LB
         LA    R9,WOUTFIL                                               LB
         PUT   (R9),PREC           Write to OUTFIL                      LB
NOFILE02 EQU   *                                                        LB
*********************************************************************** LB
*                                                                       LB
         CLI   QUIETSW,X'FF'       IS 'QUIET' SW ON ??                  LB
         BE    LOOPPR1             YES, BYPASS TERMINAL IO              LB
         LA    R9,BUFFER           GET MSG
         TPUT  (R9),L'BUFFER       DO TPUT
         LTR   R15,R15             GOOD RET CODE ?
         BNZ   BADPUT              NOP - THEN ABEND 10
*
LOOPPR1  EQU   *
         ZAP   COUNTER,=P'0'       ZERO OUT COUNTER
         LA    R1,DIR              GET DIR ADDTR
         L     R5,SAVECURR         GET CURR DISP
         AR    R1,R5               GET TO CURR POS
         C     R1,SAVEEND          CHECK AGST ENDING ADDR
         BNL   READIR              IF END - READ ANOTHER DIR BLK
         CLC   0(8,R1),=8XL1'FF'   IS THIS LAST MEM
         BE    ENDRPT              YES - GOTO ENDIT
         XR    R2,R2               CLEAR REG 2
         IC    R2,11(R1)           GET NUM
         N     R2,=F'31'           CLEAN OUT TRASH
         AR    R2,R2               DOUBLE LENGTH
         LA    R2,12(0,R2)         PLUS MEM NAME AND MISC
         A     R2,SAVECURR         ADD TO CURR DISP
         ST    R2,SAVECURR         SAVE THIS CURR DISP
*
GOON     EQU   *
         LR    R2,R1               R2 HAS GOOD ADDR
         MVC   SAVEMEM,0(R2)       SAVE MOD NAME
*
         CLI   GROUPSW,X'FF'       GROUP SW ON ???
         BNE   GOON1               NOP - THEN NO CHECK
         L     R15,LGROUP          GET LENG FOR COMPARE
         EX    R15,COMPARE         DO THE COMPARE
         BL    LOOPPR1             LOW - THEN GO BACK
         BH    ENDRPT              HIGH - THEN TERMINATE
*
GOON1    EQU   *
         XR    R1,R1               CLEAR REG1
         ICM   R1,B'1110',8(R2)    GET TTR
         ST    R1,WKTTR            SAVE MEM TTR
         LA    R1,WMASTER          GET DCB ADDR
         USING IHADCB,R1           ESTAB ADDR
         MVC   DCBBLKSI,SAVESIZE   GET REAL BLKSIZE
         MVC   DCBLRECL,SAVERECL   GET REAL LRECL
         DROP  R1                  DROP ADDR
         POINT WMASTER,WKTTR
         LA    R5,RECORD           GET REC ADDR INTO R5
         XC    SW,SW               CLEAR BLK SWITCH
         ZAP   COUNTER,=P'0'       MOVE 0 TO COUNTER
*
FIND0010 EQU   *
         BAL   R9,READNXT          DO THE READ
         BAL   R9,CHECKIT          DO THE CHECK
         LA    R8,RECORD           GET ADDR OF RECORD
         L     R1,WREADM+16        GET IOB ADDR
         LH    R15,SAVESIZE        GET SAVED SIZE
         SH    R15,14(R1)          GET RECORD SIZE HERE
         STH   R15,SAVECNT         SAVE IT
         LA    R14,RECORD(R15)     GET ENDING ADDR
         ST    R14,SAVEREC         SAVE IT
         TM    SW,NEXTBLK          SHOULD CHECK THIS BLK COMPARE ?
         BZ    FIND0020            NOP - THEN KEEP ON
         NI    SW,X'FF'-NEXTBLK    TURN OFF SW
         LH    R14,SAVECOMP        GET SAVE COMP
         LA    R7,ARG(R14)         GET ADDR OF THE REST OF CONSTANT
         XR    R1,R1               CLEAR REG 1
         L     R1,ARGLENG          GET LENG OF CONSTANT
         SR    R1,R14              R1 HAS RESIDUAL LENG
         CR    R15,R1              CHECK SAVECNT
         BL    FIND0020            IS LESS THEN KEEP ON
         BCTR  R1,R0               MINUS 1 FOR EX
         EX    R1,CKREST           DO THE COMPARE
         BNE   FIND0015            IF NOT EQ THEN GO THRU
         AP    COUNTER,=P'1'       ADD 1 TO COUNTER
         CLI   QKSW,X'FF'          IS 'QK' SW ON ??
         BE    LOOPPROC            YEAH - THEN BYE BYE
*
FIND0015 EQU   *
         LA    R8,1(0,R8)          ELSE - RESET R8
         BCTR  R15,R0              SUBTRACT SAVECNT BY 1
         STH   R15,SAVECNT         AND RESAVE IT
*
FIND0020 EQU   *
         XR    R15,R15             CLEAR R15
         ICM   R15,B'0011',SAVECNT GET SAVED COUNT
         BZ    FIND0010            IF ZERO THEN GOBACK TO READ
         CH    R15,H256            IS IT GREATER THAN 256
         BNH   FIND0030            NOP - THEN GO THRU
         SH    R15,H256            ELSE - SUBTRACT IT BY 256
         STH   R15,SAVECNT         THEN SAVE IT FOR NEXT TIME
         LH    R15,H256            LOAD 256 FOR TRT
         B     FIND0040            THEN GOTO DO TRT
*
FIND0030 EQU   *
         XC    SAVECNT,SAVECNT     ZERO OUT SAVE CNT
*
FIND0040 EQU   *
         BCTR  R15,R0              MINUS 1 FOR EX
         EX    R15,TRTEE           CHECK FOR X'EE'
         BC    8,FIND0070          NOT FND - THEN BUMP ADDR
         L     R14,SAVEREC         GET ENDING ADDR
         SR    R14,R1              SUBTRACT FOR LENG
         L     R15,ARGLENG         GET ARG LENG
         CR    R14,R15             CHECK AGSNT ARG LNG
         BNL   FIND0060            IF HIGH THEN SKIP THIS
         STH   R14,SAVECOMP        SAVE THIS LENG
         BCTR  R14,R0              MINUS 1 FOR EX
         EX    R14,CLCEE           DO THE COMPARE
         BNE   FIND0050            IS NOT EQ THEN GO ON
         OI    SW,NEXTBLK          TURN ON SW FOR NEXT BLK COMPARE
         B     FIND0010            GOBACK TO READ
*
FIND0050 EQU   *
         LA    R8,1(0,R1)          ELSE - RESET R8
         L     R15,SAVEREC         GET ENDING ADDR
         SR    R15,R8              GET RESIDUAL LENG
         STH   R15,SAVECNT         SAVE IT
         B     FIND0020            GOBACK TO LOOP
*
FIND0060 EQU   *
         L     R3,ARGLENG          GET ARG LENG
         BCTR  R3,R0               MINUS 1 FOR EX
         EX    R3,CLCEE            DO THE COMPARE
         BNE   FIND0065            IF NOT MATCH - THEN GO THU
         AP    COUNTER,=P'1'       ADD 1 TO COUNTER
         CLI   QKSW,X'FF'          IS 'QK' SW ON ??
         BE    LOOPPROC            YEAH - THEN BYE BYE
*
FIND0065 EQU   *
         LA    R8,1(0,R1)          ELSE - RESET R8
         L     R15,SAVEREC         GET ENDING ADDR
         SR    R15,R8              GET RESIDUAL LENG
         STH   R15,SAVECNT         SAVE IT
         B     FIND0020            GOBACK TO LOOP
*
FIND0070 EQU   *
         LA    R8,1(R15,R8)        GET TO NEXT ADDR
         B     FIND0020            GOBACK TO LOOP
*
TRTEE    TRT   0(0,R8),ETAB
CLCEE    CLC   0(0,R1),ARG
CKREST   CLC   0(0,R8),0(R7)
*
*
READNXT  EQU   *
*
*--------------
*        AT ENTRY TO THIS ROUTINE, R5 WILL POINT TO THE AREA
*        FOR THE RECORD TO BE READ INTO
*--------------
*
         MVC   WREADM,READM        MOVE READ LIST TO WK AREA
         READ  WREADM,SF,WMASTER,(R5),'S',MF=E
         BR    R9
         SPACE 3
*
CHECKIT  EQU   *
*
*--------------
*        THIS IS TO CHECK AFTER ANY BSAM I/O
*        WREADM WILL BE THE DECB TO BE CHECKED ON
*--------------
*
         CHECK WREADM
         BR    R9
         EJECT
*
DAIRERR  EQU   *
         ST    R15,DAIRRET         SAVE R15
         LA    R9,ERR2             GET MSG
         TPUT  (R9),L'ERR2         DO TPUT
         LTR   R15,R15             GOOD RET CODE ?
         BNZ   BADPUT              NOP - THEN ABEND 10
         LA    R9,WKDERR           GET ADDR OF DAIRFAIL PARM
         USING DFDSECTD,R9         ESTAB ADDR
         LA    R15,WKDAPL
         ST    R15,DFDAPLP
         LA    R15,DAIRRET
         ST    R15,DFRCP
         LA    R15,HEXZEROS
         ST    R15,DFJEFF02
         LA    R15,DAIRBYTE
         ST    R15,DFIDP
         LR    R1,R9               GET R1 SET UP
         MVC   WLINKIT,LINKIT      GET LINK LIST FORM
         LINK  SF=(E,WLINKIT)
         LTR   R15,R15             RETN CODE GOOD ?
         BZ    ENDIT               YEAH - THEN THRU
         ABEND 30                  ELSE ABEND 30
*
ABEND020 EQU   *
         LA    R2,ERR1             GET BUFFER ADDR
         TPUT  (R2),L'ERR1         DO TPUT
         LTR   R15,R15             TEST R15
         BNZ   BADPUT              NO GOOD - GOTO BADTPUT
         ABEND 20
*
NOTPDS   EQU   *
         LA    R2,ERR4             GET BUFFER ADDR
         TPUT  (R2),L'ERR4         DO TPUT
         LTR   R15,R15             TEST R15
         BNZ   BADPUT              NO GOOD - GOTO BADTPUT
         B     ENDIT               ELSE - GO TO EXIT
*
BADOPEN  EQU   *
         MVC   BUFFER,MSG3         GET MSG
         LA    R2,BUFFER           GET BUFFER ADDR
         TPUT  (R2),EIGHTY         DO TPUT
         LTR   R15,R15             TEST R15
         BC    7,BADPUT            NO GOOD - GOTO BADTPUT
         B     ENDIT               ELSE - GOTO EXIT
*                                                                       LB
BADOPENO EQU   *                                                        LB
         MVC   BUFFER,MSG3O        GET MSG                              LB
         LA    R2,BUFFER           GET BUFFER ADDR                      LB
         TPUT  (R2),EIGHTY         DO TPUT                              LB
         LTR   R15,R15             TEST R15                             LB
         BC    7,BADPUT            NO GOOD - GOTO BADTPUT               LB
         B     ENDIT               ELSE - GOTO EXIT                     LB
         EJECT
*
*
*
ENDRPT   EQU   *
         CP    COUNTER,=P'0'       IS COUNTER GREATER THAN 0
         BE    ENDRPT1             ZERO ? THEN GO THRU
         MVC   BUFFER,BLANK        CLEAR BUFFER
         MVC   BUFFER(L'MSG4),MSG4 GET MSG
         MVC   BUFFER+44(L'SAVEMEM),SAVEMEM
         MVC   BUFFER+55(L'PAT),PAT
         ED    BUFFER+55(L'PAT),COUNTER+2
*                                                                       LB
*********************************************************************** LB
*        PUT   OUTFIL - DETAILS for member totals                     * LB
*********************************************************************** LB
         CLI   FILESW,X'FF'        Is 'FILE' SW ON ??                   LB
         BNE   NOFILE03            No, bypass FILE IO                   LB
         MVC   PREC,BLANK          Yes, write to file                   LB
         MVI   PRCDTYP,C'2'        Member Details RCD                   LB
         MVC   PDSN,WKDSTEST       PDS Name                             LB
         MVC   PVOLSER,SAVEVOLS    Volser No                            LB
         MVC   PDSO,=C'PO '        DSO of PO                            LB
         MVC   PMBR,SAVEMEM        Member Name                          LB
         MVC   PFNDCNT,BUFFER+56   Total Occurances                     LB
         LA    R9,WOUTFIL                                               LB
         PUT   (R9),PREC           Write to OUTFIL                      LB
NOFILE03 EQU   *                                                        LB
*********************************************************************** LB
*                                                                       LB
         CLI   QUIETSW,X'FF'       IS 'QUIET' SW ON ??                  LB
         BE    ENDRPT1             YES, BYPASS TERMINAL IO              LB
         LA    R9,BUFFER           GET MSG
         TPUT  (R9),L'BUFFER       DO TPUT
         LTR   R15,R15             GOOD RET CODE ?
         BNZ   BADPUT              NOP - THEN ABEND 10
*
ENDRPT1  EQU   *
         CLI   QUIETSW,X'FF'       IS 'QUIET' SW ON ??                  LB
         BE    NOTPUT00            YES, BYPASS TERMINAL IO              LB
         MVC   BUFFER,BLANK        CLEAR BUFFER
         LA    R9,BUFFER           GET MSG
         TPUT  (R9),L'BUFFER       DO TPUT
         LTR   R15,R15             GOOD RET CODE ?
         BNZ   BADPUT              NOP - THEN ABEND 10
NOTPUT00 EQU   *                                                        LB
         MVC   BUFFER,BLANK        CLEAR BUFFER
         MVC   BUFFER(L'MSG5),MSG5 GET MSG
         MVC   BUFFER+7(L'PAT1),PAT1
         ED    BUFFER+7(L'PAT1),MEMTOT+3
         MVC   BUFFER+55(L'PAT),PAT
         ED    BUFFER+55(L'PAT),TOT+2
*                                                                       LB
*********************************************************************** LB
*        PUT   OUTFIL - TOTALS                                        * LB
*********************************************************************** LB
         CLI   FILESW,X'FF'        IS 'FILE' SW ON ??                   LB
         BNE   NOFILE04            NO, BYPASS FILE IO                   LB
         CP    MEMTOT,=P'0'        IS MEMTOT  EQUAL TO     0            LB
         BNE   NO0RCD              NO, BYPASS RECORD WITH DSN           LB
*                                  YES, WRITE RECROD WITH DSN           LB
         MVC   PREC,BLANK          CLEAR PRINT RCD                      LB
         MVI   PRCDTYP,C'2'        Member DSN RCD                       LB
         MVC   PDSN,WKDSTEST                                            LB
         MVC   PVOLSER,SAVEVOLS                                         LB
         MVC   PMBR,=C'>*None*<'   Member Name                          LB
**       MVI   PFNDCNT+6,C'0'      Total Occurances = Zero              LB
         LA    R9,WOUTFIL                                               LB
         PUT   (R9),PREC           Write to OUTFIL                      LB
         B     NOFILE04                                                 LB
NO0RCD   EQU   *                                                        LB
         MVC   PREC,BLANK          CLEAR PRINT RCD                      LB
         MVI   PRCDTYP,C'2'        Member DSN RCD                       LB
         MVC   PDSN,WKDSTEST                                            LB
         MVC   PVOLSER,SAVEVOLS    Volser No                            LB
         MVC   PMBR,=C' MBRS->>'   Member Name                          LB
         MVC   PFNDCNT+1(L'PAT1),BUFFER+7  Member Total                 LB
         LA    R9,WOUTFIL                                               LB
         PUT   (R9),PREC           Write to OUTFIL                      LB
         MVC   PMBR,=C' HITS->>'   Member Name                          LB
         MVC   PFNDCNT+0(L'PAT-1),BUFFER+56  Total Occurances           LB
         LA    R9,WOUTFIL                                               LB
         PUT   (R9),PREC           Write to OUTFIL                      LB
*        B     NOFILE04                                                 LB
                                                                        LB
         MVC   PREC,BLANK          YES, WRITE TO FILE                   LB
         MVC   PREC(36),=C'3 XXXXX Members, Total Found XXXXXXX'        LB
         MVC   PREC+1(L'PAT1),BUFFER+7  Member Total                    LB
         MVC   PREC+28(L'PAT),BUFFER+55 Total Occurances                LB
         LA    R9,WOUTFIL                                               LB
         PUT   (R9),PREC           WRITE TO OUTFIL                      LB
*        LTR   R15,R15             GOOD IO ?                            LB
*        BNZ   BADPUT11            NOP - THEN ABEND 11                  LB
NOFILE04 EQU   *                                                        LB
*********************************************************************** LB
*                                                                       LB
         CLI   QUIETSW,X'FF'       IS 'QUIET' SW ON ??                  LB
         BE    NONOTES             YES, BYPASS TERMINAL IO              LB
         LA    R9,BUFFER           GET MSG
         TPUT  (R9),L'BUFFER       DO TPUT
         LTR   R15,R15             GOOD RET CODE ?
         BNZ   BADPUT              NOP - THEN ABEND 10
         CLI   QKSW,X'FF'          'QK' SWITCH ON ??
         BNE   NONOTES             NO - THEN NO NOTES DISPLAYED
         MVC   BUFFER,BLANK        CLEAR BUFFER
         MVC   BUFFER(L'MSG5A),MSG5A GET MSG
         LA    R9,BUFFER           GET MSG
         TPUT  (R9),L'BUFFER       DO TPUT
         LTR   R15,R15             GOOD RET CODE ?
         BNZ   BADPUT              NOP - THEN ABEND 10
*
NONOTES  EQU   *
         MVC   WCLOSEM,CLOSEM      MOVE CLOSE LIST TO WK AREA
         CLOSE (WMASTER),MF=(E,WCLOSEM)
*                                                                       LB
*********************************************************************** LB
*        CLOSE OUTFIL                                                 * LB
*********************************************************************** LB
         CLI   FILESW,X'FF'        Is 'FILE' SW ON ??                   LB
         BNE   NOFILE05            No, bypass FILE IO                   LB
         LA    R9,WOUTFIL          Yes, close file                      LB
         MVC   WCLOSEO,CLOSEO                                           LB
         CLOSE ((R9),),MF=(E,WCLOSEO)                                   LB
NOFILE05 EQU   *                                                        LB
*********************************************************************** LB
*                                                                       LB
         B     ENDIT
*
BADPUT   EQU   *
         ABEND 10                  ABEND FOR TPUT
*                                                                       LB
BADPUT11 EQU   *                                                        LB
         ABEND 11                  ABEND FOR TPUT on OUTFIL             LB
*
*
ENDIT    EQU   *
         EXIT
         EJECT
*
EIGHTY   EQU   80
MSG1     DC    C'Enter search argument in quotes'
MSG2     DC    C'Missing quotes - Re-Enter'
MSG3     DC    C'Open on ''MASTER'' file has failed'
MSG3O    DC    C'Open on ''OUTFIL'' file has failed'                    LB
MSG4     DC    C'Total Number of Occurrences found in Member XXXXXXXX iX
               s XXXXXXX'
MSG5     DC    C'   From XXXXX Members, the Final Total is   ==========X
               > XXXXXXX'
MSG5A    DC    C'   Note - QUICK option invoked. Number of occurrences X
               is always 1 if found'
ERR1     DC    C'IKJPARS ERROR - COMMAND TERMINATED'
ERR2     DC    C'IKJDAIR ERROR - COMMAND TERMINATED'
ERR3     DC    C'Command is restricted to search your own Data Sets OnlX
               y'
ERR4     DC    C'Data set is not Partitioned. Command Terminated'
*
H256     DC    H'256'
PAT      DC    X'4020202020202120'
PAT1     DC    X'402020202120'
*
*
         EJECT
         DS    0F
LINKIT   LINK  EP=IKJEFF18,SF=L
LINKITL  EQU   *-LINKIT
*
*
*
*
MASTER   DCB   DSORG=PS,MACRF=(RP),EODAD=ENDRPT,RECFM=U,DDNAME=MASTER
MASTERL  EQU   *-MASTER            LENG OF THE INPUT DCB
*
*
*
*
         DS    0F                  ALIGN ON FWD BOUNDARY
OPENM    OPEN  (MASTER),MF=L
OPENML   EQU   *-OPENM
*
*
*
*
         DS    0F                  ALIGN ON FWD BOUNDARY
CLOSEM   CLOSE (MASTER,FREE),MF=L
CLOSEML  EQU   *-CLOSEM
*
*
*
*
         DS    0F
READM    READ  HDECB,SF,MASTER,,'S',MF=L
READML   EQU   *-READM
*
*
*
*                                                                       LB
         DS    0F                                                       LB
OPENO    OPEN  (OUTFIL,(OUTPUT)),MF=L                                   LB
OPENOL   EQU   *-OPENO                                                  LB
*                                                                       LB
         DS    0F                                                       LB
CLOSEO   CLOSE (OUTFIL),MF=L                                            LB
CLOSEOL  EQU   *-CLOSEO                                                 LB
*                                                                       LB
         DS    0F                                                       LB
OUTFIL   DCB   DSORG=PS,MACRF=(PM),                                    XLB
               LRECL=80,BLKSIZE=3200,RECFM=FB,                         XLB
               DDNAME=OUTFIL                                            LB
OUTFILL  EQU   *-OUTFIL                                                 LB
*                                                                       LB
*                                                                       LB
*                                                                       LB
*                                                                       LB
APCL     DC    A(PCL)
HEXZEROS DC    F'0'
DAIRBYTE DC    XL2'0001'
*
*
BLANK    DC    CL80' '
*
         EJECT
         SPACE 3
QUOTE    DS    0CL256
         DC    256X'00'
         ORG   QUOTE+C''''         STOP AT QUOTE
         DC    X'FF'
         ORG
         SPACE 3
*
TRTABLE  DC    256AL1(*-TRTABLE)
*
         ORG   TRTABLE+X'81'       THIS IS LOWER CASE 'A'
         DC    C'ABCDEFGHI'
         ORG   TRTABLE+X'91'       THIS IS LOWER CASE 'J'
         DC    C'JKLMNOPQR'
         ORG   TRTABLE+X'A2'       THIS IS LOWER CASE 'S'
         DC    C'STUVWXYZ'
         ORG
*
         EJECT
         IKJPPL
PPLLENG  EQU   *-PPL               LENG OF PPL
         EJECT
         IKJDAPL
DAPLLENG EQU   *-DAPL              LENG OF DAPL
         EJECT
         IKJDAP08
DAP08LEN EQU   *-DAPB08            LENG
         EJECT
         IKJEFFDF DFDSECT=YES
         EJECT
*
WKAREA   DSECT
         DS    18F                 SAVE AREA
WKPARM   DS    20F                 THIS IS USED FOR CALL
*
PREC     DS    0CL80               OUTFIL  RECORD FOR FOUND RESULTS     LB
PRCDTYP  DS    CL01      01-01     Record Type 2-member  3-PDS Totals   LB
PDSN     DS    CL44      02-45     PDS Name                             LB
PVOLSER  DS    CL06      46-51     PDS VOLSER                           LB
PDSO     DS    CL03      52-54     DSO PO always!                       LB
PMBR     DS    CL08      55-62     PDS Member Name                      LB
PFNDCNT  DS    CL07      63-69     Found Search Count                   LB
         DS    CL11      70-80                                          LB
*                                                                       LB
         DS    0F
WLINKIT  DS    CL(LINKITL)
*
*
*
         DS    0F
WKPPL    DS    CL(PPLLENG)
         DS    0F
WKDAPL   DS    CL(DAPLLENG)
         DS    0F
WKDAP08  DS    CL(DAP08LEN)
         DS    0F
WKDERR   DS    CL(DFLEN)
*
*
TTR      DS    F                   THIS IS SAVED TTR
WKTTR    DS    F                   THIS IS SAVED TTR
SAVEEND  DS    F
SAVECURR DS    F
SAVESIZE DS    H
SAVERECL DS    H
SAVE15   DS    F
SAVECOMP DS    H
SAVECNT  DS    H
SAVEREC  DS    F
ANS      DS    F
MYECB    DS    F
DAIRRET  DS    F
ARGLENG  DS    F                   ARGUMENT LENG
WDWORD   DS    D                   WORK DOUBLE WORD
SAVEODAD DS    CL3
         DS    0H
WKDST    DS    0CL46
         DS    CL2                 LENG
WKDSTEST DS    CL44                NAME
         DS    0H
*
SAVEDDTS DS    CL8                 SAVED DDNAME FOR TEST MASTER
SAVEMEM  DS    CL8                 SAVED MEMBER NAME
SAVEVOLS DS    CL6                 SAVE VOLSER                          LB
*
*
BUFFER   DS    CL80
ARG      DS    CL80                SAVED ARGUMENT
SW       DS    X
NEXTBLK  EQU   X'80'
*
UPPER    DS    X                   SWITCH USED FOR UPPERCASE
QKSW     DS    X                   SWITCH USED FOR 'QUICK' OPTION
FILESW   DS    X                   SWITCH USED FOR 'FILE'  OPTION       LB
QUIETSW  DS    X                   SWITCH USED FOR 'QUIET'  OPTION      LB
COUNTER  DS    PL6
TOT      DS    PL6                 THIS IS FINAL TOTAL
MEMTOT   DS    PL6                 THIS IS TOTAL OF MEMBERS
TESTUSER DS    CL8
KGROUP   DS    CL7                 SAVED GROUP PREFIX
LGROUP   DS    F                   LENG USED TO COMPARE
GROUPSW  DS    X                   SWITCH
*
*                                                                       LB
         DS    0F                                                       LB
WOUTFIL  DS    CL(OUTFILL)         DCB                                  LB
*                                                                       LB
         DS    0F                                                       LB
WOPENO   DS    CL(OPENOL)          OPEN                                 LB
*                                                                       LB
         DS    0F                                                       LB
WCLOSEO  DS    CL(CLOSEOL)         CLOSE                                LB
*                                                                       LB
*                                                                       LB
*                                                                       LB
*
         DS    0F                  ALIGN ON FWD BOUNDARY
WMASTER  DS    CL(MASTERL)         WK DCB
*
         DS    0F                  ALIGN ON FWD BOUNDARY
WOPENM   DS    CL(OPENML)
*
         DS    0F
WCLOSEM  DS    CL(CLOSEML)
*
         DS    0F
WREADM   DS    CL(READML)
*
ETAB     DS    CL256
*
         DS    0F
DIR      DS    CL256
RECORD   DS    CL32767             THIS IS A LARGEST BLK
*
WKLENG   EQU   *-WKAREA            THIS IS LENG OF GETMAINED AREA
*
         EJECT
         CVT   DSECT=YES
         EJECT
         IKJCPPL
         EJECT
         IKJPSCB
         EJECT
         DCBD  DSORG=PS
         EJECT
FIND     CSECT
         PRINT NOGEN
PCL      IKJPARM
FPDS     IKJPOSIT DSNAME,PROMPT='DSNAME OF PDS',                       X
               HELP=('DSNAME OF PDS TO BE SEARCHED')
*
FKEYWD   IKJKEYWD
         IKJNAME 'STRING',SUBFLD=FSTRING
*
FLOWER   IKJKEYWD
         IKJNAME 'LOWER'
*                                                                       LB
FFILE    IKJKEYWD                                                       LB
         IKJNAME 'FILE'                                                 LB
*                                                                       LB
FQUIET   IKJKEYWD                                                       LB
         IKJNAME 'QUIET'                                                LB
*                                                                       LB
FVOL     IKJKEYWD                                                       LB
         IKJNAME 'VOL',SUBFLD=@VOL                                      LB
*
FQUICK   IKJKEYWD
         IKJNAME 'QUICK'
*
GROUP    IKJKEYWD
         IKJNAME 'GROUP',SUBFLD=@GROUP
*
*
FSTRING  IKJSUBF
STRING   IKJIDENT 'ARGUMENT STRING',MAXLNTH=80,CHAR,ASIS,              X
               PROMPT='STRING OF ARGUMENT TO BE SEARCHED'
*
@GROUP   IKJSUBF
PGROUP   IKJIDENT 'MEMBER NAME PREFIX',MAXLNTH=7,                      X
               FIRST=ALPHA,OTHER=ALPHANUM,                             X
               PROMPT='MEMBER NAME PREFIX USED FOR SEARCH'
*                                                                       LB
@VOL     IKJSUBF                                                        LB
PVOL     IKJIDENT 'VOLUME',,MAXLNTH=6,CHAR,                            XLB
               PROMPT='VOLUME for Dataset'                              LB
*
         IKJENDP
*
         END
