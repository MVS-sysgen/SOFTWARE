//KIKPPCOB JOB  CLASS=C,MSGCLASS=Z
// EXEC PGM=IEBGENER
//SYSPRINT DD SYSOUT=*
//SYSIN DD DUMMY,DCB=BLKSIZE=80
//SYSUT2 DD UNIT=10D,DISP=OLD,DCB=BLKSIZE=80
//SYSUT1 DD DATA,DLM=$$,DCB=BLKSIZE=3120
ID CMSBATCH
/JOB CMSUSER 123456 KIKPPCOB
$$
// DD DSN=K.X.CMSBATCH(MAPN),DISP=SHR
// DD DSN=K.X.CMSBATCH(KGCCGET),DISP=SHR
// DD DSN=K.X.CMSBATCH(KGCCEG),DISP=SHR
// DD DATA,DLM=$$
MAPN
KBLOCK KIKPPCOB
KGCCGET
VMARC UNPACK ASYSH VMARC N = = A ( NOTRACE
KGCCEG KIKPPCOB
#define PPCOB
$$
// DD DISP=SHR,DSN=K.X.COBPP(KIKPPCOB)
// DD DISP=SHR,DSN=K.X.COBPP(KIK03COB)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(NOCODE)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(ABEND)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(ADDRESS)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(ALLOCATE)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(ASKTIME)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(ASSIGN)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(BIF)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(BUILD)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(CANCEL)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(CHANGE)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(CONNECT)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(CONVERSE)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(DELAY)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(DELETE)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(DELETEQ)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(DEQ)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(DUMP)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(ENDBR)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(ENQ)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(ENTER)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(EXTRACT)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(FORMATTI)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(FREE)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(FREEMAIN)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(GETMAIN)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(HANDLE)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(IGNORE)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(LINK)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(LOAD)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(POP)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(POST)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(PURGE)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(PUSH)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(READNEXT)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(READPREV)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(READQ)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(READ)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(RECEIVE)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(RELEASE)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(RESETBR)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(RETRIEVE)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(RETURN)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(REWRITE)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(ROUTE)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(SEND)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(SIGNOFF)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(SIGNON)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(START)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(STARTBR)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(SUSPEND)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(SYNCPOIN)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(UNLOCK)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(WAIT)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(WRITE)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(WRITEQ)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(XCTL)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(SPOOLCLO)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(SPOOLOPE)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(SPOOLREA)
// DD DISP=SHR,DSN=K.X.COBPP.PARTS(SPOOLWRI)
// DD DATA,DLM=$$
/*
/*
$$
//
