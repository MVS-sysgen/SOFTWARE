 /////////////////////////////////////////////////////////////////////
 // 'KICKS for TSO' is a product to deliver 'CICS like' functionality
 // in MVS/TSO. Its CICS functionality is delivered at the source code
 // level, not at the object code level. Applications must be
 // recompiled and the recompiled programs are not compatible with any
 // known version of 'real' CICS (the IBM program product),
 //
 // Â© Copyright 2008-2014, Michael Noel, All Rights Reserved.
 //
 // Usage of 'KICKS for TSO' is in all cases subject to license. See
 // http://www.kicksfortso.com
 // for most current information regarding licensing options..
 ////////1/////////2/////////3/////////4/////////5/////////6/////////7

void Do_ADDRESS() {
// lets you access system information maintained in storage outside your pgm
// EXEC CICS ADDRESS [ACEE(pointer-ref)] [COMMAREA(pointer-ref)]
//       [CSA(pointer-ref)] [CWA(pointer-ref)] [EIB(pointer-ref)]
//       [TCTUA(pointer-ref)] [TWA(pointer-ref)] END-EXEC.
// *** no support for 'ACEE' or 'CSA'

 char op[100], op2[100], ops[30][100], *ip;
 char err[100], saveblocks[4000];
 int  i, ii, numops=0, nodump=0;
 enum AddressAreas verb;

 // break up string my way
 // NOTICE this uses strtok instead of SPCLTOK because
 //        it goes thru the args two at at time...
 numops = 0;
 strcpy(saveblocks, cicsblks);
 ip = strtok(saveblocks, " ()");   // EXEC
 while (ip=strtok(0, " ()")) {     // KICKS, verb, ... END-EXEC
  parrensDown(ip);
  strcpy(ops[numops], ip);
  numops++;
  }

 // march thru the args
 for (i=0; i<numops; i++) {
  strcpy(op, ops[i]);
  strcpy(op2, ops[i+1]);
  if(strlen(op)==0) { continue; }
  if(MYbegstr(op,".")) { continue; }
  if(MYbegstr(op,"RESP")) { i++; continue; }
  if(MYbegstr(op,"RESP2")) { i++; continue; }
  if(MYbegstr(op,"NOHANDLE")) { continue; }
  if(MYbegstr(op,"EXEC")) { continue; }
  if(MYbegstr(op,"KICKS")) { continue; }
  if(MYbegstr(op,"ADDRESS")) { continue; }
  i++; // once initial group seen advance by 2 each step...
  if((MYbegstr(op,"END-EXEC")) || (MYbegstr(op,";"))) { continue; }
  if((MYbegstr(op2,"END-EXEC")) || (MYbegstr(op2,";"))) {
   sprintf(err, " malformed ADDRESS block! 2%s 3%s", op, op2);
   prt_error(err, 8);
   No_Code();
   return;
   }

  // find  matching.option..
  for (ii=0, verb=-1; ii<aa_max; ii++) {
   if (!strcmp(op, address_areas[ii])) { verb = ii; break; }
   }

  // handle it
  switch (verb) {
    //  case ACEE:
    //   break;
        case COMMAREA:
         break;
        case CSA:
         break;
        case CWA:
         break;
        case EIB:
         break;
        case TCTUA:
         break;
        case TWA:
         break;
        case TIOA:
         break;
       default:
         sprintf(err, " unsupported argument %s of ADDRESS", op);
         prt_error(err, 8);
         No_Code();
         return;
    }
#ifdef PPCOB
   fprintf(stdout, "           MOVE 514 TO EIBFN-2\n");
   fprintf(stdout, "           MOVE %d TO KIK-FLAGS\n", verb);
   fprintf(stdout, "           CALL 'KIKCOBGL' USING KIKEIB,\n");
   fprintf(stdout, "                 KIK-V1,\n");
   fprintf(stdout, "                 KIK-FLAGS,\n");
   fprintf(stdout, "                 %s", op2);
#endif
#ifdef PPGCC
   fprintf(stdout, "\t{ short *eibfn2 = (short*)&__KIKEIB->eibfn;\n");
   fprintf(stdout, "\t\t*eibfn2 = 514;\n");
   fprintf(stdout, "\t int *v=&KIK_V1;\n");
   fprintf(stdout, "\t int verb=%d, *VERB=&verb;\n", verb);
   fprintf(stdout, "\t kikgccgl(__KIKEIB, v, VERB, &%s);\n", op2);
#endif
 }
}
