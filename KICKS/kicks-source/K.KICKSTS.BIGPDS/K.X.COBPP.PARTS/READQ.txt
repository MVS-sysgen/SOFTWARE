 /////////////////////////////////////////////////////////////////////
 // 'KICKS for TSO' is a product to deliver 'CICS like' functionality
 // in MVS/TSO. Its CICS functionality is delivered at the source code
 // level, not at the object code level. Applications must be
 // recompiled and the recompiled programs are not compatible with any
 // known version of 'real' CICS (the IBM program product),
 //
 // Â© Copyright 2008-2014, Michael Noel, All Rights Reserved.
 //
 // Usage of 'KICKS for TSO' is in all cases subject to license. See
 // http://www.kicksfortso.com
 // for most current information regarding licensing options..
 ////////1/////////2/////////3/////////4/////////5/////////6/////////7

void Do_READQ() {
// read a record from a transient data queue
// EXEC CICS READQ TD QUEUE(name) { INTO(data-area) | SET(pointer-ref) }
//       [LENGTH(data-area)] [SYSID(name)] [NOSUSPEND] END-EXEC.
// -- or --
// read a record from a temporary storage queue
// EXEC CICS READQ TS QUEUE(name) { INTO(data-area) | SET(pointer-ref) }
//       [LENGTH(data-area)] [NUMITEMS(data-area)] [ITEM(data-value) | NEXT]
//       [SYSID(name)] END-EXEC.
// *** SYSID unsupported
// *** SET unsupported
// *** NOSUSPEND supported (required!) (SUSPEND not supported)


 char err[100], saveblocks[4000];

 char op[100], ops[30][100], *ip;
 int  i, numops=0, nosuspend=-1, next=0, tsmain=0, tsaux=8, rewrite=0;

 char queue[100]="", into[100]="";
 char length[100]="-1";
 char item[100]="", numitem[100]="";

 if (MYbegstr(blk_op2, "TD")) {

  // break up string my way
  numops = 0;
  strcpy(saveblocks, cicsblks);
  ip = SPCLTOK(saveblocks, " ");   // EXEC
  while (ip=SPCLTOK(0, " ")) {     // KICKS, verb, ... END-EXEC
   strcpy(ops[numops], ip);
   numops++;
   }

  // march thru the args
  for (i=0; i<numops; i++) {
   strcpy(op, ops[i]);
   if(strlen(op)==0) { continue; }
   if(MYbegstr(op,".")) { continue; }
   if(MYbegstr(op,"RESP")) { continue; }
   if(MYbegstr(op,"RESP2")) { continue; }
   if(MYbegstr(op,"NOHANDLE")) { continue; }
   if(MYbegstr(op,"EXEC")) { continue; }
   if(MYbegstr(op,"KICKS")) { continue; }
   if(MYbegstr(op,"READQ")) { continue; }
   if(MYbegstr(op,"TD")) { continue; }
   if(MYbegstr(op,"END-EXEC") || MYbegstr(op,";")) { continue; }
   if(MYbegstr(op,"QUEUE")) {
    ip = strtok(op, "()");   // QUEUE
    ip = strtok(0, "()");    // the name of the file
    if (ip == NULL) {
     sprintf(err,
     "malformed argument %s of READQ", op);
     prt_error(err, 8);
     No_Code();
     return;
     }
    parrensDown(ip);
    strcpy(queue, ip);
    fixXNAME(queue, 4);
    continue;
    }
   if(MYbegstr(op,"INTO")) {
    ip = strtok(op, "()");   // INTO
    ip = strtok(0, "()");    // the name of the var to get data
    if (ip == NULL) {
     sprintf(err,
     "malformed argument %s of READQ", op);
     prt_error(err, 8);
     No_Code();
     return;
     }
    parrensDown(ip);
    strcpy(into, ip);
    continue;
    }
   if(MYbegstr(op,"LENGTH")) {
    ip = strtok(op, "()");   // LENGTH
    ip = strtok(0, "()");    // the name of the var holding the length
   if((ip == NULL) || (ip[0] == '-')) {
     sprintf(err,
     "malformed argument %s of READQ", op);
     prt_error(err, 8);
     No_Code();
     return;
     }
    parrensDown(ip);
    strcpy(length, ip);
    continue;
    }
   if(MYbegstr(op,"NOSUSPEND")) { nosuspend = 1; continue; }

   sprintf(err,
   "unknown/unsupported argument %s of READQ", op);
   prt_error(err, 8);
   No_Code();
   return;
   }

  if (nosuspend != 1) {
   prt_error("NOSUSPEND missing, always required", 2);
   //No_Code();
   //return;
   nosuspend = 1;
   }

#ifdef PPCOB
  {
  char KIK$LEN[100]; strcpy(KIK$LEN, "KIK-LEN");
  fprintf(stdout, "           MOVE 2052 TO EIBFN-2\n");
  fprintf(stdout, "           MOVE %s TO KIK-FILENAME\n", queue);
  if ((length[0] != '-') &&
      (isalpha(length[0]) != 0) &&
      (strncmp(length, "LENGTH OF ", 10))) {
   strcpy(KIK$LEN, length);
   }
  else {
   COBLEN(length, "-1", into, "", "KIK-LEN");
   }
  fprintf(stdout, "           CALL 'KIKCOBGL' USING KIKEIB,\n");
  if (!strcmp(respvar, ""))
   fprintf(stdout, "                 KIK-V1,\n");
  else
   fprintf(stdout, "                 KIK-V2,\n");
  fprintf(stdout, "                 KIK-FILENAME,\n");
  fprintf(stdout, "                 %s,\n", into);
  fprintf(stdout, "                 %s", KIK$LEN);
  }
#endif
#ifdef PPGCC
  fprintf(stdout, "\t{ short *eibfn2 = (short*)&__KIKEIB->eibfn;\n");
  fprintf(stdout, "\t\t*eibfn2 = 2052;\n");
  if (!strcmp(respvar, ""))
   fprintf(stdout, "\t  int *v=&KIK_V1;\n");
  else
   fprintf(stdout, "\t  int *v=&KIK_V2;\n");
  fprintf(stdout, "\t  short KIK_LEN;\n");
  GCCLEN(length, "-1", into, "", "KIK_LEN");
  fprintf(stdout, "\t  short length=%s, *LENGTH=&length;\n",
           length);
  fprintf(stdout, "\t kikgccgl(__KIKEIB, v, %s,\n", queue);
  fprintf(stdout, "\t\t&%s, LENGTH);\n", into);
  // ***************
  // 'move after's are OK in GCC since HANDLE CONDITION not supported
  // ***************
  if ((isalpha(length[0]) != 0) &&
      (strncmp(length, "sizeof(", 7))) {
   fprintf(stdout, "\t %s = length;", length);
   }
#endif
  return;
 }

 else { // default is "TS"
 // if (MYbegstr(blk_op2, "TS")) {

 // break up string my way
  numops = 0;
  strcpy(saveblocks, cicsblks);
  ip = SPCLTOK(saveblocks, " ");   // EXEC
  while (ip=SPCLTOK(0, " ")) {     // KICKS, verb, ... END-EXEC
   strcpy(ops[numops], ip);
   numops++;
   }

  // march thru the args
  for (i=0; i<numops; i++) {
   strcpy(op, ops[i]);
   if(strlen(op)==0) { continue; }
   if(MYbegstr(op,".")) { continue; }
   if(MYbegstr(op,"RESP")) { continue; }
   if(MYbegstr(op,"RESP2")) { continue; }
   if(MYbegstr(op,"NOHANDLE")) { continue; }
   if(MYbegstr(op,"EXEC")) { continue; }
   if(MYbegstr(op,"KICKS")) { continue; }
   if(MYbegstr(op,"READQ")) { continue; }
   if(MYbegstr(op,"TS")) { continue; }
   if(MYbegstr(op,"NOSUSPEND")) { continue; }
   if(MYbegstr(op,"END-EXEC") || MYbegstr(op,";")) { continue; }
   if(MYbegstr(op,"QUEUE") || MYbegstr(op,"QNAME")) {
    ip = strtok(op, "()");   // QUEUE
    ip = strtok(0, "()");    // the name of the queue
    if (ip == NULL) {
     sprintf(err,
     "malformed argument %s of READQ", op);
     prt_error(err, 8);
     No_Code();
     return;
     }
    parrensDown(ip);
    strcpy(queue, ip);
    fixXNAME(queue, 16);
    continue;
    }
   if(MYbegstr(op,"INTO")) {
    ip = strtok(op, "()");   // INTO
    ip = strtok(0, "()");    // the name of the var to get data
    if (ip == NULL) {
     sprintf(err,
     "malformed argument %s of READQ", op);
     prt_error(err, 8);
     No_Code();
     return;
     }
    parrensDown(ip);
    strcpy(into, ip);
    continue;
    }
   if(MYbegstr(op,"LENGTH")) {
    ip = strtok(op, "()");   // LENGTH
    ip = strtok(0, "()");    // the name of the var holding the length
    if((ip == NULL) || (ip[0] == '-')) {
     sprintf(err,
     "malformed argument %s of READQ", op);
     prt_error(err, 8);
     No_Code();
     return;
     }
    parrensDown(ip);
    strcpy(length, ip);
    continue;
    }
   if(MYbegstr(op,"ITEM")) {
    ip = strtok(op, "()");   // ITEM
    ip = strtok(0, "()");    // the name of the var holding the item
    if (ip == NULL) {
     sprintf(err,
     "malformed argument %s of READQ FILE", op);
     prt_error(err, 8);
     No_Code();
     return;
     }
    parrensDown(ip);
    strcpy(item, ip);
    continue;
    }
   if(MYbegstr(op,"NUMITEMS")) {
    ip = strtok(op, "()");   // NUMITEMS
    ip = strtok(0, "()");    // the name of the var holding the numitems
    if (ip == NULL) {
     sprintf(err,
     "malformed argument %s of READQ FILE", op);
     prt_error(err, 8);
     No_Code();
     return;
     }
    parrensDown(ip);
    strcpy(numitem, ip);
    continue;
    }
   if(MYbegstr(op,"NEXT")) { next = 2; continue; }

   sprintf(err,
   "unknown/unsupported argument %s of READQ", op);
   prt_error(err, 8);
   No_Code();
   return;
   }

  if((next == 0) && (item[0] == 0)) {
   sprintf(err,
   "either NEXT or ITEM required");
   prt_error(err, 8);
   No_Code();
   return;
   }

  if((next != 0) && (item[0] != 0)) {
   sprintf(err,
   "both NEXT and ITEM specified");
   prt_error(err, 8);
   No_Code();
   return;
   }

  nosuspend=0; // does not apply to readq ts
  i = nosuspend + next + tsmain + tsaux + rewrite;

#ifdef PPCOB
  {
  char KIK$LEN[100]; strcpy(KIK$LEN, "KIK-LEN");
  char KIK$NUMITEMS[100]; strcpy(KIK$NUMITEMS, "KIK-NUMITEMS");
  fprintf(stdout, "           MOVE 2564 TO EIBFN-2\n");
  fprintf(stdout, "           MOVE %s TO KIK-QUEUENAME\n", queue);
  fprintf(stdout, "           MOVE %d TO KIK-FLAGS\n", i);
  if((length[0] != '-') &&
     (isalpha(length[0]) != 0) &&
      (strncmp(length, "LENGTH OF ", 10))) {
   strcpy(KIK$LEN, length);
   }
  else {
   COBLEN(length, "-1", into, "", "KIK-LEN");
   }
  if (item[0] == 0)
   fprintf(stdout, "           MOVE -1 TO KIK-ITEM\n"); // item
  else
   fprintf(stdout, "           MOVE %s TO KIK-ITEM\n", item);
  if ((isalpha(numitem[0]) != 0)) {
   strcpy(KIK$NUMITEMS, numitem);
   }
  fprintf(stdout, "           MOVE +0 TO %s\n", KIK$NUMITEMS);
  fprintf(stdout, "           CALL 'KIKCOBGL' USING KIKEIB,\n");
  if (!strcmp(respvar, ""))
   fprintf(stdout, "                 KIK-V1,\n");
  else
   fprintf(stdout, "                 KIK-V2,\n");
  fprintf(stdout, "                 KIK-QUEUENAME,\n");
  fprintf(stdout, "                 KIK-FLAGS,\n");
  fprintf(stdout, "                 %s,\n", into);
  fprintf(stdout, "                 %s, KIK-ITEM, %s", KIK$LEN, KIK$NUMITEMS);
  }
#endif
#ifdef PPGCC
  fprintf(stdout, "\t{ short *eibfn2 = (short*)&__KIKEIB->eibfn;\n");
  fprintf(stdout, "\t\t*eibfn2 = 2564;\n");
  if (!strcmp(respvar, ""))
   fprintf(stdout, "\t  int *v=&KIK_V1;\n");
  else
   fprintf(stdout, "\t  int *v=&KIK_V2;\n");
  fprintf(stdout, "\t  short KIK_LEN;\n");
  GCCLEN(length, "-1", into, "", "KIK_LEN");
  fprintf(stdout, "\t  short *LENGTH=&KIK_LEN;\n");
  if (item[0] == 0)
   fprintf(stdout, "\t  short item = -1,"); // item
  else
   fprintf(stdout, "\t  short item =  %s,", item);
  fprintf(stdout,       " *KIK_ITEM = &item;\n");
  fprintf(stdout, "\t  short numitems = 0,");  // numitem
  fprintf(stdout,      " *KIK_NUMITEMS = &numitems;\n");
  fprintf(stdout, "\t  int flags=%d, *FLAGS=&flags;\n", i);

  fprintf(stdout, "\t kikgccgl(__KIKEIB, v, %s, FLAGS,\n", queue);
  fprintf(stdout, "\t\t&%s, LENGTH,\n", into);
  fprintf(stdout, "\t\tKIK_ITEM, KIK_NUMITEMS);\n");
  // ***************
  // 'move after's are OK in GCC since HANDLE CONDITION not supported
  // ***************
  if((isalpha(length[0]) != 0) &&
             (strncmp(length, "sizeof(", 7))) {
   fprintf(stdout, "\t  %s = KIK_LEN;\n", length);
   }
  if (isalpha(numitem[0]) != 0) {
   fprintf(stdout, "\t  %s = KIK_ITEM;\n", numitem);
   }

#endif
  return;
 }

sprintf(err,
" %s %s not yet implemented!", blk_op1, blk_op2);
prt_error(err, 8);
No_Code();
}
