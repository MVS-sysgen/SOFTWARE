 /////////////////////////////////////////////////////////////////////
 // 'KICKS for TSO' is a product to deliver 'CICS like' functionality
 // in MVS/TSO. Its CICS functionality is delivered at the source code
 // level, not at the object code level. Applications must be
 // recompiled and the recompiled programs are not compatible with any
 // known version of 'real' CICS (the IBM program product),
 //
 // Â© Copyright 2008-2014, Michael Noel, All Rights Reserved.
 //
 // Usage of 'KICKS for TSO' is in all cases subject to license. See
 // http://www.kicksfortso.com
 // for most current information regarding licensing options..
 ////////1/////////2/////////3/////////4/////////5/////////6/////////7

void Do_RECEIVE() {
// receive data sent by a remote process
// EXEC CICS RECEIVE [CONVID(name) | SESSION(name)] { INTO(data-area) |
//       SET(pointer-ref) }
//       { LENGTH(data-area) | FLENGTH(data-area) }
//       [MAXLENGTH(data-value) | MAXFLENGTH(data-value)] [NOTRUNCATE]
//       [STATE(data-area)] END-EXEC.
// -- or --
// retrieve input data from a terminal
// EXEC CICS RECEIVE { INTO(data-area) | SET(pointer-ref) }
//       { LENGTH(data-area) | FLENGTH(data-area) } [MAXLENGTH(data-value) |
//       MAXFLENGTH(data-value)]
//       [NOTRUNCATE] [ASIS] [BUFFER] END-EXEC.
// -- or --
// receive data from a terminal via BMS
// EXEC CICS RECEIVE MAP(name) [MAPSET(name)] [INTO(data-area) |
//       SET(pointer-ref)] [ASIS] END-EXEC.
// *** RECEIVE CONVID unsupported

char err[100], saveblocks[4000];

if (MYbegstr(blk_op2, "MAP")) {

// EXEC CICS RECEIVE MAP(name) [MAPSET(name)] [INTO(data-area) |
//       SET(pointer-ref)] [ASIS] END-EXEC.

// *** SET unsupported

 char op[100], ops[30][100], *ip;
 int  i, numops=0;

 char map[100], mapset[100], into[100]="";
 int asis=0, sopt=0;

 // break up string my way
 numops = 0;
 strcpy(saveblocks, cicsblks);
 ip = SPCLTOK(saveblocks, " ");   // EXEC
 while (ip=SPCLTOK(0, " ")) {     // KICKS, verb, ... END-EXEC
  strcpy(ops[numops], ip);
  numops++;
  }

 // march thru the args
 for (i=0; i<numops; i++) {
  strcpy(op, ops[i]);
  if(strlen(op)==0) { continue; }
  if(MYbegstr(op,".")) { continue; }
  if(MYbegstr(op,"RESP")) { continue; }
  if(MYbegstr(op,"RESP2")) { continue; }
  if(MYbegstr(op,"NOHANDLE")) { continue; }
  if(MYbegstr(op,"EXEC")) { continue; }
  if(MYbegstr(op,"KICKS")) { continue; }
  if(MYbegstr(op,"RECEIVE")) { continue; }
  if(MYbegstr(op,"END-EXEC") || MYbegstr(op,";")) { continue; }
  if(MYbegstr(op,"MAPSET")) {
   ip = strtok(op, "()");   // MAPSET
   ip = strtok(0, "()");    // the name of the mapset
   if (ip == NULL) {
    sprintf(err,
    "malformed argument %s of RECEIVE MAP", op);
    prt_error(err, 8);
    No_Code();
    return;
    }
   parrensDown(ip);
   strcpy(mapset, ip);
   fixXNAME(mapset, 8);
   continue;
   }
  if(MYbegstr(op,"MAP")) {
   ip = strtok(op, "()");   // MAP
   ip = strtok(0, "()");    // the name of the map
   if (ip == NULL) {
    sprintf(err,
    "malformed argument %s of RECEIVE MAP", op);
    prt_error(err, 8);
    No_Code();
    return;
    }
   parrensDown(ip);
   strcpy(map, ip);
   if(strlen(into)==0) {
    strncpy(into, ip+1, strlen(ip)-2); // drop the 'tic' marks...
#ifdef PPCOB
    strcat(into, "I");
#endif
#ifdef PPGCC
    strcat(into, ".");
    strncat(into, ip+1, strlen(ip)-2);
    if ((into[0] >= 'a') && (into[0] <= 'z'))
     strcat(into, "i");
    else
     strcat(into, "I");
#endif
    }
   fixXNAME(map, 8);
   continue;
   }
  if(MYbegstr(op,"INTO")) {
   ip = strtok(op, "()");   // INTO
   ip = strtok(0, "()");    // the name of the var to get data
   if (ip == NULL) {
    sprintf(err,
    "malformed argument %s of RECEIVE MAP", op);
    prt_error(err, 8);
    No_Code();
    return;
    }
   parrensDown(ip);
   strcpy(into, ip);
   continue;
   }
  if(MYbegstr(op,"ASIS")) { asis = 1; continue; }
  sprintf(err,
  "unknown/unsupported argument %s of RECEIVE MAP", op);
  prt_error(err, 8);
  No_Code();
  return;
  }

 sopt = 0; if (asis > 0) { sopt = 2; }
#ifdef PPCOB
 fprintf(stdout, "           MOVE 6146 TO EIBFN-2\n");
 fprintf(stdout, "           MOVE %s TO KIK-MAPNAME\n", map);
 fprintf(stdout, "           MOVE %s TO KIK-MAPSETNAME\n",mapset);
 fprintf(stdout, "           MOVE %d TO KIK-FLAGS\n", sopt);
 fprintf(stdout, "           CALL 'KIKCOBGL' USING KIKEIB,\n");
 if (!strcmp(respvar, ""))
  fprintf(stdout, "                 KIK-V1,\n");
 else
  fprintf(stdout, "                 KIK-V2,\n");
 fprintf(stdout, "                 KIK-MAPSETNAME, KIK-MAPNAME, %s,\n",into);
 fprintf(stdout, "                 KIK-FLAGS, KIK-FLAGS");
#endif
#ifdef PPGCC
 fprintf(stdout, "\t{ short *eibfn2 = (short*)&__KIKEIB->eibfn;\n");
 fprintf(stdout, "\t\t*eibfn2 = 6146;\n");
 if (!strcmp(respvar, ""))
  fprintf(stdout, "\t  int *v=&KIK_V1;\n");
 else
  fprintf(stdout, "\t  int *v=&KIK_V2;\n");
 fprintf(stdout, "\t int sopt=%d, *SOPT=&sopt;\n", sopt);
 fprintf(stdout, "\t kikgccgl(__KIKEIB, v, %s, %s,\n",
         UP(mapset), UP(map));
 fprintf(stdout, "\t\t&%s, SOPT, SOPT);\n", into);
#endif
 return;
 }

if((MYbegstr(blk_op2, "INTO")) ||
   (MYbegstr(blk_op2, "CHECK")) ||
   (MYbegstr(blk_op2, "RESP")) ||
   (MYbegstr(blk_op2, "RESP2")) ||
   (MYbegstr(blk_op2, "NOHANDLE")) ||
   (MYbegstr(blk_op2, "END-EXEC")) ||
   (MYbegstr(blk_op2, ";"))) { // RECEIVE WO/MAP

// EXEC CICS RECEIVE { INTO(data-area) | SET(pointer-ref) }
//       { LENGTH(data-area) | FLENGTH(data-area) } [MAXLENGTH(data-value) |
//       MAXFLENGTH(data-value)]
//       [NOTRUNCATE] [ASIS] [BUFFER] END-EXEC.

// *** LENGTH (AND MAXLENGTH) NOT IMPLEMENTED TO FORCE USE OF FLENGTH
// *** NOTRUNCHATE NOT IMPLEMENTED
// +++ "If a RECEIVE is issued purely to detect an AID, you can omit both"
// +++ "the INTO and SET options" -- and obviously LENGTH, MAXLENGTH, etc...

 char op[100], ops[30][100], *ip;
 int  i, numops=0;

 char into[100]="", fla[100]="", mfla[100]="";
 int asis=0, buffer=0, check=0, notruncate=0, sopt=0, len=0;

 // break up string my way
 numops = 0;
 strcpy(saveblocks, cicsblks);
 ip = SPCLTOK(saveblocks, " ");   // EXEC
 while (ip=SPCLTOK(0, " ")) {     // KICKS, verb, ... END-EXEC
  strcpy(ops[numops], ip);
  numops++;
  }

 // march thru the args
 for (i=0; i<numops; i++) {
  strcpy(op, ops[i]);
  if(strlen(op)==0) { continue; }
  if(MYbegstr(op,".")) { continue; }
  if(MYbegstr(op,"RESP")) { continue; }
  if(MYbegstr(op,"RESP2")) { continue; }
  if(MYbegstr(op,"NOHANDLE")) { continue; }
  if(MYbegstr(op,"EXEC")) { continue; }
  if(MYbegstr(op,"KICKS")) { continue; }
  if(MYbegstr(op,"RECEIVE")) { continue; }
  if(MYbegstr(op,"END-EXEC") || MYbegstr(op,";")) { continue; }
  if(MYbegstr(op,"INTO")) {
   ip = strtok(op, "()");   // INTO
   ip = strtok(0, "()");    // the name of the var to get data
   if (ip == NULL) {
    sprintf(err,
    "malformed argument %s of RECEIVE", op);
    prt_error(err, 8);
    No_Code();
    return;
    }
   parrensDown(ip);
   strcpy(into, ip);
   continue;
   }

  if(MYbegstr(op,"LENGTH") || MYbegstr(op,"FLENGTH")) {
   ip = strtok(op, "()");   // FLENGTH
   ip = strtok(0, "()");
   if (ip == NULL) {
    sprintf(err,
    "malformed argument %s of RECEIVE", op);
    prt_error(err, 8);
    No_Code();
    return;
    }
   parrensDown(ip);
   strcpy(fla, ip);
   if(MYbegstr(op,"LENGTH")) len = 128;
   continue;
   }
  if(MYbegstr(op,"MAXLENGTH") || MYbegstr(op,"MAXFLENGTH")) {
   ip = strtok(op, "()");   // MAXFLENGTH
   ip = strtok(0, "()");
   if (ip == NULL) {
    sprintf(err,
    "malformed argument %s of RECEIVE", op);
    prt_error(err, 8);
    No_Code();
    return;
    }
   parrensDown(ip);
   strcpy(mfla, ip);
   continue;
   }

  if(MYbegstr(op,"ASIS")) { asis = 1; continue; }
  if(MYbegstr(op,"BUFFER")) { buffer = 1; continue; }
  if(MYbegstr(op,"CHECK")) { check = 1; continue; }

  sprintf(err,
  "unknown/unsupported argument %s of RECEIVE", op);
  prt_error(err, 8);
  No_Code();
  return;
  }

 if (asis > 0) { sopt += 2; }
 if (buffer > 0) { sopt += 4; }
 if (fla[0]  == '\0') {
  sopt += 16;
  strcpy(fla, kiknull);
  }
 if (mfla[0] == '\0') {
  sopt += 32;
  strcpy(mfla, kiknull);
  }
 sopt += len; // post using LENGTH intead of FLENGTH (if true)
 if (into[0] == '\0') {
  strcpy(into, kiknull);
  sopt += 64;
  }
 if (check > 0) { sopt += 256; }

#ifdef PPCOB
 fprintf(stdout, "           MOVE 1026 TO EIBFN-2\n");
 fprintf(stdout, "           MOVE %d TO KIK-FLAGS\n", sopt);
 fprintf(stdout, "           CALL 'KIKCOBGL' USING KIKEIB,\n");
 if (!strcmp(respvar, ""))
  fprintf(stdout, "                 KIK-V1,\n");
 else
  fprintf(stdout, "                 KIK-V2,\n");
 fprintf(stdout, "                 %s,\n",into);
 fprintf(stdout, "                 %s,\n",fla);
 fprintf(stdout, "                 %s,\n",mfla);
 fprintf(stdout, "                 KIK-NULL, KIK-FLAGS");
#endif
#ifdef PPGCC
 fprintf(stdout, "\t{ short *eibfn2 = (short*)&__KIKEIB->eibfn;\n");
 fprintf(stdout, "\t\t*eibfn2 = 1026;\n");
 if (!strcmp(respvar, ""))
  fprintf(stdout, "\t  int *v=&KIK_V1;\n");
 else
  fprintf(stdout, "\t  int *v=&KIK_V2;\n");
 fprintf(stdout, "\t int sopt=%d, *SOPT=&sopt;\n", sopt);
 fprintf(stdout, "\t kikgccgl(__KIKEIB, v, &%s, &%s, &%s,\n",
         into, fla, mfla);
 fprintf(stdout, "\t\tSOPT, SOPT);\n");
#endif
 return;
 }

sprintf(err,
" %s %s not yet implemented!", blk_op1, blk_op2);
prt_error(err, 8);
No_Code();
}
