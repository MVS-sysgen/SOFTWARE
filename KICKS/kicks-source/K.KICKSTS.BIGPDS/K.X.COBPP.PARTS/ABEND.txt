 /////////////////////////////////////////////////////////////////////
 // 'KICKS for TSO' is a product to deliver 'CICS like' functionality
 // in MVS/TSO. Its CICS functionality is delivered at the source code
 // level, not at the object code level. Applications must be
 // recompiled and the recompiled programs are not compatible with any
 // known version of 'real' CICS (the IBM program product),
 //
 // Â© Copyright 2008-2014, Michael Noel, All Rights Reserved.
 //
 // Usage of 'KICKS for TSO' is in all cases subject to license. See
 // http://www.kicksfortso.com
 // for most current information regarding licensing options..
 ////////1/////////2/////////3/////////4/////////5/////////6/////////7

void Do_ABEND() {
// force the current task to terminate abnormally
// EXEC CICS ABEND [ABCODE(name)] [CANCEL] [NODUMP] END-EXEC.
// *** no support for 'CANCEL'

 char op[100], abcode[10]="", ops[10][100], *ip;
 char err[100], saveblocks[4000];
 int  i, numops=0, nodump=0;

 // break up string my way
 numops = 0;
 strcpy(saveblocks, cicsblks);
 ip = SPCLTOK(saveblocks, " ");   // EXEC
 while (ip=SPCLTOK(0, " ")) {     // KICKS, verb, ... END-EXEC
  strcpy(ops[numops], ip);
  numops++;
  }

 // march thru the args
 for (i=0; i<numops; i++) {
  strcpy(op, ops[i]);
  if(strlen(op)==0) { continue; }
  if(MYbegstr(op,".")) { continue; }
  if(MYbegstr(op,"RESP")) { continue; }
  if(MYbegstr(op,"RESP2")) { continue; }
  if(MYbegstr(op,"NOHANDLE")) { continue; }
  if(MYbegstr(op,"EXEC")) { continue; }
  if(MYbegstr(op,"KICKS")) { continue; }
  if(MYbegstr(op,"ABEND")) { continue; }
  if(MYbegstr(op,";")) { continue; }
  if(MYbegstr(op,"END-EXEC")) { continue; }
  if(MYbegstr(op,"CANCEL")) {
   sprintf(err,
     " unsupported argument %s of %s is ignored", op, blk_op1);
   prt_error(err, 2);
   continue;
   }
  if(MYbegstr(op,"NODUMP")) { nodump=1; continue; }
  if(MYbegstr(op,"ABCODE")) {
   ip = strtok(op, "()");   // ABCODE
   ip = strtok(0, "()");    // the 'code'
   if (ip == NULL) {
    sprintf(err,
    "malformed argument %s of ABEND", op);
    prt_error(err, 8);
    No_Code();
    return;
    }
   parrensDown(ip);
   strcpy(abcode, ip);
   fixXNAME(abcode, 4);
   continue;
   }
  sprintf(err,
    " unknown argument %s of %s", op, blk_op1);
  prt_error(err, 8);
  No_Code();
  return;
  }

#ifdef PPCOB
 if (!strcmp(abcode,"")) {
  nodump = 1;
  strcpy(abcode, "SPACES");
  }

 fprintf(stdout, "           MOVE 3596 TO EIBFN-2\n");
 fprintf(stdout, "           MOVE %s TO KIK-ABND\n", abcode);
 fprintf(stdout, "           MOVE %d TO KIK-FLAGS\n", nodump);
 fprintf(stdout, "           CALL 'KIKCOBGL' USING KIKEIB,\n");
 fprintf(stdout, "                 KIK-V1,\n");
 fprintf(stdout, "                 KIK-ABND,\n");
 fprintf(stdout, "                 KIK-FLAGS");
#endif
#ifdef PPGCC
 if (!strcmp(abcode,"")) {
  nodump = 1;
  strcpy(abcode, "&KIK_NULL");
  }

 fprintf(stdout, "\t{ short *eibfn2 = (short*)&__KIKEIB->eibfn;\n");
 fprintf(stdout, "\t\t*eibfn2 = 3596;\n");
 fprintf(stdout, "\t  int *v=&KIK_V1;\n");
 fprintf(stdout, "\t  int nodump=%d, *NODUMP=&nodump;\n", nodump);
 fprintf(stdout, "\t kikgccgl(__KIKEIB, v, %s, NODUMP);\n", abcode);
#endif
}
