 /////////////////////////////////////////////////////////////////////
 // 'KICKS for TSO' is a product to deliver 'CICS like' functionality
 // in MVS/TSO. Its CICS functionality is delivered at the source code
 // level, not at the object code level. Applications must be
 // recompiled and the recompiled programs are not compatible with any
 // known version of 'real' CICS (the IBM program product),
 //
 // Â© Copyright 2008-2014, Michael Noel, All Rights Reserved.
 //
 // Usage of 'KICKS for TSO' is in all cases subject to license. See
 // http://www.kicksfortso.com
 // for most current information regarding licensing options..
 ////////1/////////2/////////3/////////4/////////5/////////6/////////7

void Do_XCTL() {
// terminate the current program and execute the one specified
// EXEC CICS XCTL PROGRAM(name) [COMMAREA(data-area) [LENGTH(data-value)]
//       [INPUTMSG(data-area) [INPUTMSGLEN(data-value)]] END-EXEC.
// *** INPUTMSG, INPUTMSGLEN not supported

 char op[100], ops[10][100], *ip;
 char err[100], saveblocks[4000];
 int  i, numops=0;
 char ca[80]="", cal[80]="-1";
 char pgm[80]="";

 strcpy(ca, kiknull);

 // break up string my way
 numops = 0;
 strcpy(saveblocks, cicsblks);
 ip = SPCLTOK(saveblocks, " ");   // EXEC
 while (ip=SPCLTOK(0, " ")) {     // KICKS, verb, ... END-EXEC
  strcpy(ops[numops], ip);
  numops++;
  }

 // march thru the args
 for (i=0; i<numops; i++) {
  strcpy(op, ops[i]);
  if(strlen(op)==0) { continue; }
  if(MYbegstr(op,".")) { continue; }
  if(MYbegstr(op,"RESP")) { continue; }
  if(MYbegstr(op,"RESP2")) { continue; }
  if(MYbegstr(op,"NOHANDLE")) { continue; }
  if(MYbegstr(op,"EXEC")) { continue; }
  if(MYbegstr(op,"KICKS")) { continue; }
  if(MYbegstr(op,"XCTL")) { continue; }
  if(MYbegstr(op,"END-EXEC") || MYbegstr(op,";")) { continue; }
  if(MYbegstr(op,"PROGRAM")) {
   ip = strtok(op, "()");   // PROGRAM
   ip = strtok(0, "()");    // the name of the program
   if (ip == NULL) {
    sprintf(err,
    "malformed argument %s of XCTL", op);
    prt_error(err, 8);
    No_Code();
    return;
    }
   parrensDown(ip);
   strcpy(pgm, ip);
   fixXNAME(pgm, 8);
   continue;
   }
  if(MYbegstr(op,"COMMAREA")) {
   ip = strtok(op, "()");   // COMMAREA
   ip = strtok(0, "()");    // the name of the comm-area
   if (ip == NULL) {
    sprintf(err,
    "malformed argument %s of XCTL", op);
    prt_error(err, 8);
    No_Code();
    return;
    }
   parrensDown(ip);
   strcpy(ca, ip);
   continue;
   }
  if(MYbegstr(op,"LENGTH")) {
   ip = strtok(op, "()");   // LENGTH
   ip = strtok(0, "()");    // the length of the comm-cara
   parrensDown(ip);
   parrensDown(ip);
   strcpy(cal, ip);
   continue;
   }

  sprintf(err,
    "unknown/unsupported argument %s of %s", op, blk_op1);
  prt_error(err, 4);
  No_Code();
  return;
  }

#ifdef PPCOB
 fprintf(stdout, "           MOVE 3588 TO EIBFN-2\n");
 fprintf(stdout, "           MOVE %s TO KIK-PROGRAM\n", pgm);
 COBLEN(cal, "-1", ca, kiknull, "KIK-FLEN");
 fprintf(stdout, "           CALL 'KIKCOBGL' USING KIKEIB,\n");
 if (!strcmp(respvar, ""))
  fprintf(stdout, "                 KIK-V1,\n");
 else
  fprintf(stdout, "                 KIK-V2,\n");
 if (strlen(ca) > 0) {
  fprintf(stdout,
    "                 KIK-PROGRAM, %s, KIK-FLEN", ca);
  }
 else {
  fprintf(stdout,
    "                 KIK-PROGRAM, KIK-NULL, KIK-NULL");
  }
#endif
#ifdef PPGCC
 fprintf(stdout, "\t{ short *eibfn2 = (short*)&__KIKEIB->eibfn;\n");
 fprintf(stdout, "\t\t*eibfn2 = 3588;\n");
 if (!strcmp(respvar, ""))
  fprintf(stdout, "\t  int *v=&KIK_V1;\n");
 else
  fprintf(stdout, "\t  int *v=&KIK_V2;\n");

 fprintf(stdout, "\t  int KIK_FLEN;\n");
 GCCLEN(cal, "-1", ca, kiknull, "KIK_FLEN");
 fprintf(stdout, "\t  int cal=%s, *CAL=&cal;\n", cal);
 fprintf(stdout, "\t kikgccgl(__KIKEIB, v, %s, &%s, CAL);\n", pgm, ca);
#endif
}
