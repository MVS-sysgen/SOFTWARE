 /////////////////////////////////////////////////////////////////////
 // 'KICKS for TSO' is a product to deliver 'CICS like' functionality
 // in MVS/TSO. Its CICS functionality is delivered at the source code
 // level, not at the object code level. Applications must be
 // recompiled and the recompiled programs are not compatible with any
 // known version of 'real' CICS (the IBM program product),
 //
 // Â© Copyright 2008-2014, Michael Noel, All Rights Reserved.
 //
 // Usage of 'KICKS for TSO' is in all cases subject to license. See
 // http://www.kicksfortso.com
 // for most current information regarding licensing options..
 ////////1/////////2/////////3/////////4/////////5/////////6/////////7

void Do_DELETEQ() {
// remove a (intrapartition) transient data queue
// EXEC CICS DELETEQ TD QUEUE(name) [SYSID(name)] END-EXEC.
// -- or --
// remove a temporary storage queue
// EXEC CICS DELETEQ TS QUEUE(name) [SYSID(name)] END-EXEC.

// *** SYSID unsupported

 char err[100], saveblocks[4000];

 char op[100], ops[30][100], *ip;
 int  i, numops=0;

 char queue[100]="";

 if (MYbegstr(blk_op2, "TD")) {

  // break up string my way
  numops = 0;
  strcpy(saveblocks, cicsblks);
  ip = SPCLTOK(saveblocks, " ");   // EXEC
  while (ip=SPCLTOK(0, " ")) {     // KICKS, verb, ... END-EXEC
   strcpy(ops[numops], ip);
   numops++;
   }

  // march thru the args
  for (i=0; i<numops; i++) {
   strcpy(op, ops[i]);
   if(strlen(op)==0) { continue; }
   if(MYbegstr(op,".")) { continue; }
   if(MYbegstr(op,"RESP")) { continue; }
   if(MYbegstr(op,"RESP2")) { continue; }
   if(MYbegstr(op,"NOHANDLE")) { continue; }
   if(MYbegstr(op,"EXEC")) { continue; }
   if(MYbegstr(op,"KICKS")) { continue; }
   if(MYbegstr(op,"DELETEQ")) { continue; }
   if(MYbegstr(op,"TD")) { continue; }
   if(MYbegstr(op,"END-EXEC") || MYbegstr(op,";")) { continue; }
   if(MYbegstr(op,"QUEUE") || MYbegstr(op,"QNAME")) {
    ip = strtok(op, "()");   // QUEUE
    ip = strtok(0, "()");    // the name of the file
    if (ip == NULL) {
     sprintf(err,
     "malformed argument %s of DELETEQ", op);
     prt_error(err, 8);
     No_Code();
     return;
     }
    parrensDown(ip);
    strcpy(queue, ip);
    fixXNAME(queue, 4);
    continue;
    }

   sprintf(err,
   "unknown/unsupported argument %s of DELETEQ", op);
   prt_error(err, 8);
   No_Code();
   return;
   }

#ifdef PPCOB
  fprintf(stdout, "           MOVE 2054 TO EIBFN-2\n");
  fprintf(stdout, "           MOVE %s TO KIK-FILENAME\n", queue);
  fprintf(stdout, "           CALL 'KIKCOBGL' USING KIKEIB,\n");
  if (!strcmp(respvar, ""))
   fprintf(stdout, "                 KIK-V1,\n");
  else
   fprintf(stdout, "                 KIK-V2,\n");
  fprintf(stdout, "                 KIK-FILENAME");
#endif
#ifdef PPGCC
  fprintf(stdout, "\t{ short *eibfn2 = (short*)&__KIKEIB->eibfn;\n");
  fprintf(stdout, "\t\t*eibfn2 = 2054;\n");
  if (!strcmp(respvar, ""))
   fprintf(stdout, "\t  int *v=&KIK_V1;\n");
  else
   fprintf(stdout, "\t  int *v=&KIK_V2;\n");
  fprintf(stdout, "\t kikgccgl(__KIKEIB, v, %s);\n", queue);
#endif
  return;
 }

 else { // default is "TS"
 // if (MYbegstr(blk_op2, "TS")) {

  // break up string my way
  numops = 0;
  strcpy(saveblocks, cicsblks);
  ip = SPCLTOK(saveblocks, " ");   // EXEC
  while (ip=SPCLTOK(0, " ")) {     // KICKS, verb, ... END-EXEC
   strcpy(ops[numops], ip);
   numops++;
   }

  // march thru the args
  for (i=0; i<numops; i++) {
   strcpy(op, ops[i]);
   if(strlen(op)==0) { continue; }
   if(MYbegstr(op,".")) { continue; }
   if(MYbegstr(op,"RESP")) { continue; }
   if(MYbegstr(op,"RESP2")) { continue; }
   if(MYbegstr(op,"NOHANDLE")) { continue; }
   if(MYbegstr(op,"EXEC")) { continue; }
   if(MYbegstr(op,"KICKS")) { continue; }
   if(MYbegstr(op,"DELETEQ")) { continue; }
   if(MYbegstr(op,"TS")) { continue; }
   if(MYbegstr(op,"END-EXEC") || MYbegstr(op,";")) { continue; }
   if(MYbegstr(op,"QUEUE") || MYbegstr(op,"QNAME")) {
    ip = strtok(op, "()");   // QUEUE
    ip = strtok(0, "()");    // the name of the file
    if (ip == NULL) {
     sprintf(err,
     "malformed argument %s of DELETEQ", op);
     prt_error(err, 8);
     No_Code();
     return;
     }
    parrensDown(ip);
    strcpy(queue, ip);
    fixXNAME(queue, 16);
    continue;
    }

   sprintf(err,
   "unknown/unsupported argument %s of DELETEQ", op);
   prt_error(err, 8);
   No_Code();
   return;
   }

#ifdef PPCOB
  fprintf(stdout, "           MOVE 2566 TO EIBFN-2\n");
  fprintf(stdout, "           MOVE %s TO KIK-QUEUENAME\n", queue);
  fprintf(stdout, "           CALL 'KIKCOBGL' USING KIKEIB,\n");
  if (!strcmp(respvar, ""))
   fprintf(stdout, "                 KIK-V1,\n");
  else
   fprintf(stdout, "                 KIK-V2,\n");
  fprintf(stdout, "                 KIK-QUEUENAME");
#endif
#ifdef PPGCC
  fprintf(stdout, "\t{ short *eibfn2 = (short*)&__KIKEIB->eibfn;\n");
  fprintf(stdout, "\t\t*eibfn2 = 2566;\n");
  if (!strcmp(respvar, ""))
   fprintf(stdout, "\t  int *v=&KIK_V1;\n");
  else
   fprintf(stdout, "\t  int *v=&KIK_V2;\n");
  fprintf(stdout, "\t kikgccgl(__KIKEIB, v, %s);\n", queue);
#endif
  return;
 }

sprintf(err,
" %s %s not yet implemented!", blk_op1, blk_op2);
prt_error(err, 8);
No_Code();
}
