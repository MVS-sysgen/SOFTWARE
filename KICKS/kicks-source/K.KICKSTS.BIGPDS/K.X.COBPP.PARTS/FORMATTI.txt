 /////////////////////////////////////////////////////////////////////
 // 'KICKS for TSO' is a product to deliver 'CICS like' functionality
 // in MVS/TSO. Its CICS functionality is delivered at the source code
 // level, not at the object code level. Applications must be
 // recompiled and the recompiled programs are not compatible with any
 // known version of 'real' CICS (the IBM program product),
 //
 // Â© Copyright 2008-2014, Michael Noel, All Rights Reserved.
 //
 // Usage of 'KICKS for TSO' is in all cases subject to license. See
 // http://www.kicksfortso.com
 // for most current information regarding licensing options..
 ////////1/////////2/////////3/////////4/////////5/////////6/////////7

int CHKFORMATTIMEFLAG(int flags) {
// flag test sub for following Do_FORMATTIME...
 char err[100];
 if ((flags & 31) > 0) {
  sprintf(err, "> 1 format at a time in FORMATTIME");
  prt_error(err, 8);
  No_Code();
  return true;
  }
 return false;
}

void Do_FORMATTIME() {
// convert time to required format
// EXEC CICS FORMATTIME ABSTIME(data-value) [YYDDD(data-area)]
//       [YYMMDD(data-area)]
//       [YYDDMM(data-area)] [DDMMYY(data-area)] [MMDDYY(data-area)]
//       [DATE(data-area) [DATEFORM(data-area)]] [DATESEP[(data-value)]]
//       [DAYCOUNT(data-area)] [DAYOFWEEK(data-area)] [DAYOFMONTH(data-area)]
//       [MONTHOFYEAR(data-area)] [YEAR(data-area)] [TIME(data-area)
//       [TIMESEP[(data-value)]]] END-EXEC.
// *** DATE, DATEFORM, FULLDATE, DATESTRING, STRINGFORMAT not supported
// *** DATESEP, TIMESEP wo/operands not supported
// *** YYYY versions as well as YY version **ARE** supported

 char op[100], op2[100], ops[30][100], *ip;
 char err[100], saveblocks[4000];
 int  i, numops=0, flags=0;
 char abstime[100]="0", into[100]="";
 char datesep[100]="", timesep[100]="";

 // break up string my way
 // NOTICE this uses strtok instead of SPCLTOK because
 //        it goes thru the args two at at time...
 strcpy(op2, kiknull);
 numops = 0;
 strcpy(saveblocks, cicsblks);
 ip = strtok(saveblocks, " ()");   // EXEC
 while (ip=strtok(0, " ()")) {     // KICKS, verb, ... END-EXEC
  parrensDown(ip);
  strcpy(ops[numops], ip);
  numops++;
  }
 for (i=0; i<numops; i++) {
  strcpy(op, ops[i]);
  if(strlen(op)==0) { continue; }
  if(MYbegstr(op,".")) { continue; }
  if(MYbegstr(op,"RESP")) { i++; continue; }
  if(MYbegstr(op,"RESP2")) { i++; continue; }
  if(MYbegstr(op,"NOHANDLE")) { continue; }
  if(MYbegstr(op,"EXEC")) { continue; }
  if(MYbegstr(op,"KICKS")) { continue; }
  if(MYbegstr(op,"FORMATTIME")) { continue; }
  if(MYbegstr(op,"END-EXEC") || MYbegstr(op,";")) { continue; }
  if(MYbegstr(op,"ABSTIME")) {
   strcpy(abstime, ops[i+1]); i++;
   continue;
   }
  if(MYbegstr(op,"DATESEP")) {
   flags |= 32;
   strcpy(datesep, ops[i+1]); i++;
   continue;
   }
  if(MYbegstr(op,"TIMESEP")) {
   flags |= 64;
   strcpy(timesep, ops[i+1]); i++;
   continue;
   }
  if(MYbegstr(op,"YYYYDDD")) {
   if (CHKFORMATTIMEFLAG(flags)) return;
   flags |= 2;
   strcpy(into, ops[i+1]); i++;
   continue;
   }
  if(MYbegstr(op,"YYDDD")) {
   if (CHKFORMATTIMEFLAG(flags)) return;
   flags |= 1;
   strcpy(into, ops[i+1]); i++;
   continue;
   }
  if(MYbegstr(op,"YYYYMMDD")) {
   if (CHKFORMATTIMEFLAG(flags)) return;
   flags |= 4;
   strcpy(into, ops[i+1]); i++;
   continue;
   }
  if(MYbegstr(op,"YYMMDD")) {
   if (CHKFORMATTIMEFLAG(flags)) return;
   flags |= 3;
   strcpy(into, ops[i+1]); i++;
   continue;
   }
  if(MYbegstr(op,"YYYYDDMM")) {
   if (CHKFORMATTIMEFLAG(flags)) return;
   flags |= 6;
   strcpy(into, ops[i+1]); i++;
   continue;
   }
  if(MYbegstr(op,"YYDDMM")) {
   if (CHKFORMATTIMEFLAG(flags)) return;
   flags |= 5;
   strcpy(into, ops[i+1]); i++;
   continue;
   }
  if(MYbegstr(op,"DDMMYYYY")) {
   if (CHKFORMATTIMEFLAG(flags)) return;
   flags |= 8;
   strcpy(into, ops[i+1]); i++;
   continue;
   }
  if(MYbegstr(op,"DDMMYY")) {
   if (CHKFORMATTIMEFLAG(flags)) return;
   flags |= 7;
   strcpy(into, ops[i+1]); i++;
   continue;
   }
  if(MYbegstr(op,"MMDDYYYY")) {
   if (CHKFORMATTIMEFLAG(flags)) return;
   flags |= 10;
   strcpy(into, ops[i+1]); i++;
   continue;
   }
  if(MYbegstr(op,"MMDDYY")) {
   if (CHKFORMATTIMEFLAG(flags)) return;
   flags |= 9;
   strcpy(into, ops[i+1]); i++;
   continue;
   }
  if(MYbegstr(op,"DAYCOUNT")) {
   if (CHKFORMATTIMEFLAG(flags)) return;
   flags |= 11;
   strcpy(into, ops[i+1]); i++;
   continue;
   }
  if(MYbegstr(op,"DAYOFWEEK")) {
   if (CHKFORMATTIMEFLAG(flags)) return;
   flags |= 12;
   strcpy(into, ops[i+1]); i++;
   continue;
   }
  if(MYbegstr(op,"DAYOFMONTH")) {
   if (CHKFORMATTIMEFLAG(flags)) return;
   flags |= 13;
   strcpy(into, ops[i+1]); i++;
   continue;
   }
  if(MYbegstr(op,"MONTHOFYEAR")) {
   if (CHKFORMATTIMEFLAG(flags)) return;
   flags |= 14;
   strcpy(into, ops[i+1]); i++;
   continue;
   }
  if(MYbegstr(op,"YEAR")) {
   if (CHKFORMATTIMEFLAG(flags)) return;
   flags |= 15;
   strcpy(into, ops[i+1]); i++;
   continue;
   }
  if(MYbegstr(op,"TIME")) {
   if (CHKFORMATTIMEFLAG(flags)) return;
   flags |= 16;
   strcpy(into, ops[i+1]); i++;
   continue;
   }
  sprintf(err,
    " unknown argument %s of %s", op, blk_op1);
  prt_error(err, 8);
  No_Code();
  return;
  }
 if ((flags & 31) == 0) {
  sprintf(err, "no format in FORMATTIME");
  prt_error(err, 8);
  No_Code();
  return;
  }

#ifdef PPCOB
 if (strlen(datesep) == 0) strcpy(datesep,"' '");
 if (strlen(timesep) == 0) strcpy(timesep,"' '");
 fprintf(stdout, "           MOVE 18948 TO EIBFN-2\n");
 fprintf(stdout, "           MOVE %d TO KIK-FLAGS\n", flags);
 fprintf(stdout, "           MOVE %s TO KIK-TRAN\n", datesep);
 fprintf(stdout, "           MOVE %s TO KIK-ABND\n", timesep);
 fprintf(stdout, "           CALL 'KIKCOBGL' USING KIKEIB,\n");
 if (!strcmp(respvar, ""))
  fprintf(stdout, "                 KIK-V1,\n");
 else
  fprintf(stdout, "                 KIK-V2,\n");
 fprintf(stdout, "                 %s,\n", abstime);
 fprintf(stdout, "                 KIK-FLAGS,\n");
 fprintf(stdout, "                 %s,\n", into);
 fprintf(stdout, "                 KIK-TRAN,\n");   // datesep
 fprintf(stdout, "                 KIK-ABND");      // timesep
#endif
#ifdef PPGCC
 if (strlen(datesep) == 0) strcpy(datesep,"\" \"");
 if (strlen(timesep) == 0) strcpy(timesep,"\" \"");
 fprintf(stdout, "\t{ short *eibfn2 = (short*)&__KIKEIB->eibfn;\n");
 fprintf(stdout, "\t\t*eibfn2 = 18948;\n");
 if (!strcmp(respvar, ""))
  fprintf(stdout, "\t  int *v=&KIK_V1;\n");
 else
  fprintf(stdout, "\t  int *v=&KIK_V2;\n");
 fprintf(stdout, "\t int flags=%d, *FLAGS=&flags;\n", flags);
 fprintf(stdout, "\t char *DATESEP=%s;\n", datesep);
 fprintf(stdout, "\t char *TIMESEP=%s;\n", timesep);
 fprintf(stdout, "\t kikgccgl(__KIKEIB, v, &%s, FLAGS,\n", abstime);
 fprintf(stdout, "\t\t&%s, DATESEP, TIMESEP);\n", into);
#endif
}
