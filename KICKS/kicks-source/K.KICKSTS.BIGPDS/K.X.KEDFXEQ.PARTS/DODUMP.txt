 /////////////////////////////////////////////////////////////////////
 // 'KICKS for TSO' is a product to deliver 'CICS like' functionality
 // in MVS/TSO. Its CICS functionality is delivered at the source code
 // level, not at the object code level. Applications must be
 // recompiled and the recompiled programs are not compatible with any
 // known version of 'real' CICS (the IBM program product),
 //
 // Â© Copyright 2008-2014, Michael Noel, All Rights Reserved.
 //
 // Usage of 'KICKS for TSO' is in all cases subject to license. See
 // http://www.kicksfortso.com
 // for most current information regarding licensing options..
 ////////1/////////2/////////3/////////4/////////5/////////6/////////7

#include "kedfxeq.h"

void DoDump(char *begin, int size, int offset, int top, int dolines) {

int b, i, numlines, last=0;
short sbuf, dooffset=1;
char *tioa, linbuf[160], D[160], c;

 begin += offset; size  -= offset;
 if (dolines < 0) { // dolines negative means blank the offsets...
  dolines *= -1;
  dooffset = 0;
  }

 if (pwhich == 9) {
  last = csa->trc.trccur;
  last = (--last) * csa->trc.trcsize;
  last += (int)csa->trc.trctbl;
  }

 tioa = csa->tctte->tioa;
 if ((sba_maxcol > 131) && (pwhich != 9)) {
  // mod 5's (or other wide screens)
  for (b=(int)begin, numlines=0; numlines<dolines; numlines++, b+=32) {
   linbuf[0] = 0;
   if (b < (int)(begin+size)) {
    if (dooffset > 0)
     SPRINTF(D, "%06X ",  b-(int)begin+offset);
    else
     SPRINTF(D, "       ");
    STRCAT(linbuf, D);
    SPRINTF(D, "%08X: ", b); STRCAT(linbuf, D);

    // display hex
    for (i=0; i<32; i++) {
     if ((b+i)<(int)(begin+size)) {
      SPRINTF(D, "%02X", *(char*)(b+i)); STRCAT(linbuf, D);
      }
     else STRCAT(linbuf, "  ");
     if ((i%4) ==3 ) { SPRINTF(D, " "); STRCAT(linbuf, D); }
     if ((i%16)==15) { SPRINTF(D, " "); STRCAT(linbuf, D); }
     }
    //STRCAT(linbuf, " ");

    // display ascii
    for (i=0; i<32; i++) {
      c = *(char *)(b+i);
      if (!ISPRINT(c)) { c='.'; }
      if ((b+i)<(int)(begin+size)) {
       SPRINTF(D, "%c", c); STRCAT(linbuf, D);
       }
      else STRCAT(linbuf, " ");
      if (pwhich != 9) // trace doesn't get spaces...
       if ((i%4) ==3 ) { SPRINTF(D, " "); STRCAT(linbuf, D); }
       if ((i%16)==15) { SPRINTF(D, " "); STRCAT(linbuf, D); }
      }

     // if trace, and this is current entry, mark it
     if (pwhich == 9)
     if (b == last) { SPRINTF(D, " <<<<"); STRCAT(linbuf, D); }

     PUT_SBA(top+numlines,1)
     APPEND_MSG(linbuf);
     }
    }
  }
 else {
  // normal 3270's
  for (b=(int)begin, numlines=0; numlines<dolines; numlines++, b+=16) {
   linbuf[0] = 0;
   if (b < (int)(begin+size)) {
    if (dooffset > 0)
     SPRINTF(D, "%06X ",  b-(int)begin+offset);
    else
     SPRINTF(D, "       ");
    STRCAT(linbuf, D);
    SPRINTF(D, "%08X: ", b); STRCAT(linbuf, D);

    if ((pwhich != 9) | ((pwhich == 9) & (ttype == 0))) {
     // display hex
     for (i=0; i<16; i++) {
      if ((b+i)<(int)(begin+size)) {
       SPRINTF(D, "%02X", *(char*)(b+i)); STRCAT(linbuf, D);
       }
      else STRCAT(linbuf, "  ");
      if ((i%4)==3) { SPRINTF(D, " "); STRCAT(linbuf, D); }
      }
     STRCAT(linbuf, " ");
     }
    else {
     // display trace decode (explain) instead of hex
     FmtTrace((char *)b, &D[0]); D[36] = 0;
     i = STRLEN(D);
     STRNCAT(D, "                                     ", 37-i);
     STRCAT(linbuf, D);
     }

    // display ascii
    for (i=0; i<16; i++) {
      c = *(char *)(b+i);
      if (!ISPRINT(c)) { c='.'; }
      if ((b+i)<(int)(begin+size)) {
       SPRINTF(D, "%c", c); STRCAT(linbuf, D);
       }
      else STRCAT(linbuf, " ");
      if (pwhich != 9) // trace doesn't get spaces...
       if ((i%4)==3) { SPRINTF(D, " "); STRCAT(linbuf, D); }
      }

     // if trace, and this is current entry, mark it
     if (pwhich == 9)
     if (b == last) { SPRINTF(D, " <<<<"); STRCAT(linbuf, D); }

     PUT_SBA(top+numlines,1)
     APPEND_MSG(linbuf);
     }
    }
  }
}


