 /////////////////////////////////////////////////////////////////////
 // 'KICKS for TSO' is a product to deliver 'CICS like' functionality
 // in MVS/TSO. Its CICS functionality is delivered at the source code
 // level, not at the object code level. Applications must be
 // recompiled and the recompiled programs are not compatible with any
 // known version of 'real' CICS (the IBM program product),
 //
 // Â© Copyright 2008-2014, Michael Noel, All Rights Reserved.
 //
 // Usage of 'KICKS for TSO' is in all cases subject to license. See
 // http://www.kicksfortso.com
 // for most current information regarding licensing options..
 ////////1/////////2/////////3/////////4/////////5/////////6/////////7

#include "kedfxeq.h"

void DoEIB(KIKEIB *eib, DEBUGGERCA *comm) {
char *tioa, buffer[200];
int row, col, x, y;
int dp[2], db, ddd, yy;
int tp[2], tb, hh, mm, ss;
short sbuf;

 if((pwhich == 10) && (eib->eibaid == KIKPF10)) {
  offset = -1;
  DoMain(eib, comm);
  return;
  }
 pwhich = 10;

 DoTop(eib, comm);

 tioa = csa->tctte->tioa;
 //STRCAT(tioa, "\x11");
 //sbuf=encode_sba(4,1); STRNCAT(tioa, (char*)&sbuf, 2);
 //SPRINTF(buffer, "%06X: EIBTASKN  %d", &eib->eibtaskn, eibSave.eibtaskn);
 //STRCAT(tioa, buffer);

 SPRINTF(buffer, "%06X: EIBCALEN  %hd", &eib->eibcalen, comm->oldcomml);
 PUT_SBA(4,1)
 APPEND_MSG(buffer);

 if((tctteSave.flags & tctteflag$usingalt) > 0) {
  x = eibSave.eibcposn / csa->tctte->ALTcols;
  y = eibSave.eibcposn - (x * csa->tctte->ALTcols);
  }
 else {
  x = eibSave.eibcposn / csa->tctte->PRMcols;
  y = eibSave.eibcposn - (x * csa->tctte->PRMcols);
  }
 x++; y++;
 SPRINTF(buffer, "%06X: EIBCPOSN  %04X (%d,%d)",
         &eib->eibcposn, eibSave.eibcposn, x, y);
 PUT_SBA(5,1)
 APPEND_MSG(buffer);

 dp[0]=0; dp[1]=eibSave.eibdate; // turn comp-3 into binary
 CVB(dp[0], db);
 ddd = db % 1000;
 yy = (db / 1000) % 100;
 SPRINTF(buffer, "%06X: EIBDATE   %08X (%02d.%03d)",
         &eib->eibdate, eibSave.eibdate, yy, ddd);
 PUT_SBA(6,1)
 APPEND_MSG(buffer);

 tp[0]=0; tp[1]=eibSave.eibtime; // turn comp-3 into binary
 CVB(tp[0], tb);
 ss = tb  % 100;
 mm = (tb / 100) % 100;
 hh = (tb / 10000) % 100;
 SPRINTF(buffer, "%06X: EIBTIME   %08X (%02d:%02d:%02d)",
         &eib->eibtime, eibSave.eibtime, hh, mm, ss);
 PUT_SBA(7,1)
 APPEND_MSG(buffer);

 SPRINTF(buffer, "%06X: EIBRESP   %d", &eib->eibresp, eibSave.eibresp);
 PUT_SBA(8,1)
 APPEND_MSG(buffer);

 // -- should explain/format eibresp
 SPRINTF(buffer, "%06X: EIBRESP2  %d", &eib->eibresp2, eibSave.eibresp2);
 PUT_SBA(9,1)
 APPEND_MSG(buffer);

 // -- should explain/format eibresp2
 SPRINTF(buffer, "%06X: EIBRSRCE  %8.8s", &eib->eibrsrce, eibSave.eibrsrce);
 PUT_SBA(10,1)
 APPEND_MSG(buffer);

 SPRINTF(buffer, "%06X: EIBDS     %8.8s", &eib->eibds, eibSave.eibds);
 PUT_SBA(11,1)
 APPEND_MSG(buffer);

 SPRINTF(buffer, "%06X: EIBFN     %02X%02X",
         &eib->eibfn, eibSave.eibfn[0], eibSave.eibfn[1]);
 PUT_SBA(12,1)
 APPEND_MSG(buffer);

 // -- should explain/format eibfn
 SPRINTF(buffer, "%06X: EIBRCODE  %02X %02X %02X %02X %02X %02X ",
         &eib->eibrcode, eibSave.eibrcode[0], eibSave.eibrcode[1],
         eibSave.eibrcode[2], eibSave.eibrcode[3], eibSave.eibrcode[4],
         eibSave.eibrcode[5]);
 PUT_SBA(13,1)
 APPEND_MSG(buffer);

 // -- should explain/format eibrcode
 SPRINTF(buffer, "%06X: EIBTRMID  %4.4s", &eib->eibtrmid, eibSave.eibtrmid);
 PUT_SBA(14,1)
 APPEND_MSG(buffer);

 //SPRINTF(buffer, "%06X: EIBTRNID  %4.4s", &eib->eibtrnid, eibSave.eibtrnid);
 //STRCAT(tioa, "\x11");
 //sbuf=encode_sba(16,1); STRNCAT(tioa, (char*)&sbuf, 2);
 //STRCAT(tioa, buffer);

 SPRINTF(buffer, "%06X: EIBAID    %02X", &eib->eibaid, eibSave.eibaid);
 PUT_SBA(15,1)
 APPEND_MSG(buffer);

 // -- should explain/format eibaid
 SPRINTF(buffer, "%06X: EIBOPID   %3.3s", &eib->eibopid, eibSave.eibopid);
 PUT_SBA(16,1)
 APPEND_MSG(buffer);

 SPRINTF(buffer, "%06X: EIBUSRID  %8.8s", &eib->eibusrid, eibSave.eibusrid);
 PUT_SBA(17,1)
 APPEND_MSG(buffer);

 SPRINTF(buffer, "%06X: EIBSYSID  %8.8s", &eib->eibsysid, eibSave.eibsysid);
 PUT_SBA(18,1)
 APPEND_MSG(buffer);

 SPRINTF(buffer, "%06X: EIBNETID  %8.8s", &eib->eibnetid, eibSave.eibnetid);
 PUT_SBA(19,1)
 APPEND_MSG(buffer);

 SPRINTF(buffer, "%06X: EIBPGMID  %8.8s", &eib->eibpgmid, eibSave.eibpgmid);
 PUT_SBA(20,1)
 APPEND_MSG(buffer);

 int rowoff=-3, coloff=39;
 if((bot - helpv - 1) > 23 ) { rowoff=0; coloff=0; }

 SPRINTF(buffer, "%06X: EIBPROG   %8.8s", &eib->eibprog, eibSave.eibprog);
 PUT_SBA(21+rowoff,1+coloff)
 APPEND_MSG(buffer);

 SPRINTF(buffer, "%06X: EIBLINE    %6d",  &eib->eibline, eibSave.eibline);
 PUT_SBA(22+rowoff,1+coloff)
 APPEND_MSG(buffer);

 SPRINTF(buffer, "%06X: EIBWC     %20.20s", &eib->eibwc, eibSave.eibwc);
 PUT_SBA(23+rowoff,1+coloff)
 APPEND_MSG(buffer);

 // reduce help level if necessary to fit EIB on screen
 if ((23+rowoff) > (bot-helpv-1)) {
  if (helpv == 6) helpv = 3; else if (helpv == 3) helpv = 1;
  }
 if ((23+rowoff) > (bot-helpv-1)) {
  if (helpv == 6) helpv = 3; else if (helpv == 3) helpv = 1;
  }

 DoBottom(eib, comm);
}


