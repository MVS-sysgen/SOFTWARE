 /////////////////////////////////////////////////////////////////////
 // 'KICKS for TSO' is a product to deliver 'CICS like' functionality
 // in MVS/TSO. Its CICS functionality is delivered at the source code
 // level, not at the object code level. Applications must be
 // recompiled and the recompiled programs are not compatible with any
 // known version of 'real' CICS (the IBM program product),
 //
 // Â© Copyright 2008-2014, Michael Noel, All Rights Reserved.
 //
 // Usage of 'KICKS for TSO' is in all cases subject to license. See
 // http://www.kicksfortso.com
 // for most current information regarding licensing options..
 ////////1/////////2/////////3/////////4/////////5/////////6/////////7

#include "kedfxeq.h"

#include "ifgacb.h"
#include "ifgrpl.h"
#include "fcthdr.h"
#include "fctent.h"

 ////////////////////// FCP api calls //////////////////////

#define API_WRITE API_READ
#define API_READNEXT API_READ
#define API_READPREV API_READ
void API_READ(KIKEIB *eib, DEBUGGERCA *comm) {
 char *tioa = csa->tctte->tioa;
 short sbuf, *eibfn2 = (short*)&eibSave.eibfn;
 int col, topline, botline, lines;
 fcth *fcthdr; fcte *fctent;

  char  *file, *into, *ridfld, buffer[200];
  int    flags, row=3;
  short  length, keylen, reqid;
  if (*eibfn2 == 1538)
   { APPEND_MSG("READ "); }
  else
  if (*eibfn2 == 1540)
   { APPEND_MSG("WRITE "); }
  else
  if (*eibfn2 == 1550)
   { APPEND_MSG("READNEXT "); }
  else
  if (*eibfn2 == 1552)
   { APPEND_MSG("READPREV "); }
  /* */
  file = (char*)cobarg[1]; flags = *(int*)cobarg[2];
  into = (char*)cobarg[3]; length = *(short*)cobarg[4];
  ridfld = (char*)cobarg[5]; keylen = *(short*)cobarg[6];
  /* */
  //STRCAT(tioa, "\x11");
  //sbuf=encode_sba(++row,1); STRNCAT(tioa, (char*)&sbuf, 2);
  SPRINTF(buffer, "FILE(%8.8s) ", file);
  APPEND_MSG(buffer);
  if((*eibfn2 == 1550) || (*eibfn2 == 1552)) {
   reqid = *(short*)cobarg[7];
   if (reqid != 0) {
    SPRINTF(buffer, "REQID(&d) ", reqid);
    APPEND_MSG(buffer);
    }
   }
  buffer[0] = 0;
  if((*eibfn2 == 1550) || (*eibfn2 == 1552)) {
   if ((flags & 6)  > 0) STRCAT(buffer, "   ");
   if ((flags & 2)  > 0) STRCAT(buffer, "RBA ");
   if ((flags & 4)  > 0) STRCAT(buffer, "RRN ");
   }
  if(*eibfn2 == 1540) {
   if ((flags & 70) > 0) STRCAT(buffer, "    ");
   if ((flags & 2)  > 0) STRCAT(buffer, "RBA ");
   if ((flags & 4)  > 0) STRCAT(buffer, "RRN ");
   if ((flags & 64) > 0) STRCAT(buffer, "MASSINSERT ");
   }
  if(*eibfn2 == 1538) {
   if ((flags & 63) > 0) STRCAT(buffer, "    ");
   if ((flags & 1)  > 0) STRCAT(buffer, "GENERIC ");
   if ((flags & 2)  > 0) STRCAT(buffer, "RBA ");
   if ((flags & 4)  > 0) STRCAT(buffer, "RRN ");
   if ((flags & 8)  > 0) STRCAT(buffer, "GTEQ ");
   if ((flags & 16) > 0) STRCAT(buffer, "EQUAL ");
   if ((flags & 32) > 0) STRCAT(buffer, "UPDATE ");
   }
  if (buffer[0] != 0) {
   PUT_SBA(++row,1)
   APPEND_MSG(buffer);
   }
  if ((flags & 6)  > 0) keylen = 4; // rba or rrn
  if (keylen > 0) {
   PUT_SBA(++row,1)
   SPRINTF(buffer, "  RIDFLD(X'%06X') ", ridfld);
   APPEND_MSG(buffer);
   SPRINTF(buffer, " KEYLENGTH(%d) ", keylen);
   APPEND_MSG(buffer);
   DoDump(ridfld, keylen, 0, ++row, -1);
   }
  PUT_SBA(++row,1)
  if(*eibfn2 == 1540) // write
   SPRINTF(buffer, "  FROM(X'%06X') ", into);
  else
   SPRINTF(buffer, "  INTO(X'%06X') ", into);
  APPEND_MSG(buffer);
  SPRINTF(buffer, " LENGTH(%d) ", length);
  APPEND_MSG(buffer);
  if (length == -1) {
   // if length not given then extract from FCT
   fcthdr = (fcth *)csa->fcp_table_addr;
   for (fctent = fcthdr->first; fctent != NULL; fctent=fctent->next) {
    if((fctent->flag1 & FCTEflag1disabled) > 0) continue;
    if(MEMCMP(file, fctent->ddname, 8)) continue;
    if (fctent->lrecl > 0) length = fctent->lrecl;
    SPRINTF(buffer, " [%d] ", length);
    APPEND_MSG(buffer);
    break;
    }
  }
  //DoDump(into, length, 0, ++row, -1);
  row++; row++; // skip 2 lines
  topline = row;
  botline = bot - helpv - 1;
  lines = botline - topline + 1;
  if (eib->eibaid == 0) offset = 0;        // initial entry
  if (eib->eibaid == KIKPF7) {             // scroll back
   offset -= lines*sba_1632;
   if (offset < 0) offset = 0;
   }
  if (eib->eibaid == KIKPF8) {             // scroll fwd
   col = offset + lines*sba_1632;
   if (col < length) offset = col;
   }
  if (eib->eibaid == KIKPF19) offset = 0;  // scroll top
  if (eib->eibaid == KIKPF20) {            // scroll bottom
   offset = length / sba_1632;             // num lines in area
   if (length % sba_1632 > 0) offset++;
   offset -= lines;              // less num lines on screen
   offset *= sba_1632;           // times chars / line
   if (offset < 0) offset = 0;   // zero if negative...
   }
  DoDump(into, length, offset, topline, lines);
 }

void API_REWRITE(KIKEIB *eib, DEBUGGERCA *comm) {
 char *tioa = csa->tctte->tioa;
  char  *file, *into, buffer[200];
  short length, sbuf;
  int row=3, col, topline, botline, lines;
  fcth *fcthdr; fcte *fctent;

  APPEND_MSG("REWRITE ");
  /* */
  file = (char*)cobarg[1]; //flags passed as arg2 but not used
  into = (char*)cobarg[3]; length = *(short*)cobarg[4];
  /* */
  SPRINTF(buffer, "FILE(%8.8s) ", file);
  APPEND_MSG(buffer);
  PUT_SBA(++row,1)
  SPRINTF(buffer, "  FROM(X'%06X') ", into);
  APPEND_MSG(buffer);
  SPRINTF(buffer, " LENGTH(%d) ", length);
  APPEND_MSG(buffer);
  if (length == -1) {
   // if length not given then extract from FCT
   fcthdr = (fcth *)csa->fcp_table_addr;
   for (fctent = fcthdr->first; fctent != NULL; fctent=fctent->next) {
    if((fctent->flag1 & FCTEflag1disabled) > 0) continue;
    if(MEMCMP(file, fctent->ddname, 8)) continue;
    if (fctent->lrecl > 0) length = fctent->lrecl;
    SPRINTF(buffer, " [%d] ", length);
    APPEND_MSG(buffer);
    break;
    }
  }
  //DoDump(into, length, 0, ++row, -1);
  row++; row++; // skip 2 lines
  topline = row;
  botline = bot - helpv - 1;
  lines = botline - topline + 1;
  if (eib->eibaid == 0) offset = 0;        // initial entry
  if (eib->eibaid == KIKPF7) {             // scroll back
   offset -= lines*sba_1632;
   if (offset < 0) offset = 0;
   }
  if (eib->eibaid == KIKPF8) {             // scroll fwd
   col = offset + lines*sba_1632;
   if (col < length) offset = col;
   }
  if (eib->eibaid == KIKPF19) offset = 0;  // scroll top
  if (eib->eibaid == KIKPF20) {            // scroll bottom
   offset = length / sba_1632;             // num lines in area
   if (length % sba_1632 > 0) offset++;
   offset -= lines;              // less num lines on screen
   offset *= sba_1632;           // times chars / line
   if (offset < 0) offset = 0;   // zero if negative...
   }
  DoDump(into, length, offset, topline, lines);
 }

void API_DELETE(KIKEIB *eib, DEBUGGERCA *comm) {
 char *tioa = csa->tctte->tioa;
  char  *file, *ridfld, buffer[200];
  int    flags, row=3;
  int    keylen, numrec;
  short sbuf;
  APPEND_MSG("DELETE ");
  /* */
  file = (char*)cobarg[1]; flags = *(int*)cobarg[2];
  ridfld = (char*)cobarg[5]; keylen = *(short*)cobarg[6];
  numrec = *(short*)cobarg[7];
  /* */
  SPRINTF(buffer, "FILE(%8.8s) ", file);
  APPEND_MSG(buffer);
  SPRINTF(buffer, "  NUMREC(%d) ", numrec);
  APPEND_MSG(buffer);
  buffer[0] = 0;
  if ((flags & 7)  > 0) STRCAT(buffer, "    ");
  if ((flags & 1)  > 0) STRCAT(buffer, "GENERIC ");
  if ((flags & 2)  > 0) STRCAT(buffer, "RBA ");
  if ((flags & 4)  > 0) STRCAT(buffer, "RRN ");
  if (buffer[0] != 0) {
   PUT_SBA(++row,1)
   APPEND_MSG(buffer);
   }
  if ((flags & 6)  > 0) keylen = 4; // rba or rrn
  if (keylen > 0) {
   PUT_SBA(++row,1)
   SPRINTF(buffer, "  RIDFLD(X'%06X') ", ridfld);
   APPEND_MSG(buffer);
   SPRINTF(buffer, " KEYLENGTH(%d) ", keylen);
   APPEND_MSG(buffer);
   DoDump(ridfld, keylen, 0, ++row, -1);
   }
 }

void API_UNLOCK(KIKEIB *eib, DEBUGGERCA *comm) {
 char *tioa = csa->tctte->tioa;
  char  *file, buffer[200];
  int row=3;
  short sbuf;
  APPEND_MSG("UNLOCK ");
  /* */
  file = (char*)cobarg[1];
  // flags passed as arg2 but not used...
  /* */
  SPRINTF(buffer, "FILE(%8.8s) ", file);
  APPEND_MSG(buffer);
 }

#define API_RESETBR API_STARTBR
void API_STARTBR(KIKEIB *eib, DEBUGGERCA *comm) {
 char *tioa = csa->tctte->tioa;
 short sbuf, *eibfn2 = (short*)&eibSave.eibfn;
  char  *file, *ridfld, buffer[200];
  int    flags, row=3;
  short  keylen, reqid;
  if (*eibfn2 == 1548)
   { APPEND_MSG("STARTBR "); }
  else
  if (*eibfn2 == 1556)
   { APPEND_MSG("RESETBR "); }
  /* */
  file = (char*)cobarg[1]; flags = *(int*)cobarg[2];
  ridfld = (char*)cobarg[5]; keylen = *(short*)cobarg[6];
  reqid = *(short*)cobarg[7];
  /* */
  SPRINTF(buffer, "FILE(%8.8s) ", file);
  APPEND_MSG(buffer);
  if (reqid != 0) {
   SPRINTF(buffer, "REQID(&d) ", reqid);
   APPEND_MSG(buffer);
   }
  buffer[0] = 0;
  if ((flags & 31) > 0) STRCAT(buffer, "    ");
  if ((flags & 1)  > 0) STRCAT(buffer, "GENERIC ");
  if ((flags & 2)  > 0) STRCAT(buffer, "RBA ");
  if ((flags & 4)  > 0) STRCAT(buffer, "RRN ");
  if ((flags & 8)  > 0) STRCAT(buffer, "GTEQ ");
  if ((flags & 16) > 0) STRCAT(buffer, "EQUAL ");
  if (buffer[0] != 0) {
   PUT_SBA(++row,1)
   APPEND_MSG(buffer);
   }
  if ((flags & 6)  > 0) keylen = 4; // rba or rrn
  if (keylen > 0) {
   PUT_SBA(++row,1)
   SPRINTF(buffer, "  RIDFLD(X'%06X') ", ridfld);
   APPEND_MSG(buffer);
   SPRINTF(buffer, " KEYLENGTH(%d) ", keylen);
   APPEND_MSG(buffer);
   DoDump(ridfld, keylen, 0, ++row, -1);
   }
 }

void API_ENDBR(KIKEIB *eib, DEBUGGERCA *comm) {
 char *tioa = csa->tctte->tioa;
  char  *file, buffer[200];
  int    row=3;
  short  reqid;
  short sbuf;
  APPEND_MSG("ENDBR ");
  /* */
  file = (char*)cobarg[1];
  reqid = *(short*)cobarg[7];
  /* */
  SPRINTF(buffer, "FILE(%8.8s) ", file);
  APPEND_MSG(buffer);
  if (reqid != 0) {
   SPRINTF(buffer, "REQID(&d) ", reqid);
   APPEND_MSG(buffer);
   }
 }

