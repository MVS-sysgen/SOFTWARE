 /////////////////////////////////////////////////////////////////////
 // 'KICKS for TSO' is a product to deliver 'CICS like' functionality
 // in MVS/TSO. Its CICS functionality is delivered at the source code
 // level, not at the object code level. Applications must be
 // recompiled and the recompiled programs are not compatible with any
 // known version of 'real' CICS (the IBM program product),
 //
 // Â© Copyright 2008-2014, Michael Noel, All Rights Reserved.
 //
 // Usage of 'KICKS for TSO' is in all cases subject to license. See
 // http://www.kicksfortso.com
 // for most current information regarding licensing options..
 ////////1/////////2/////////3/////////4/////////5/////////6/////////7

#include "kedfxeq.h"

 ////////////////////// BMS api calls //////////////////////

#define API_HANDLE_AID API_H2NDLE_AID
void API_HANDLE_AID(KIKEIB *eib, DEBUGGERCA *comm) {
  char *tioa = csa->tctte->tioa;
  char   buffer[200];
  short sbuf, *eibfn2 = (short*)&eibSave.eibfn;
  int row=3;

#include "kicksaid.h"

  int numacs, aptr, ac, acs, acs14, acs58, acs9c, acsdg, bptr;

  APPEND_MSG("HANDLE AID ");

  numacs  = *(int*)cobarg[2];
  acs14   = *(int*)cobarg[3]; acs58 = *(int*)cobarg[4];
  acs9c   = *(int*)cobarg[5]; acsdg = *(int*)cobarg[6];

  for(aptr=0; aptr<numacs; aptr++) {
   acs = acs14;
   if (aptr>3) acs = acs58;
   if (aptr>7) acs = acs9c;
   if (aptr>11) acs = acsdg;
   ac = (acs>>((aptr%4)*8))&255;
   if ((aptr & 1) == 0) {
    row++; // skip a line
    PUT_SBA(++row,1)
    APPEND_MSG("  ");
    }
   buffer[0] = 0;
   for(bptr=0; bptr<aid_max; bptr++) {
    if (ac == aid_code[bptr]) {
     STRCAT(buffer, aid_text[bptr]);
     break;
     }
    }
   if (comm->type_of == kikbmsHANDLEAID) {
     STRCAT(buffer, "  (set) ");
    }
   else {    // must be kikbmsCANCELAID
     STRCAT(buffer, "  (clear) ");
    }
   STRNCAT(buffer, "                              ", 30-STRLEN(buffer));
   APPEND_MSG(buffer);
   }
 }


#define API_RECEIVE_MAP API_RECEIVE
#define API_SEND_MAP API_RECEIVE
#define API_SEND_TEXT API_RECEIVE
#define API_SEND_CONTROL API_RECEIVE
void API_RECEIVE(KIKEIB *eib, DEBUGGERCA *comm) {

  char *tioa = csa->tctte->tioa;
  short sbuf, *eibfn2 = (short*)&eibSave.eibfn;

  int row=3, col, topline, botline, lines;

  char  c, cx, *map, *mapset, *msg, *into, buffer[200];
  int   length, maxlen, flags, cursor;

  if (*eibfn2 == 1026) {
   msg    = (char*)cobarg[1];
   length = *(int*)cobarg[2];
   maxlen = *(int*)cobarg[3];
   flags  = *(int*)cobarg[5];
   APPEND_MSG("RECEIVE  ");
   PUT_SBA(++row,1)
   APPEND_MSG("  ");
   if((flags & 256) > 0) {
    c = cx =  eibSave.eibaid;
    if (!ISPRINT(c)) c = ' ';
    SPRINTF(buffer, "CHECK - EIBAID %c (%02X)", c, cx);
    APPEND_MSG(buffer);
    }
   else {
    if((flags & 2) > 0) APPEND_MSG("ASIS ");
    SPRINTF(buffer, "MAXFLENGTH(%d) ", maxlen);
    APPEND_MSG(buffer);
    SPRINTF(buffer, "FLENGTH(%d) ", length);
    APPEND_MSG(buffer);
    row++; // skip a line
    PUT_SBA(++row,1)
    APPEND_MSG("   INTO");
    topline = ++row;
    botline = bot - helpv - 1;
    lines = botline - topline + 1;

    if (eib->eibaid == 0) {                  // initial entry
     offset = 0;
    }
     if (eib->eibaid == KIKPF7) {             // scroll back
      offset -= lines*sba_1632;
      if (offset < 0) offset = 0;
      }
     if (eib->eibaid == KIKPF8) {             // scroll fwd
      col = offset + lines*sba_1632;
      if (col < maxlen) offset = col;
      }
     if (eib->eibaid == KIKPF19) offset = 0;  // scroll top
     if (eib->eibaid == KIKPF20) {            // scroll bottom
      offset = maxlen / sba_1632;             // num lines in area
      if (maxlen % sba_1632 > 0) offset++;
      offset -= lines;              // less num lines on screen
      offset *= sba_1632;           // times chars / line
      if (offset < 0) offset = 0;   // zero if negative...
      }
     DoDump(msg, maxlen, offset, topline, lines);
     }
   } else


  if (*eibfn2 == 6146) {
   int dsize=0;
   mapset = (char*)cobarg[1];
   map    = (char*)cobarg[2];
   into   = (char*)cobarg[3];  // aka dsect
   flags  = *(int*)cobarg[5];
   dsize = GetMapDsectSize(mapset, map);
   APPEND_MSG("RECEIVE MAP  ");
   PUT_SBA(++row,1)
   SPRINTF(buffer, "  MAPSET(%8.8s) ", mapset);
   APPEND_MSG(buffer);
   SPRINTF(buffer, " MAP(%8.8s) ", map);
   APPEND_MSG(buffer);
   PUT_SBA(++row,1)
   if((flags & 2) > 0) APPEND_MSG("  ASIS");
   if((flags & 4) > 0) APPEND_MSG("  BUFFER");
   PUT_SBA(++row,1)
   if (dsize == 0)
    { APPEND_MSG("    INTO (size unknown)"); }
   else {
    SPRINTF(buffer, "    INTO (%d)", dsize);
    APPEND_MSG(buffer);
    }
   topline = ++row;
   botline = bot - helpv - 1;
   lines = botline - topline + 1;
   if (dsize == 0) dsize = lines*sba_1632;
   length = dsize;

   if (eib->eibaid == 0) {                  // initial entry
    offset = 0;
   }
   if (eib->eibaid == KIKPF7) {             // scroll back
    offset -= lines*sba_1632;
    if (offset < 0) offset = 0;
    }
   if (eib->eibaid == KIKPF8) {             // scroll fwd
    col = offset + lines*sba_1632;
    if (col < length) offset = col;
    }
   if (eib->eibaid == KIKPF19) offset = 0;  // scroll top
   if (eib->eibaid == KIKPF20) {            // scroll bottom
    offset = length / sba_1632;             // num lines in area
    if (length % sba_1632 > 0) offset++;
    offset -= lines;              // less num lines on screen
    offset *= sba_1632;           // times chars / line
    if (offset < 0) offset = 0;   // zero if negative...
    }
   DoDump(into, length, offset, topline, lines);
   } else


  if (*eibfn2 == 6148) {
   int dsize=0;
   mapset = (char*)cobarg[1];
   map    = (char*)cobarg[2];
   into   = (char*)cobarg[3];  // aka dsect
   cursor = *(int*)cobarg[4];
   flags  = *(int*)cobarg[5];
   dsize = GetMapDsectSize(mapset, map);
   APPEND_MSG("SEND MAP  ");
   PUT_SBA(++row,1)
   SPRINTF(buffer, "  MAPSET(%8.8s) ", mapset);
   APPEND_MSG(buffer);
   SPRINTF(buffer, " MAP(%8.8s) ", map);
   APPEND_MSG(buffer);
   PUT_SBA(++row,1)
   APPEND_MSG("   ");
   if((flags & 0x00000001) > 0) APPEND_MSG("MAPONLY ");
   if((flags & 0x00000008) > 0) APPEND_MSG("DATAONLY ");
   if((flags & 0x00010000) > 0) APPEND_MSG("FRSET ");
   if((flags & 0x00020000) > 0) APPEND_MSG("FREEKB ");
   if((flags & 0x00040000) > 0) APPEND_MSG("ALARM ");
   if((flags & 0x0000ff00) ==  0x0000f500)
     APPEND_MSG("ERASE ");
   if((flags & 0x0000ff00) ==  0x00007e00)
     APPEND_MSG("ERASE(ALTERNATE) ");
   if((flags & 0x0000ff00) ==  0x00006f00)
     APPEND_MSG("ERASEAUP ");
   PUT_SBA(++row,1)
   if((flags & 0x00000002) > 0) APPEND_MSG("CURSOR ");
   if((flags & 0x00000004) > 0) {
    SPRINTF(buffer, "CURSOR(%d) ", cursor);
    APPEND_MSG(buffer);
    }
   PUT_SBA(++row,1)
   if (dsize == 0)
    SPRINTF(buffer, "    FROM (size unknown)");
   else {
    SPRINTF(buffer, "    FROM (%d)", dsize);
    }
   APPEND_MSG(buffer);
   topline = ++row;
   botline = bot - helpv - 1;
   lines = botline - topline + 1;
   if (dsize == 0) dsize = lines*sba_1632;
   length = dsize;

   if (eib->eibaid == 0) {                  // initial entry
    offset = 0;
   }
   if (eib->eibaid == KIKPF7) {             // scroll back
    offset -= lines*sba_1632;
    if (offset < 0) offset = 0;
    }
   if (eib->eibaid == KIKPF8) {             // scroll fwd
    col = offset + lines*sba_1632;
    if (col < length) offset = col;
    }
   if (eib->eibaid == KIKPF19) offset = 0;  // scroll top
   if (eib->eibaid == KIKPF20) {            // scroll bottom
    offset = length / sba_1632;             // num lines in area
    if (length % sba_1632 > 0) offset++;
    offset -= lines;              // less num lines on screen
    offset *= sba_1632;           // times chars / line
    if (offset < 0) offset = 0;   // zero if negative...
    }
   DoDump(into, length, offset, topline, lines);
   } else


  if (*eibfn2 == 6150) {
   msg    = (char*)cobarg[1];
   length = *(int*)cobarg[2];
   cursor = *(int*)cobarg[4];
   flags  = *(int*)cobarg[5];
   APPEND_MSG("SEND TEXT  ");
   PUT_SBA(++row,1)
   APPEND_MSG("   ");
   if (flags == -1) {
    // strfield
    APPEND_MSG("STRFIELD ");
    PUT_SBA(++row,1)
    }
   else {
    // normal (not strfield)
    if((flags & 0x00010000) > 0) APPEND_MSG("FRSET ");
    if((flags & 0x00020000) > 0) APPEND_MSG("FREEKB ");
    if((flags & 0x00040000) > 0) APPEND_MSG("ALARM ");
    if((flags & 0x0000ff00) ==  0x0000f500)
      APPEND_MSG("ERASE ");
    if((flags & 0x0000ff00) ==  0x00007e00)
      APPEND_MSG("ERASE(ALTERNATE) ");
    if((flags & 0x0000ff00) ==  0x00006f00)
      APPEND_MSG("ERASEAUP ");
    PUT_SBA(++row,1)
    if((flags & 0x00000004) > 0) {
     SPRINTF(buffer, "CURSOR(%d) ", cursor);
     APPEND_MSG(buffer);
     }
    }
   SPRINTF(buffer, "    LENGTH(%d) ", length);
   APPEND_MSG(buffer);
   topline = ++row;
   botline = bot - helpv - 1;
   lines = botline - topline + 1;

   if (eib->eibaid == 0) {                  // initial entry
    offset = 0;
   }
   if (eib->eibaid == KIKPF7) {             // scroll back
    offset -= lines*sba_1632;
    if (offset < 0) offset = 0;
    }
   if (eib->eibaid == KIKPF8) {             // scroll fwd
    col = offset + lines*sba_1632;
    if (col < length) offset = col;
    }
   if (eib->eibaid == KIKPF19) offset = 0;  // scroll top
   if (eib->eibaid == KIKPF20) {            // scroll bottom
    offset = length / sba_1632;             // num lines in area
    if (length % sba_1632 > 0) offset++;
    offset -= lines;              // less num lines on screen
    offset *= sba_1632;           // times chars / line
    if (offset < 0) offset = 0;   // zero if negative...
    }
   DoDump(msg, length, offset, topline, lines);

   } else


  if (*eibfn2 == 6162) {
   cursor = *(int*)cobarg[4];
   flags  = *(int*)cobarg[5];
   APPEND_MSG("SEND CONTROL  ");
   PUT_SBA(++row,1)
   APPEND_MSG("   ");
   if((flags & 0x00010000) > 0) APPEND_MSG("FRSET ");
   if((flags & 0x00020000) > 0) APPEND_MSG("FREEKB ");
   if((flags & 0x00040000) > 0) APPEND_MSG("ALARM ");
   if((flags & 0x0000ff00) ==  0x0000f500)
     APPEND_MSG("ERASE ");
   if((flags & 0x0000ff00) ==  0x00007e00)
     APPEND_MSG("ERASE(ALTERNATE) ");
   if((flags & 0x0000ff00) ==  0x00006f00)
     APPEND_MSG("ERASEAUP ");
   PUT_SBA(++row,1)
   if((flags & 0x00000004) > 0) {
    SPRINTF(buffer, "CURSOR(%d) ", cursor);
    APPEND_MSG(buffer);
    }
   }

 }

