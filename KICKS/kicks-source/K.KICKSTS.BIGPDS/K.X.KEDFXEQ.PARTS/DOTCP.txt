 /////////////////////////////////////////////////////////////////////
 // 'KICKS for TSO' is a product to deliver 'CICS like' functionality
 // in MVS/TSO. Its CICS functionality is delivered at the source code
 // level, not at the object code level. Applications must be
 // recompiled and the recompiled programs are not compatible with any
 // known version of 'real' CICS (the IBM program product),
 //
 // Â© Copyright 2008-2014, Michael Noel, All Rights Reserved.
 //
 // Usage of 'KICKS for TSO' is in all cases subject to license. See
 // http://www.kicksfortso.com
 // for most current information regarding licensing options..
 ////////1/////////2/////////3/////////4/////////5/////////6/////////7

#include "kedfxeq.h"

 ////////////////////// TCP api calls //////////////////////

void API_WRITE_OPERATOR(KIKEIB *eib, DEBUGGERCA *comm) {
char  *tioa = csa->tctte->tioa;
char   buffer[200], *msg, *routes, *reply;
int row=3, action, msgL, numroutes, *replyL, maxL, time;
short  i, j, sbuf;
 /* */
    //arg1 - TEXT              char[]
    //arg2 - TEXTLENGTH        int
    //arg3 - ROUTECODES        char[]
    //arg4 - NUMROUTES         int
    //arg5 - ACTION            int
 /* */
    //arg6 - REPLY             char[]
    //arg7 - MAXLENGTH         int
    //arg8 - REPLYLENGTH       int
    //arg9 - TIMEOUT           int
 /* */
 msg = (char*)cobarg[1];
 msgL = *(int*)cobarg[2];
 routes = (char*)cobarg[3];
 numroutes = *(int*)cobarg[4];
 action = *(int*)cobarg[5]; action &= 15;
 if (comm->type_of == kiktcpWTOR) {
  reply = (char*)cobarg[6];
  maxL = *(int*)cobarg[7];
  replyL = (int*)cobarg[8];
  time = *(int*)cobarg[9];
  }
 /* */
 APPEND_MSG("WRITE OPERATOR  ");
 PUT_SBA(++row,1)
 APPEND_MSG("  TEXT ( ");
 for (i = 0; i<65, i<msgL; i++) { APPEND_MSGN(&msg[i], 1); }
 if (i < 65 ) { APPEND_MSG(" )"); }
 else {
  PUT_SBA(++row,1)
  APPEND_MSG("         ");
  for (i = 65; i<130, i<msgL; i++) { APPEND_MSGN(&msg[i], 1); }
  if (i < 130 ) { APPEND_MSG(" )"); }
  else {
   PUT_SBA(++row,1)
   APPEND_MSG("         ");
   for (i = 130; i<160, i<msgL; i++) { APPEND_MSGN(&msg[i], 1); }
   APPEND_MSG(" )");
   }
  }
 PUT_SBA(++row,1)
 SPRINTF(buffer, "  TEXTLENGTH ( %d ) ", msgL);
 APPEND_MSG(buffer);
 if (numroutes > 0) {
  PUT_SBA(++row,1)
  APPEND_MSG("  ROUTECODES (");
  for (i=0; i<(numroutes&15); i++) {
   j = routes[i];
   SPRINTF(buffer, " %d ", j);
   APPEND_MSG(buffer);
   }
  SPRINTF(buffer, ")  NUMROUTES ( %d )", numroutes);
  APPEND_MSG(buffer);
  }
 PUT_SBA(++row,1)
 SPRINTF(buffer, "  ACTION ( %d )  ", action);
 APPEND_MSG(buffer);
 if (action == 2)  APPEND_MSG("IMMEDIATE");
 if (action == 3)  APPEND_MSG("EVENTUAL");
 if (action == 11) APPEND_MSG("CRITICAL");
 if (comm->type_of == kiktcpWTO) return;

 PUT_SBA(++row,1)
 APPEND_MSG("  REPLY ( ");
 for (i = 0; i<65, i<maxL; i++) { APPEND_MSGN(&reply[i], 1); }
 if (i < 65 ) { APPEND_MSG(" )"); }
 else {
  PUT_SBA(++row,1)
  APPEND_MSG("         ");
  for (i = 65; i<119, i<maxL; i++) { APPEND_MSGN(&reply[i], 1); }
  APPEND_MSG(" )");
  }
 PUT_SBA(++row,1)
 SPRINTF(buffer, "  MAXLENGTH ( %d ) ", maxL);
 APPEND_MSG(buffer);
 SPRINTF(buffer, "  REPLYLENGTH ( %d ) ", *replyL);
 APPEND_MSG(buffer);
 PUT_SBA(++row,1)
 SPRINTF(buffer, "  TIMEOUT ( %d ) ", time);
 APPEND_MSG(buffer);
 return;
 }

