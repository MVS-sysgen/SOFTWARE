 /////////////////////////////////////////////////////////////////////
 // 'KICKS for TSO' is a product to deliver 'CICS like' functionality
 // in MVS/TSO. Its CICS functionality is delivered at the source code
 // level, not at the object code level. Applications must be
 // recompiled and the recompiled programs are not compatible with any
 // known version of 'real' CICS (the IBM program product),
 //
 // Â© Copyright 2008-2014, Michael Noel, All Rights Reserved.
 //
 // Usage of 'KICKS for TSO' is in all cases subject to license. See
 // http://www.kicksfortso.com
 // for most current information regarding licensing options..
 ////////1/////////2/////////3/////////4/////////5/////////6/////////7

#include "kedfxeq.h"

 ////////////////////// KCP api calls //////////////////////

void API_SIGNOFF(KIKEIB *eib, DEBUGGERCA *comm) {
 char *tioa = csa->tctte->tioa;
 APPEND_MSG("SIGNOFF ");
 }

void API_SUSPEND(KIKEIB *eib, DEBUGGERCA *comm) {
 char *tioa = csa->tctte->tioa;
 APPEND_MSG("SUSPEND ");
 }

void API_SYNCPOINT(KIKEIB *eib, DEBUGGERCA *comm) {
 char *tioa = csa->tctte->tioa;
 APPEND_MSG("SYNCPOINT ");
 }

#define API_DEQ API_ENQ
void API_ENQ(KIKEIB *eib, DEBUGGERCA *comm) {
 char *tioa = csa->tctte->tioa;
  char buffer[200], *res;
  int   len, maxl, l, susp=0, row=3, cnt=0;
  int col, topline, botline, lines;
  short sbuf, *eibfn2 = (short*)&eibSave.eibfn;
  EnqueuedResouce *er;

  if (*eibfn2 == 4612)
   { APPEND_MSG("ENQ "); }
  else
  if (*eibfn2 == 4614)
   { APPEND_MSG("DEQ "); }

  /* */
  res  = (char*)cobarg[1];
  len  = *(int*)cobarg[2];
  maxl = *(int*)cobarg[3];
  if (*eibfn2 == 4612) susp = *(int*)cobarg[4];
  /* */
  if (maxl == 246) APPEND_MSG("LUW  ");
  if (maxl == 233) APPEND_MSG("TASK ");
  if (susp > 0)    APPEND_MSG("NOSUSPEND ");
  l = len;
  if (l < 0) l = 0;
  if (l > 255) l = 255;
  if (l > 0) {
   SPRINTF(buffer, "LENGTH(%d) ", len);
   APPEND_MSG(buffer);
   SPRINTF(buffer, "ADDRESS(X'%06X')", res);
   APPEND_MSG(buffer);
   }
  else {
   APPEND_MSG("LENGTH(not given) ");
   SPRINTF(buffer, "ADDRESS(X'%06X')", res);
   APPEND_MSG(buffer);
   }

  row++; // skip line

  // PRO version shows enqueue count
  er = csa->tca->next_EQ;
  while (er != NULL) {
   if (er->size == len)
    if (len > 0) {
     if (!STRNCMP(res, er->what, len)) {
      cnt = er->count;
      break;
      }
     }
    else {
     if ((int)res == *(int*)er->what) {
      cnt = er->count;
      break;
      }
     }
   er = er->next;
   }
  SPRINTF(buffer, "Enqueue count is %d", cnt);
  col= sba_maxcol - 1 - STRLEN(buffer);
  PUT_SBA(row,col)
  APPEND_MSG(buffer);

  if (l > 0) {
   row++; // skip line
   topline = row;
   botline = bot - helpv - 1;
   lines = botline - topline + 1;
   if (eib->eibaid == 0) offset = 0;        // initial entry
   if (eib->eibaid == KIKPF7) {             // scroll back
    offset -= lines*sba_1632;
    if (offset < 0) offset = 0;
    }
   if (eib->eibaid == KIKPF8) {             // scroll fwd
    col = offset + lines*sba_1632;
    if (col < l) offset = col;
    }
   if (eib->eibaid == KIKPF19) offset = 0;  // scroll top
   if (eib->eibaid == KIKPF20) {            // scroll bottom
    offset = l / sba_1632;                  // num lines in area
    if (l % sba_1632 > 0) offset++;
    offset -= lines;              // less num lines on screen
    offset *= sba_1632;           // times chars / line
    if (offset < 0) offset = 0;   // zero if negative...
    }
   DoDump(res, l, offset, topline, lines);
   }
 }

void API_ADDRESS(KIKEIB *eib, DEBUGGERCA *comm) {
 char *tioa = csa->tctte->tioa;
  char buffer[200];
  int  *where, what, row=3;
  APPEND_MSG("ADDRESS ");
  /* */
  what  = *(int*)cobarg[1];
  where = (int*)cobarg[2];
  /* */
  switch (what) {
   //case 0: // ACEE
   // break;
    case 1: // COMMAREA
     APPEND_MSG("COMMAREA( ");
     break;
    case 2: // CSA
     APPEND_MSG("CSA( ");
     break;
    case 3: // CWA
     APPEND_MSG("CWA( ");
     break;
    case 4: // EIB
     APPEND_MSG("EIB( ");
     break;
    case 5: // TCTUA
     APPEND_MSG("TCTUA( ");
     break;
    case 6: // TWA
     APPEND_MSG("TWA( ");
     break;
    case 7: // TIOA
     APPEND_MSG("TIOA( ");
     break;
    default:
     SPRINTF(buffer, "? ? ? %d ? ? ? ( ", what);
     APPEND_MSG(buffer);
   }
  SPRINTF(buffer, "X'%06X' ) ", *where);
  APPEND_MSG(buffer);
 }

void API_ASSIGN(KIKEIB *eib, DEBUGGERCA *comm) {
 char *tioa = csa->tctte->tioa;
  char buffer[200];
  int  what, v2, row=3;
  short  *value; char *picx;
  APPEND_MSG("ASSIGN ");
  /* */
  what  = *(int*)cobarg[1];
  value = (short*)cobarg[2];
  picx  = (char*)cobarg[2];
  /* */
  switch (what) {
    case 0:
     SPRINTF(buffer, "ABCODE( '%4.4s' ) ", picx);
     break;
    case 5:
     SPRINTF(buffer, "ALTSCRNHT( X'%04hX' ) ", *value);
     break;
    case 6:
     SPRINTF(buffer, "ALTSCRNWD( X'%04hX' ) ", *value);
     break;
    case 19:
     SPRINTF(buffer, "COLOR( X'%02X' ) ", *picx);
     break;
    case 20:
     SPRINTF(buffer, "CWALENG( X'%04hX' ) ", *value);
     break;
    case 21:
     SPRINTF(buffer, "DEFSCRNHT( X'%04hX' ) ", *value);
     break;
    case 22:
     SPRINTF(buffer, "DEFSCRNWD( X'%04hX' ) ", *value);
     break;
    case 29:
     SPRINTF(buffer, "EWASUPP( X'%02X' ) ", *picx);
     break;
    case 30:
     SPRINTF(buffer, "EXTDS( X'%02X' ) ", *picx);
     break;
    case 31:
     SPRINTF(buffer, "FACILITY( '%4.4s' ) ", picx);
     break;
    case 32:
     SPRINTF(buffer, "FCI( X'%02X' ) ", *picx);
     break;
    case 36:
     SPRINTF(buffer, "HILIGHT( X'%02X' ) ", *picx);
     break;
    case 42:
     SPRINTF(buffer, "LANGINUSE( '%3.3s' ) ", picx);
     break;
    case 50:
     SPRINTF(buffer, "NATLANGINUSE( '%c' ) ", *picx);
     break;
    case 51:
     SPRINTF(buffer, "NETNAME( '%8.8s' ) ", picx);
     break;
    case 56:
     SPRINTF(buffer, "OPID( '%3.3s' ) ", picx);
     break;
    case 62:
     SPRINTF(buffer, "PARTNS( X'%02X' ) ", *picx);
     break;
    case 67:
     SPRINTF(buffer, "PROGRAM( '%8.8s' ) ", picx);
     break;
    case 68:
     SPRINTF(buffer, "PS( X'%02X' ) ", *picx);
     break;
    case 73:
     SPRINTF(buffer, "SCRNHT( X'%04hX' ) ", *value);
     break;
    case 74:
     SPRINTF(buffer, "SCRNWD( X'%04hX' ) ", *value);
     break;
    case 79:
     SPRINTF(buffer, "SYSID( '%8.8s' ) ", picx);
     break;
    case 81:
     SPRINTF(buffer, "TCTUALENG( X'%04hX' ) ", *value);
     break;
    case 83:
     // termcode will often be negative, and the 'h' format
     // code 'extends' a short to int before printing, which
     // will make a negative short a negative int, which will
     // want to print in 8 hex digits instead of 4. To prevent
     // this the value is explicitly extended and the result
     // made positive before printing...
     v2 = *value; v2 &= 0xffff;
     SPRINTF(buffer, "TERMCODE( X'%04X' ) ", v2);
     break;
    case 88:
     SPRINTF(buffer, "TWALENG( X'%04hX' ) ", *value);
     break;
    case 90:
     SPRINTF(buffer, "USERID( '%8.8s' ) ", picx);
     break;
    default:
     v2 = *value; if (v2 < 0) v2 *= -1;
     SPRINTF(buffer, "? ? ? %d ? ? ? ( X'%04X' ) ", what, v2);
   }
  APPEND_MSG(buffer);
 }

#define API_ASKTIME_ABSTIME API_ASKTIME
void API_ASKTIME(KIKEIB *eib, DEBUGGERCA *comm) {
 char *tioa = csa->tctte->tioa;
  char buffer[200], *abs1, *abs2;
  int  flag, row=3;
  APPEND_MSG("ASKTIME ");
  /* */
  flag  = *(int*)cobarg[1];
  abs1  = (char*)cobarg[2];
  abs2  = abs1 + 4;
  /* */
  if (flag == 1) {
   SPRINTF(buffer, "ABSTIME( X'%08X%08X' ) ", *(int*)abs1, *(int*)abs2);
   APPEND_MSG(buffer);
   }
 }

void API_DELAY(KIKEIB *eib, DEBUGGERCA *comm) {
  char *tioa = csa->tctte->tioa;
  char   buffer[200];
  int    flag, numsecs, row=3;
  int    hh, mm, ss;
  short sbuf;
  APPEND_MSG("DELAY ");
  /* */
  flag    = *(int*)cobarg[1];
  numsecs = *(int*)cobarg[2];
  /* */
  if ((flag & 1)== 0)
   SPRINTF(buffer, "%d seconds (abs) ", numsecs);
  else {
   SPRINTF(buffer, "%d seconds (rel) ", numsecs);
   APPEND_MSG(buffer);
   hh = numsecs / 3600;
   mm = (numsecs - (hh * 3600)) / 60;
   ss = numsecs - (hh * 3600) - (mm * 60);
   SPRINTF(buffer, "- %02d:%02d:%02d ", hh, mm, ss);
  }
  APPEND_MSG(buffer);
 }

void API_FORMATTIME(KIKEIB *eib, DEBUGGERCA *comm) {
  char  *tioa = csa->tctte->tioa;
  char   buffer[200], *abs1, *abs2, *into;
  char   datesep[2], timesep[2];
  int    flags, size, row=3;
  short  sbuf;
  /* */
  abs1  = (char*)cobarg[1];
  abs2  = abs1 + 4;
  flags = *(int*)cobarg[2];
  into  = (char*)cobarg[3];
  MEMSET(datesep, 0, 2);
  MEMSET(timesep, 0, 2);
  /* */
  APPEND_MSG("FORMATTIME ");
  SPRINTF(buffer, "  ABSTIME( X'%08X%08X' ) ",
    *(int*)abs1, *(int*)abs2);
  //APPEND_MSG(buffer);
  PUT_SBA(++row,1)
  APPEND_MSG(buffer);
  buffer[0]=0;
  switch (flags & 31) {
   case 1:  STRCAT(buffer, "  YYDDD");       break;
   case 2:  STRCAT(buffer, "  YYYYDDD");     break;
   case 3:  STRCAT(buffer, "  YYMMDD");      break;
   case 4:  STRCAT(buffer, "  YYYYMMDD");    break;
   case 5:  STRCAT(buffer, "  YYDDMM");      break;
   case 6:  STRCAT(buffer, "  YYYYDDMM");    break;
   case 7:  STRCAT(buffer, "  DDMMYY");      break;
   case 8:  STRCAT(buffer, "  DDMMYYYY");    break;
   case 9:  STRCAT(buffer, "  MMDDYY");      break;
   case 10: STRCAT(buffer, "  MMDDYYYY");    break;
   case 11: STRCAT(buffer, "  DAYCOUNT");    break;
   case 12: STRCAT(buffer, "  DAYOFWEEK");   break;
   case 13: STRCAT(buffer, "  DAYOFMONTH");  break;
   case 14: STRCAT(buffer, "  MONTHOFYEAR"); break;
   case 15: STRCAT(buffer, "  YEAR");        break;
   case 16: STRCAT(buffer, "  TIME");        break;
   default: STRCAT(buffer, "  ?????");
   }
  APPEND_MSG(buffer);

  if ((flags & 32) > 0) {
   datesep[0] = *(char*)cobarg[4];
   SPRINTF(buffer, "  DATESEP '%1s'", datesep);
   APPEND_MSG(buffer);
   }
  if ((flags & 64) > 0) {
   timesep[0] = *(char*)cobarg[5];
   SPRINTF(buffer, "  TIMESEP '%1s'", timesep);
   APPEND_MSG(buffer);
   }
  switch (flags & 31) {
   case 1:  size=5; if(datesep[0]>0) size=6;  break;
   case 2:  size=7; if(datesep[0]>0) size=8;  break;
   case 3:
   case 5:
   case 7:
   case 9:
            size=6; if(datesep[0]>0) size=8;  break;
   case 4:
   case 6:
   case 8:
   case 10:
            size=8; if(datesep[0]>0) size=10; break;
   case 11:
   case 12:
   case 13:
   case 14:
   case 15:
            size=4; break;
   case 16: size=6; if(timesep[0]>0) size=8;  break;
   default: size=16;
   }
  row++;
  DoDump(into, size, 0, ++row, -1);
 }


