 /////////////////////////////////////////////////////////////////////
 // 'KICKS for TSO' is a product to deliver 'CICS like' functionality
 // in MVS/TSO. Its CICS functionality is delivered at the source code
 // level, not at the object code level. Applications must be
 // recompiled and the recompiled programs are not compatible with any
 // known version of 'real' CICS (the IBM program product),
 //
 // Â© Copyright 2008-2014, Michael Noel, All Rights Reserved.
 //
 // Usage of 'KICKS for TSO' is in all cases subject to license. See
 // http://www.kicksfortso.com
 // for most current information regarding licensing options..
 ////////1/////////2/////////3/////////4/////////5/////////6/////////7

#include "kedfxeq.h"

 ////////////////////// SCP api calls //////////////////////

#define STAT(size1,size2)                             \
{                                                     \
MYjmp_buf abenv2;                                     \
int SJrtn;                                            \
csa->tca->kikeib.eibresp  = 0;                        \
csa->tca->kikeib.eibresp2 = 0;                        \
MEMCPY(&abenv2, &csa->tca->abenv1, sizeof(MYjmp_buf)); \
while (1) {                                           \
 SJrtn = MYsetjmp(csa->tca->abenv1);                  \
 if (SJrtn != 0) break;                               \
 KIKSCP(csa, kikscpSTAT, &size1, &size2);             \
 break;                                               \
 }                                                    \
MEMCPY(&csa->tca->abenv1, &abenv2, sizeof(MYjmp_buf)); \
}

#define API_FREEMAIN API_GETMAIN
void API_GETMAIN(KIKEIB *eib, DEBUGGERCA *comm) {
 char *tioa = csa->tctte->tioa;
  char buffer[200];
  int   row=3;
  int col, topline, botline, lines;
  short sbuf, *eibfn2 = (short*)&eibSave.eibfn;
  GottenStorage *gs;
  char *set, *dataptr, *initimg;
  int  size1, size2, len, flags;

  if (*eibfn2 == 3074) {
   APPEND_MSG("GETMAIN ");
   /* */
   set = (char*)cobarg[1];
   len = *(int*)cobarg[2];
   initimg = (char*)cobarg[3];
   flags = *(int*)cobarg[4];
   /* */
   SPRINTF(buffer, "SET(X'%06X') (X'%06X') ",
           set, (char*)*(int*)set);
   APPEND_MSG(buffer);
   SPRINTF(buffer, "LENGTH(%d) ", len);
   APPEND_MSG(buffer);
   if((flags & 32) > 0)
    SPRINTF(buffer, "      INITIMG(X'%02X') ", *initimg);
   else
    STRCPY(buffer, "      ");
   if((flags & 1)  > 0) STRCAT(buffer, "BELOW ");
   if((flags & 2)  > 0) STRCAT(buffer, "SHARED ");
   if((flags & 4)  > 0) STRCAT(buffer, "USERKEY ");
   if((flags & 8)  > 0) STRCAT(buffer, "CICSKEY ");
   if((flags & 16) > 0) STRCAT(buffer, "NOSUSPEND ");
   if((flags & 63) > 0) {
    row++;
    PUT_SBA(row,1)
    APPEND_MSG(buffer);
   }

#define USESTAT
#undef  USESTAT
#ifdef  USESTAT
   // apparently there is a problem with STAT. The GCC version of the API test
   // GETFREE fails with a 322 loop if this is enabled...
   // --> see note in kikscp. problem is that the code is VERY ineffecient.
   //     it takes ~ 15 seconds cpu time for each call!!!
   STAT(size1,size2);
   row++;
   PUT_SBA(row,1)
   SPRINTF(buffer, " memory available %dk, max block size %dk ", size1, size2);
   APPEND_MSG(buffer);
#endif

   if ((comm->BA & 3) == 1) return; // before, only show buffer AFTER
   set = (char*)*(int*)set;         // dereferenced 'set' for dump...
   }
  else
  if (*eibfn2 == 3076) {
   APPEND_MSG("FREEMAIN ");
   /* */
   dataptr =  (char*)cobarg[1];
   flags   = *(int*)cobarg[2];
   if((flags & 1) == 0) {
    SPRINTF(buffer, "DATA(X'%06X') ", dataptr);
    }
   else {
    dataptr = (char*)*(int*)dataptr;
    SPRINTF(buffer, "DATAPOINTER(X'%06X') ", dataptr);
    }
   APPEND_MSG(buffer);
   /* */

#ifdef  USESTAT
   STAT(size1,size2);
   row++;
   PUT_SBA(row,1)
   SPRINTF(buffer, " memory available %dk, max block size %dk ", size1, size2);
   APPEND_MSG(buffer);
#endif

   if ((comm->BA & 3) == 2) return; // after, only show buffer BEFORE
   set = dataptr;                   // dereferenced 'set' for dump...
   gs = (GottenStorage*)(set - 8);
   len = gs->size;
   }

  row++; row++; // skip 2 line
  topline = row;
  botline = bot - helpv - 1;
  lines = botline - topline + 1;
  if (eib->eibaid == 0) offset = 0;        // initial entry
  if (eib->eibaid == KIKPF7) {             // scroll back
   offset -= lines*sba_1632;
   if (offset < 0) offset = 0;
   }
  if (eib->eibaid == KIKPF8) {             // scroll fwd
   col = offset + lines*sba_1632;
   if (col < len) offset = col;
   }
  if (eib->eibaid == KIKPF19) offset = 0;  // scroll top
  if (eib->eibaid == KIKPF20) {            // scroll bottom
   offset =  len / sba_1632;               // num lines in area
   if (len % sba_1632 > 0) offset++;
   offset -= lines;              // less num lines on screen
   offset *= sba_1632;           // times chars / line
   if (offset < 0) offset = 0;   // zero if negative...
   }
  DoDump(set, len, offset, topline, lines);

 }
