 /////////////////////////////////////////////////////////////////////
 // 'KICKS for TSO' is a product to deliver 'CICS like' functionality
 // in MVS/TSO. Its CICS functionality is delivered at the source code
 // level, not at the object code level. Applications must be
 // recompiled and the recompiled programs are not compatible with any
 // known version of 'real' CICS (the IBM program product),
 //
 // Â© Copyright 2008-2014, Michael Noel, All Rights Reserved.
 //
 // Usage of 'KICKS for TSO' is in all cases subject to license. See
 // http://www.kicksfortso.com
 // for most current information regarding licensing options..
 ////////1/////////2/////////3/////////4/////////5/////////6/////////7

#include <stdio.h>

#include "kicks.h"


KIKCSA *csa = (KIKCSA*)&csa;


 ///////////////////////////////////////////////////////////////
 //
 //  function prototypes
 //
 ///////////////////////////////////////////////////////////////

void ETRACE(int type_of, char *more, int intense);
void XTRACE(int retcode, int intense);


 ///////////////////////////////////////////////////////////////
 //
 //  kiktsp mainline
 //
 ///////////////////////////////////////////////////////////////

int kiktsp (KIKCSA *kikcsa, int type_of,
   char *arg1, char *arg2, char *arg3, char *arg4,
   char *arg5, char *arg6, char *arg7, char *arg8, char *arg9
   ) {

 int dodump=0, suppress=1;
#define firstnl arg1

 switch (type_of)
  {
  case kiktspINIT:    // startup

      csa = kikcsa;
      ETRACE(type_of, "", 0);
      //
      //no arguments


#ifdef DEBUGIT
      // message if debugging version
     FPRINTF(csa->csastderr,"%s", firstnl); firstnl[0]=0;
     FPRINTF(csa->csastderr,"*** DEBUGGING version of TSP *** *** ***\n");
#endif

      XTRACE(0, 0);
      return (0);
      //break;

  case kiktspTERM:    // shutdown

      ETRACE(type_of, "", 0);
      //
      //no arguments

      XTRACE(0, 0);
      return (0);
      //break;


  case kikscpTRANSTRT:   // transaction start

      ETRACE(type_of, "", 1); // 'intense'
      //
      //no arguments

      XTRACE(0, 1);           // 'intense'
      return(0);
      //break;

  case kikscpTRANEND:    // transaction end

      ETRACE(type_of, "", 1); // 'intense'
      //
      //no arguments

      XTRACE(0, 1);           // 'intense'
      return(0);
      //break;

  case kiktspDELETEQ:    // delete queue

      ETRACE(type_of, arg1, 0);
      //
      //queue name = arg1; // (Ir) queue

      csa->tca->kikeib.eibresp = 44; // qiderr
      KIKPCP(csa, kikpcpABND, "X008", &dodump);

      XTRACE(0, 0);
      return(0);
      //break;


  case kiktspREADQ:    // read queue

      ETRACE(type_of, arg1, 0);
      //
      //queue name = arg1; // (Ir) queue
      //flags      = arg2  // (Ir) flags
                           // nosuspend
                           // next
                           // main
                           // aux
                           // rewrite
      //into       = arg3; // (Or) into
      //length     = arg4; // (Ir) length
      //item       = arg5; // (Ir) item
      //numitems   = arg6; // (Or) numitems

      csa->tca->kikeib.eibresp = 44; // qiderr
      KIKPCP(csa, kikpcpABND, "X008", &dodump);

      XTRACE(0, 0);
      return(0);
      //break;


  case kiktspWRITEQ:    // write queue

      ETRACE(type_of, arg1, 0);
      //
      //queue name = arg1; // (Ir) queue
      //flags      = arg2  // (Ir) flags
                           // nosuspend
                           // next
                           // main
                           // aux
                           // rewrite
      //from       = arg3; // (Or) from
      //length     = arg4; // (Ir) length
      //item       = arg5; // (Or) item
      //numitems   = arg6; // (Or) numitems

      csa->tca->kikeib.eibresp = 44; // qiderr
      KIKPCP(csa, kikpcpABND, "X008", &dodump);

      XTRACE(0, 0);
      return(0);
      //break;


  default:    // bad calls get here

      ETRACE(type_of, "", 0);
      {
      if ((csa->trc.trcflags & 4) > 0) {
        FCLOSE((FILE*)kikcsa->auxtrc);
        csa->trc.trcflags &= ~4; // show closed
       }
      ABEND(kikscpTYPE, type_of);
      }
  }
}


void ETRACE(int type_of, char *more, int intense)
{ char tmsg[20]; int t; t = csa->tca->tasknum;
  csa->AICAtime = -1;
  csa->tca->kikeib.eibresp = csa->tca->kikeib.eibresp2 = 0;
  if (more == NULL)
  SPRINTF(tmsg, "X%2.2X%4.4s     %4.4X", type_of, "", t);
  else
  SPRINTF(tmsg, "X%2.2X%4.4s     %4.4X", type_of, more, t);
  ((SubPtr)csa->trc_addr)(tmsg, intense);
}


void XTRACE(int retcode, int intense)
{ char tmsg[20]; int t; t = csa->tca->tasknum;
  SPRINTF(tmsg, "XX%03.3d       %4.4X", retcode, t);
  ((SubPtr)csa->trc_addr)(tmsg, intense);
  //return(retcode);
  csa->AICAtime = csa->AICAmax;
}

