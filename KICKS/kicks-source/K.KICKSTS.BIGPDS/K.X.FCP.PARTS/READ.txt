 /////////////////////////////////////////////////////////////////////
 // 'KICKS for TSO' is a product to deliver 'CICS like' functionality
 // in MVS/TSO. Its CICS functionality is delivered at the source code
 // level, not at the object code level. Applications must be
 // recompiled and the recompiled programs are not compatible with any
 // known version of 'real' CICS (the IBM program product),
 //
 // Â© Copyright 2008-2014, Michael Noel, All Rights Reserved.
 //
 // Usage of 'KICKS for TSO' is in all cases subject to license. See
 // http://www.kicksfortso.com
 // for most current information regarding licensing options..
 ////////1/////////2/////////3/////////4/////////5/////////6/////////7

 /////////////////////////////////////////////////////////////
 //
 // READ RECORD FUNCTION
 //
 /////////////////////////////////////////////////////////////

 // READ reads a record from a file.

 // For both UPDATE and non-UPDATE commands, you must identify the record
 // to be retrieved by the record identification field specified in the RIDFLD
 // option. Immediately upon completion of a READ UPDATE command, the RIDFLD
 // data area is available for reuse by the application program.


 int read(fcte *f, int flags,
              char *into, short *length,
              char *ridfld, short keylen) {

 //flags     = arg2  // (Ir) flags
                        // 1 generic
                        // 2 rba
                        // 4 rrn
                        // 8 gteq
                        // 16 equal
                        // 32 update
 //into      = arg3; // (Or) into/from
 //length    = arg4; // (Io) length (-1 if missing)
 //ridfld    = arg5; // (Io) ridfld (null if missing)
 //keylen    = arg6; // (Io) keylen (-1 if missing)

 ifgrpl *r = &f->reqids[0].rpl;
#ifdef __CMS__
 ikqrpl *d = (ikqrpl*)r; // DOS version of rpl...
#endif
 int i, Len, Len2, rba;
 char *aArea, *aArg;

 // reset some stuff...
 f->lastreqid = 0;
 f->reqids[0].lastop = FCTElastopread;

 // see if already update pending
 if ((f->flag1 & FCTEflag1pendupdt) > 0) {
  // real cics maybe allows read wo/update in this situation
  // (read wo/update to file with update already pending)
  // but KICKS does not.
  f->resp = KIKRESP$INVREQ;
  f->resp2= 28;
  return 8; // logical error
  }

 // check for contradictory things
 if(((flags & FCTEflagsbrrn) > 0) && ((flags & FCTEflagsbrba) > 0)) {
   f->resp = KIKRESP$INVREQ;
   f->resp2= 902;
   return 8; //
  }
 if(((flags & FCTEflagsbequal) > 0) && ((flags & FCTEflagsbgteq) > 0)) {
   f->resp = KIKRESP$INVREQ;
   f->resp2= 902;
   return 8; //
  }

 // if 'rba' then rrds not allowed
 if ((flags & FCTEflagsbrba) > 0)
  if ((f->flag1 & FCTEflag1rrds) > 0) {
   f->resp = KIKRESP$INVREQ;
   f->resp2= 903;
   return 8; // logical error
   }

 // if 'rrn' then ksds & esds not allowed
 if ((flags & FCTEflagsbrrn) > 0)
  if(((f->flag1 & FCTEflag1ksds) > 0) ||
     ((f->flag1 & FCTEflag1esds) > 0)) {
   f->resp = KIKRESP$INVREQ;
   f->resp2= 904;
   return 8; // logical error
   }

 // make sure keylength not given with rba or rrn
 if((((flags & FCTEflagsbrrn) > 0) || ((flags & FCTEflagsbrba) > 0)) &&
  (keylen == 4)) keylen = -1; // but tolerate keylen=4
 if((((flags & FCTEflagsbrrn) > 0) || ((flags & FCTEflagsbrba) > 0)) &&
  (keylen != -1)) {
   f->resp = KIKRESP$INVREQ;
   f->resp2= 905;
   return 8; // logical error
  }

 // check some keylength/generic conditions
 if (keylen != -1) // these are real cic resp/resp2 's
  if((flags & FCTEflagsbgeneric) > 0) {
   if (keylen >= f->keylen) {
    // 'generic' and keylen given, but
    // given keylen is greater than real keylen!
    f->resp = KIKRESP$INVREQ;
    f->resp2= 25;
    return 8; // logical error
    }
   if (keylen < 0) {
    // 'generic' and keylen given, but keylen < 0
    f->resp = KIKRESP$INVREQ;
    f->resp2= 42;
    return 8; // logical error
    }
   if(((keylen == 0) && (flags & FCTEflagsbequal) > 0)) {
    // 'generic' and keylen=0 and 'equal'
    f->resp = KIKRESP$NOTFND;
    f->resp2= 80;
    return 8; // logical error
    }
   } else { // not generic
   if (keylen != f->keylen) {
    // 'generic' not given, keylen given, but
    // given keylen <> real keylen!
    f->resp = KIKRESP$INVREQ;
    f->resp2= 26;
    return 8; // logical error
    }
   }

 // select default equal if necessary
 if(((flags & FCTEflagsbequal) == 0) &&
    ((flags & FCTEflagsbgteq) == 0)) {
   flags |= FCTEflagsbequal;
 }

 // qualify length
 Len = *length;
 if (Len == -1) Len = f->lrecl;
 if (Len > f->lrecl) Len = f->lrecl;
 if (Len < 0) Len = 0;

 // qualify keylen
 if (keylen == -1) keylen = f->keylen;
 if (keylen > f->keylen) keylen = f->keylen;
 if (keylen < 0) keylen = 0;
 if((flags & (FCTEflagsbrba | FCTEflagsbrrn)) > 0) keylen = 4;

 // setup RPL
 // -- for ksds, rrds, esds w/aix
 sw2vsam();
 __asm__ (
  "L 2,%0\n\t"
  "MODCB RPL=(2),OPTCD=(KEY)\n\t"
  "MODCB RPL=(2),OPTCD=(DIR)\n\t"
  "MODCB RPL=(2),OPTCD=(SYN)\n\t"
  "MODCB RPL=(2),OPTCD=(NUP)\n\t"
  "MODCB RPL=(2),OPTCD=(MVE)\n\t"
  "MODCB RPL=(2),OPTCD=(FKS)\n\t"
  "MODCB RPL=(2),OPTCD=(KEQ)\n\t"
  "MODCB RPL=(2),OPTCD=(FWD)"
  : /* no output */
  : "m"(r)
  : "0","1","2","14","15"
 );
 // -- for plain esds or (rba specified)
 if((((f->flag1 & FCTEflag1esds) > 0) &&
    ((f->flag1 & FCTEflag1path) ==0)) ||
   ((flags & FCTEflagsbrba) > 0))
   __asm__ (
    "L 2,%0\n\t"
    "MODCB RPL=(2),OPTCD=(ADR)"
    : /* no output */
    : "m"(r)
    : "0","1","2","14","15"
   );
 // -- for all cluster types
 __asm__ (
  "L 2,%0\n\t"
  "L 3,%1\n"
 "* MODCB RPL=(2),RECLEN=(3)\n\t"
  "XR 3,3\n\t"
  "LH 3,%2\n\t"
  "MODCB RPL=(2),KEYLEN=(3)\n\t"
  "L 3,%3\n\t"
  "MODCB RPL=(2),ARG=(3)"
  : /* no output */
  : "m"(r),"m"(Len),"m"(keylen),"m"(ridfld)
  : "0","1","2","3","14","15"
 );


#ifdef __MVS__
   r->rplrlen = keylen;
#endif
#ifdef __CMS__
 // modcb reclen doesn't seem to work; do it with direct move...
 if((csa->systype == csasystype$vm6pk) ||
    (csa->systype == csasystype$vmsp))
   d->rplrlen = keylen;
 else
   r->rplrlen = keylen;
#endif


 // -- if 'generic'
 if ((flags & FCTEflagsbgeneric) > 0) { // FSK defaulted above
   __asm__ (
    "L 2,%0\n\t"
    "MODCB RPL=(2),OPTCD=(GEN)"
    : /* no output */
    : "m"(r)
    : "0","1","2","14","15"
   );
  }
 // -- if 'gteq'
 if ((flags & FCTEflagsbgteq) > 0) {   // KEQ defaulted above
   __asm__ (
    "L 2,%0\n\t"
    "MODCB RPL=(2),OPTCD=(KGE)"
    : /* no output */
    : "m"(r)
    : "0","1","2","14","15"
   );
  }
 // -- if 'update'
 if ((flags & FCTEflagsbupdate) > 0) {
   // turn on pending update
   f->flag1 |= FCTEflag1pendupdt;
   __asm__ (
    "L 2,%0\n\t"
    "MODCB RPL=(2),OPTCD=(UPD)"
    : /* no output */
    : "m"(r)
    : "0","1","2","14","15"
   );
  }

 // get the record
 __asm__ (
  "L 2,%0\n\t"
  "GET RPL=(2)"
  : /* no output */
  : "m"(r)
  : "0","1","2","14","15"
 );
 sw2kicks();

 // set tentative return code
 maprtn(f, 0);

 // fix special case for failed read to new empty ksds
 // *** probably should add similar logic to STARTBR ***
 // *** probably should add similar logic to DELETE  ***
 if((f->flag1 & FCTEflag1ksds) > 0) {
  if((f->resp     == KIKRESP$ILLOGIC) &&
     (f->resp2    == 110)             &&
     (f->rcode[3] == 0x74)) {
   f->resp = KIKRESP$NOTFND; // make it look like normal RNF
   f->resp2= 80;
   f->rcode[1] = 0x81; // but leave rest of eibrcode alone...
   // fall thru to next if & exit after clearing update flag
   }
  }

 // stop now if bad read (and turn off pending update)
 if (f->rcode[2] > 0) {
  f->flag1 &= ~FCTEflag1pendupdt;
  return (f->rcode[2]);
  }

 // move rpl record length read back to user 'length'
 Len2 = showcb((char*)r, showcb_rpl, showcb_field_reclen);
 *length = Len2;

 // move the rpl buffer into 'into' for 'Len'
 aArea = (char*)showcb((char*)r, showcb_rpl, showcb_field_area);
 MEMCPY(into, aArea, Len);

 // return ridfld based on file type (etal)
 if (ridfld != NULL) {
  if((flags & FCTEflagsbrba) > 0) {
   // they want RBA instead of something else
   rba =  showcb((char*)r, showcb_rpl, showcb_field_rba);
   *(int*)ridfld = rba;
   }
  else
  if(((f->flag1 & FCTEflag1ksds) > 0) ||
    (((f->flag1 & FCTEflag1esds) > 0) &&
     ((f->flag1 & FCTEflag1path) > 0))) {
   // it's either a base ksds or an alternate index path
   MEMCPY(ridfld, aArea + f->rkp, f->keylen);
   }
  else
  if(((f->flag1 & FCTEflag1esds) > 0) &&
     ((f->flag1 & FCTEflag1path) == 0)) {
   // it's a base esds
   rba =  showcb((char*)r, showcb_rpl, showcb_field_rba);
   *(int*)ridfld = rba;
   }
  if ((f->flag1 & FCTEflag1rrds) > 0) {
   // it's an rrds
   // no return for rrds ?????????
   }
  }

 // check for LENGERR
 if (Len2 > Len) {
  f->resp = KIKRESP$LENGERR;
  f->resp2= 11;  // this is cics resp2 ...
  f->rcode[1] = f->resp;
  return 8; // logical error
  }

 // map return
 maprtn(f, 0);

 // check for DUPKEY
 if (f->rcode[3] == 8) { // aka rplerrcd
  f->resp = KIKRESP$DUPKEY;
  f->resp2= 140;  // this is cics resp2 ...
  f->rcode[1] = f->resp;
  return 8; // logical error
  }

 // goback
 return (f->rcode[2]);
 }

