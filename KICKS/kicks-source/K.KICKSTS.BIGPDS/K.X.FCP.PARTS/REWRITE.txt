 /////////////////////////////////////////////////////////////////////
 // 'KICKS for TSO' is a product to deliver 'CICS like' functionality
 // in MVS/TSO. Its CICS functionality is delivered at the source code
 // level, not at the object code level. Applications must be
 // recompiled and the recompiled programs are not compatible with any
 // known version of 'real' CICS (the IBM program product),
 //
 // Â© Copyright 2008-2014, Michael Noel, All Rights Reserved.
 //
 // Usage of 'KICKS for TSO' is in all cases subject to license. See
 // http://www.kicksfortso.com
 // for most current information regarding licensing options..
 ////////1/////////2/////////3/////////4/////////5/////////6/////////7

 /////////////////////////////////////////////////////////////
 //
 // REWRITE FUNCTION
 //
 // http://publib.boulder.ibm.com/infocenter/cicsts
 // /v3r1/index.jsp?topic=/com.ibm.cics.ts31.doc/dfhp4/commands
 /////////////////////////////////////////////////////////////

 // REWRITE updates a record in a file. You must always precede this
 // command with a read with the UPDATE option.

 // you must not change the key field in the record.


 int rewrite(fcte *f, int flags,
              char *from, short *length) {

 //file name = arg1; // (Ir) file
 //flags     = arg2  // (Ir) flags - NOT USED
 //from      = arg3; // (Ir) into/from
 //length    = arg4; // (Io) length (-1 if missing)

 ifgrpl *r = &f->reqids[0].rpl;
#ifdef __CMS__
 ikqrpl *d = (ikqrpl*)r; // DOS version of rpl...
#endif
 int i, Len, Len2, rba;
 char *aArea, *aArg;

 // reset some stuff...
 f->lastreqid = 0;
 f->reqids[0].lastop = FCTElastoprewrite;

 // make sure an update is pending
 if ((f->flag1 & FCTEflag1pendupdt) == 0) {
  f->resp = KIKRESP$INVREQ;
  f->resp2= 30;
  return 0;
  }

 // qualify length
 Len = *length;
 if (Len == -1) Len = f->lrecl;
 if (Len > f->lrecl) Len = f->lrecl;
 if (Len < 0) Len = 0;

 // refresh fields from the RPL
 Len2 = showcb((char*)r, showcb_rpl, showcb_field_reclen);
 aArea = (char*)showcb((char*)r, showcb_rpl, showcb_field_area);
 rba = showcb((char*)r, showcb_rpl, showcb_field_rba);
 aArg = (char*)showcb((char*)r, showcb_rpl, showcb_field_arg);

 // check that record is not truncated short of embedded key
 // and that embedded key still matches (old) ridfld
 if((f->flag1 & FCTEflag1ksds) > 0) {
  //((MEMCMP(r->rplarg, from + f->rkp, f->keylen)) ||
  if((MEMCMP(aArg, from + f->rkp, f->keylen)) ||
    (Len < (f->rkp + f->keylen))){
   f->resp = KIKRESP$INVREQ;
   f->resp2= 23;
   return 8; // logical error
   }
  }

 // turn off pending update
 f->flag1 &= ~FCTEflag1pendupdt;

 // move 'from' into rpl buffer for 'length'
 //MCPY(r->rplarea, from, Len);
 MEMCPY(aArea, from, Len);

 // adjust record length in rpl
 sw2vsam();
 __asm__ (
  "L 2,%0\n\t"
  "L 3,%1\n"
 "* MODCB RPL=(2),RECLEN=(3)"
  : /* no output */
  : "m"(r),"m"(Len)
  : "0","1","2","3","14","15"
 );


#ifdef __MVS__
   r->rplrlen = Len;
#endif
#ifdef __CMS__
 // modcb reclen doesn't seem to work; do it with direct move...
 if((csa->systype == csasystype$vm6pk) ||
    (csa->systype == csasystype$vmsp))
   d->rplrlen = Len;
 else
   r->rplrlen = Len;
#endif


 // put the record
 __asm__ (
  "L 2,%0\n\t"
  "PUT RPL=(2)"
  : /* no output */
  : "m"(r)
  : "0","1","2","14","15"
 );
 sw2kicks();

 // note current op as last, map return, goback
 maprtn(f, 0);
 return (f->rcode[2]);
 }

