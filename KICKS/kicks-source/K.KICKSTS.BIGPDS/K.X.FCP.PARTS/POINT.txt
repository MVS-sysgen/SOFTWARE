 /////////////////////////////////////////////////////////////////////
 // 'KICKS for TSO' is a product to deliver 'CICS like' functionality
 // in MVS/TSO. Its CICS functionality is delivered at the source code
 // level, not at the object code level. Applications must be
 // recompiled and the recompiled programs are not compatible with any
 // known version of 'real' CICS (the IBM program product),
 //
 // Â© Copyright 2008-2014, Michael Noel, All Rights Reserved.
 //
 // Usage of 'KICKS for TSO' is in all cases subject to license. See
 // http://www.kicksfortso.com
 // for most current information regarding licensing options..
 ////////1/////////2/////////3/////////4/////////5/////////6/////////7

 /////////////////////////////////////////////////////////////
 //
 // POINT routines to establish browse positions
 //
 /////////////////////////////////////////////////////////////

void pointk(fcte *f, short reqid, int flags) {

 ifgrpl *r = &f->reqids[reqid].rpl;
 int howlong;
 char high[256];

  sw2vsam();
   __asm__ (
   "L 2,%0\n\t"
   "MODCB RPL=(2),OPTCD=(KEY,ARD,SEQ,SYN,NUP,MVE,FWD)\n\t"
   "MODCB RPL=(2),OPTCD=(KGE,FKS)"
   : /* no output */
   : "m"(r)
   : "0","1","2","14","15"
  );
  //if(bwd > 0) {
  if((flags & FCTEflagsnextprev) > 0) {
    __asm__ (
     "L 2,%0\n\t"
     "MODCB RPL=(2),OPTCD=(BWD)"
     : /* no output */
     : "m"(r)
     : "0","1","2","14","15"
    );
   }
  if((flags & FCTEflagsbequal) > 0) {

    __asm__ (
     "L 2,%0\n\t"
     "MODCB RPL=(2),OPTCD=(KEQ)"
     : /* no output */
     : "m"(r)
     : "0","1","2","14","15"
    );
   }
  if((flags & FCTEflagsbgeneric) > 0) {
    __asm__ (
     "L 2,%0\n\t"
     "MODCB RPL=(2),OPTCD=(GEN)"
     : /* no output */
     : "m"(r)
     : "0","1","2","14","15"
    );
   }
  // if key was high values then search last
  howlong = f->keylen; if (howlong > 256) howlong = 256;
  MEMSET(high, 0xff, howlong);
  if(!MEMCMP(f->reqids[reqid].keys, high, howlong)) {
    __asm__ (
     "L 2,%0\n\t"
     "MODCB RPL=(2),OPTCD=(LRD,BWD)"
     : /* no output */
     : "m"(r)
     : "0","1","2","14","15"
    );
   }

  // do point with rpl now complete
  __asm__ (
   "L 2,%0\n\t"
   "POINT RPL=(2)"
   : /* no output */
   : "m"(r)
   : "0","1","2","14","15"
  );

  // don't leave rpl with optcd=lrd (causes issues)
  __asm__ (
   "L 2,%0\n\t"
   "MODCB RPL=(2),OPTCD=(ARD,FWD)"
   : /* no output */
   : "m"(r)
   : "0","1","2","14","15"
  );
  //if(bwd > 0) {
  if((flags & FCTEflagsnextprev) > 0) {
    __asm__ (
     "L 2,%0\n\t"
     "MODCB RPL=(2),OPTCD=(BWD)"
     : /* no output */
     : "m"(r)
     : "0","1","2","14","15"
    );
   }
  sw2kicks();
}

void pointe(fcte *f, short reqid, int flags) {

 ifgrpl *r = &f->reqids[reqid].rpl;
 int howlong=4;
 char high[5];

  sw2vsam();
   __asm__ (
    "L 2,%0\n\t"
    "MODCB RPL=(2),OPTCD=(ADR,ARD,SEQ,SYN,NUP,MVE,FWD)\n\t"
    "MODCB RPL=(2),OPTCD=(KEQ,FKS)"
    : /* no output */
    : "m"(r)
    : "0","1","2","14","15"
   );
   //if(bwd > 0) {
   if((flags & FCTEflagsnextprev) > 0) {
     __asm__ (
      "L 2,%0\n\t"
      "MODCB RPL=(2),OPTCD=(BWD)"
      : /* no output */
      : "m"(r)
      : "0","1","2","14","15"
     );
    }
   if((flags & FCTEflagsbgteq) > 0)
     __asm__ (
      "L 2,%0\n\t"
      "MODCB RPL=(2),OPTCD=(KGE)"
      : /* no output */
      : "m"(r)
      : "0","1","2","14","15"
     );
  if((flags & FCTEflagsbgeneric) > 0)
    __asm__ (
     "L 2,%0\n\t"
     "MODCB RPL=(2),OPTCD=(GEN)"
     : /* no output */
     : "m"(r)
     : "0","1","2","14","15"
    );
   // if key was high values then search last
   MEMSET(high, 0xff, howlong);
   if(!MEMCMP(f->reqids[reqid].keys, high, howlong))
     __asm__ (
      "L 2,%0\n\t"
      "MODCB RPL=(2),OPTCD=(LRD,BWD)"
      : /* no output */
      : "m"(r)
      : "0","1","2","14","15"
     );

   // do point with rpl now complete
   __asm__ (
    "L 2,%0\n\t"
    "POINT RPL=(2)"
    : /* no output */
    : "m"(r)
    : "0","1","2","14","15"
   );
   // don't leave rpl with optcd=lrd (causes issues)
   __asm__ (
    "L 2,%0\n\t"
    "MODCB RPL=(2),OPTCD=(ARD,FWD)"
    : /* no output */
    : "m"(r)
    : "0","1","2","14","15"
   );
   //if(bwd > 0) {
   if((flags & FCTEflagsnextprev) > 0) {
     __asm__ (
      "L 2,%0\n\t"
      "MODCB RPL=(2),OPTCD=(BWD)"
      : /* no output */
      : "m"(r)
      : "0","1","2","14","15"
     );
    }
  sw2kicks();
 }

void pointr(fcte *f, short reqid, int flags) {

 ifgrpl *r = &f->reqids[reqid].rpl;
 int howlong=4, one=1;
 char high[5];

  sw2vsam();
   __asm__ (
    "L 2,%0\n\t"
    "MODCB RPL=(2),OPTCD=(KEY,ARD,SEQ,SYN,NUP,MVE,FWD)\n\t"
    "MODCB RPL=(2),OPTCD=(KGE,FKS)"
    : /* no output */
    : "m"(r)
    : "0","1","2","14","15"
   );
   //if(bwd > 0) {
   if((flags & FCTEflagsnextprev) > 0) {
     __asm__ (
      "L 2,%0\n\t"
      "MODCB RPL=(2),OPTCD=(BWD)"
      : /* no output */
      : "m"(r)
      : "0","1","2","14","15"
     );
    }
   if((flags & FCTEflagsbequal) > 0)
     __asm__ (
      "L 2,%0\n\t"
      "MODCB RPL=(2),OPTCD=(KEQ)"
      : /* no output */
      : "m"(r)
      : "0","1","2","14","15"
     );


   // if key was low values then change it to '1'
   // ---- BUT - a low values ridfld for rrds is invalid
   // ----       what are the implications of this 'fixup'?
   MEMSET(high, 0x00, howlong);
   if(!MEMCMP(f->reqids[reqid].keys, high, howlong)) {
    MEMCPY(f->reqids[reqid].keys, &one, howlong);
    }


   // if key was high values then search last
   MEMSET(high, 0xff, howlong);
   if(!MEMCMP(f->reqids[reqid].keys, high, howlong))
     __asm__ (
      "L 2,%0\n\t"
      "MODCB RPL=(2),OPTCD=(LRD,BWD)"
      : /* no output */
      : "m"(r)
      : "0","1","2","14","15"
     );

   // do point with rpl now complete
   __asm__ (
    "L 2,%0\n\t"
    "POINT RPL=(2)"
    : /* no output */
    : "m"(r)
    : "0","1","2","14","15"
   );
  // don't leave rpl with optcd=lrd (causes issues)
  __asm__ (
   "L 2,%0\n\t"
   "MODCB RPL=(2),OPTCD=(ARD,FWD)"
   : /* no output */
   : "m"(r)
   : "0","1","2","14","15"
  );
  //if(bwd > 0) {
  if((flags & FCTEflagsnextprev) > 0) {
    __asm__ (
     "L 2,%0\n\t"
     "MODCB RPL=(2),OPTCD=(BWD)"
     : /* no output */
     : "m"(r)
     : "0","1","2","14","15"
    );
   }
  sw2kicks();
 }

void point(fcte *f, short reqid, int flags) {
  if(((f->flag1 & FCTEflag1ksds) > 0) ||
    (((f->flag1 & FCTEflag1esds) > 0) &&
     ((f->flag1 & FCTEflag1path) > 0))) {
   // it's either a base ksds or an alternate index path
   pointk(f, reqid, flags);
   } else
  if(((f->flag1 & FCTEflag1esds) > 0) &&
     ((f->flag1 & FCTEflag1path) ==0)) {
   // it's base esds
   pointe(f, reqid, flags);
   } else
  if ((f->flag1 & FCTEflag1rrds) > 0) {
   // it's an rrds
   pointr(f, reqid, flags);
   } else {
    ABEND(kikfcpTYPE, 99);
   }
 }

