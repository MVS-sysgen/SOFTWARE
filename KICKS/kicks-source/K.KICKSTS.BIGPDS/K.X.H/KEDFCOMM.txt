 /////////////////////////////////////////////////////////////////////
 // 'KICKS for TSO' is a product to deliver 'CICS like' functionality
 // in MVS/TSO. Its CICS functionality is delivered at the source code
 // level, not at the object code level. Applications must be
 // recompiled and the recompiled programs are not compatible with any
 // known version of 'real' CICS (the IBM program product),
 //
 // Â© Copyright 2008-2014, Michael Noel, All Rights Reserved.
 //
 // Usage of 'KICKS for TSO' is in all cases subject to license. See
 // http://www.kicksfortso.com
 // for most current information regarding licensing options..
 ////////1/////////2/////////3/////////4/////////5/////////6/////////7

 // auxillary include for KEDFXEQ, also used by GLUE routines

 // 'normal' comm area & macro (used by glue routines)

 typedef struct _DEBUGGERCA {
   short BA;           // 1-call before; 2-call after
   short oldcomml;     // user's comm area length
   char *oldcomma;     // user's comm area address
   int   mgtpgm;       // kikkcpTYPE, kikpcpTYPE, etc
   int   type_of;      // kikpcpHANDLECOND, kikpcpIGNORECOND, etc
   int saveresp,saveresp2; // save across LINK
   short rc;           // return code, me -> glue
  } DEBUGGERCA;

#undef  EntrKEDF
#define EntrKEDF(X, Y, Z)                                \
if(((csa->tctte->flags & tctteflag$kedfon) > 0) &&       \
   ((csa->trc.trcflags & 16) == 0))                      \
{ DEBUGGERCA DCA;                                        \
  int DCASZ=sizeof(DEBUGGERCA);                          \
  int dodump=0, suppress=1;                              \
  if ((X == 2) && ((Z & 256) > 0)) { ; }                 \
  else {                                                 \
   DCA.BA = X;                                           \
   DCA.oldcomml = csa->tca->kikeibp.eibpcalen;           \
   DCA.oldcomma = csa->tca->kikeibp.eibpca;              \
   DCA.mgtpgm   = Y;                                     \
   DCA.type_of  = Z;                                     \
   DCA.saveresp  = csa->tca->kikeib.eibresp;             \
   DCA.saveresp2 = csa->tca->kikeib.eibresp2;            \
   DCA.rc = 0;                                           \
   csa->trc.trcflags |= 16;                              \
   KIKPCP(csa, kikpcpLINK, "KEDFXEQ ", &DCA, &DCASZ);    \
   csa->trc.trcflags &= ~16;                             \
   if (csa->tca->kikeib.eibresp != 0) {                  \
    KIKPCP(csa, kikpcpABND2, csa->tca->abcode, &dodump); \
    }                                                    \
   csa->tca->kikeib.eibresp  = DCA.saveresp;             \
   csa->tca->kikeib.eibresp2 = DCA.saveresp2;            \
   }                                                     \
}

 // 'extended' comm area & macro (used internally)

 typedef struct _DEBUGGERXA {
   short BA;           // 5-call before; 6-call after
                       // '4' indicates extended format
   short oldcomml;     // user's comm area length
   char *oldcomma;     // user's comm area address
   int   mgtpgm;       // kikkcpTYPE, kikpcpTYPE, etc
   int   type_of;      // kikpcpHANDLECOND, kikpcpIGNORECOND, etc
   short rc;           // return code, me -> glue
   int saveresp,saveresp2; // save across LINK
   // above this should not be changed; must match 'CA' typedef.,,
   int   cobargs[16];  // call args here in extended format
                       // only max 13 (0-12) actually used
  } DEBUGGERXA;



#undef  EntxKEDF
#define EntxKEDF(X, Y, Z, ARGS)                          \
if(((csa->tctte->flags & tctteflag$kedfon) > 0) &&       \
   ((csa->trc.trcflags & 16) == 0))                      \
{ DEBUGGERXA DCA;                                        \
  int DCASZ=sizeof(DEBUGGERXA);                          \
  int dodump=0, suppress=1;                              \
  saveresp  = csa->tca->kikeib.eibresp;                  \
  saveresp2 = csa->tca->kikeib.eibresp2;                 \
  DCA.BA = X;                                            \
  DCA.oldcomml = csa->tca->kikeibp.eibpcalen;            \
  DCA.oldcomma = csa->tca->kikeibp.eibpca;               \
  DCA.mgtpgm   = Y;                                      \
  DCA.type_of  = Z;                                      \
  DCA.saveresp  = csa->tca->kikeib.eibresp;              \
  DCA.saveresp2 = csa->tca->kikeib.eibresp2;             \
  DCA.rc = 0;                                            \
  MEMCPY(&DCA.cobargs[0], ARGS, 64);                     \
  csa->trc.trcflags |= 16;                               \
  KIKPCP(csa, kikpcpLINK, "KEDFXEQ ", &DCA, &DCASZ);     \
  csa->trc.trcflags &= ~16;                              \
  if (csa->tca->kikeib.eibresp != 0) {                   \
   KIKPCP(csa, kikpcpABND2, csa->tca->abcode, &dodump);  \
   }                                                     \
  csa->tca->kikeib.eibresp  = DCA.saveresp;              \
  csa->tca->kikeib.eibresp2 = DCA.saveresp2;             \
}

