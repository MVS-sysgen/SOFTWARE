 /////////////////////////////////////////////////////////////////////
 // 'KICKS for TSO' is a product to deliver 'CICS like' functionality
 // in MVS/TSO. Its CICS functionality is delivered at the source code
 // level, not at the object code level. Applications must be
 // recompiled and the recompiled programs are not compatible with any
 // known version of 'real' CICS (the IBM program product),
 //
 // Â© Copyright 2008-2014, Michael Noel, All Rights Reserved.
 //
 // Usage of 'KICKS for TSO' is in all cases subject to license. See
 // http://www.kicksfortso.com
 // for most current information regarding licensing options..
 ////////1/////////2/////////3/////////4/////////5/////////6/////////7

#include "iefjfcb.h"
 iefjfcb *rdjfcb(char *ddname) {

 char *adcb; int i, j;
 iefjfcb *ajfcb;

 // 1st __asm__ block gens control blocks & returns addresses
 // note use of '%=' to make these asm labels unique...
  __asm__ (
    "B P%=\n"
 "D%= DCB DDNAME=XXXXX,DSORG=PS,MACRF=GL,EXLST=E%=\n"
 "E%= DS 0F\n\t"
    "DC X'87'\n\t"
    "DC AL3(J%=)\n"
 "J%= DC 22D'0'\n"
 "P%= EQU *\n\t"
    "LA 1,D%=\n\t"
    "ST 1,%0\n\t"
    "LA 1,J%=\n\t"
    "ST 1,%1"
   : "=m"(adcb), "=m"(ajfcb)
   : /* no input */
   : "1"
  );

  MEMCPY(&adcb[40], ddname, 8);
  for (i=0, j=0; i<8; i++) {  // fixup possible short
   if (j>0) adcb[40+i] = ' ';  // input ddname
   if (adcb[40+i] == 0) {
    j++;
    adcb[40+i] = ' ';
    }
   }
  MEMSET((char*)ajfcb, 0, 176);

 // 2nd __asm__ block execs rdjfcb macro
 // note can't use '%=' here to access 1st __asm__ labels...
  __asm__ (
    "L 2,%0\n\t"
    "RDJFCB ((2))"
   : /* no output */
   : "m"(adcb)
   : "1","2","15"
  );

  return(ajfcb);
 }

