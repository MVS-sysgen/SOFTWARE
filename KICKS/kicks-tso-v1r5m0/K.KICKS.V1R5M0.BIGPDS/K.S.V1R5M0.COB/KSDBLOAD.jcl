//KSDBLOAD JOB CLASS=C,MSGCLASS=A,MSGLEVEL=(1,1),REGION=2000K
//*
//JOBPROC DD   DSN=K.S.V1R5M0.PROCLIB,DISP=SHR
//*
//KSDBLOAD EXEC PROC=K2KCOBCL
//COPY.SYSUT1 DD *
       ID DIVISION.
       PROGRAM-ID. KSDBLOAD.

      *///////////////////////////////////////////////////////////////
      * KICKS is an enhancement for TSO that lets you run your CICS
      * applications directly in TSO instead of having to 'install'
      * those apps in CICS.
      * You don't even need CICS itself installed on your machine!
      *
      * KICKS for TSO
      * @ Copyright 2008-2014, Michael Noel, All Rights Reserved.
      *
      * Usage of 'KICKS for TSO' is in all cases subject to license.
      * See http://www.kicksfortso.com
      * for most current information regarding licensing options.
      *//1/////////2/////////3/////////4/////////5/////////6/////////7

      *///////////////////////////////////////////////////////////////
      * This is a (KICKS) batch program to read input generated by
      * a KICKS command level pre-processor and update an online vsam
      * KSDS with the new source code. KEDF will use the vsam file to
      * display appropriate source as the user steps thru his code.
      * It uses SYNCPOINT every 1000 records to help avoid timeouts,
      * thou probably not necessary for a file like this (that's
      * probably userid qualified anyway).
      *//1/////////2/////////3/////////4/////////5/////////6/////////7

       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT CARDS ASSIGN UT-S-KSDBIN.

       DATA DIVISION.
       FILE SECTION.
       FD  CARDS
           RECORDING MODE F
           BLOCK CONTAINS 0 RECORDS
           LABEL RECORDS STANDARD.
       01  CARDSREC                    PIC X(80).

       WORKING-STORAGE SECTION.
       77  WS-BEGIN  PIC X(24) VALUE 'KSDBLOAD WORKING STORAGE'.
       77  WS-SRL                      PIC S9(4) COMP VALUE +92.
       77  WS-SKL                      PIC S9(4) COMP VALUE +14.
       77  WS-SKL-GENERIC              PIC S9(4) COMP VALUE +8.
       77  WS-NUMCARDS                 PIC S9(8) COMP VALUE +0.
       77  WS-NUMDELS                  PIC S9(4) COMP VALUE +0.
       77  WS-NUMNUMS                  PIC S9(8) COMP VALUE +0.
       77  WS-NUMNUM-SUB               PIC S9(8) COMP VALUE +1.
       77  WS-NUMNUM-GRP-MIN           PIC S9(8) COMP VALUE +0.
       77  WS-NUMNUM-GRP-MAX           PIC S9(8) COMP VALUE +0.
       77  WS-RESP                     PIC S9(4) COMP VALUE +0.
       77  BADTERM                     PIC X(36)
           VALUE 'KSDB IS INTENDED FOR BATCH USE ONLY '.
       77  BADTERML                    PIC S9(8) COMP VALUE +36.

       01  CARDS-RECORD                PIC X(80).
       01  CARDS-LNUM REDEFINES CARDS-RECORD.
           05  CL-NUMLINES             PIC 9(3).
           05  CL-LINENUM              PIC 9(7).
           05  FILLER                  PIC X(70).
       01  CARDS-REST REDEFINES CARDS-RECORD.
      *    05  CR-SEQ                  PIC X(6).
      *    05  CR-MAIN                 PIC X(66).
           05  CR-MAIN                 PIC X(72).
           05  CR-SEQ2                 PIC 9(8).

       01  CARDS-FIRST.
           05  CF-MAIN.
               10  CF-PGMID            PIC X(8).
               10  CFF1                PIC X.
               10  CF-WCDATE           PIC X(20).
               10  CFF2                PIC X.
               10  CF-NUMLINES         PIC 9(6).
               10  CFF3                PIC X.
               10  CF-LANG             PIC X(3).
               10  CFF4                PIC X.
               10  CF-NUMNUMS          PIC 9(6).
               10  CFF5                PIC X.
               10  FILLER              PIC X(24).
           05  FILLER                  PIC X(8).

       01  NUMNUM-TBL.
           05  NUMNUMS OCCURS 10000.
              10  NUMNUM-GRP           PIC S9(4) COMP.
              10  NUMNUM-LINE          PIC S9(8) COMP.

       01  LAST-CA.
           05  LAST-CA-RETURN PIC S9(4) COMP VALUE +0.
           05  LAST-CA-LASTCC PIC S9(4) COMP VALUE +0.

       01  SDB-RECORD.
           05  SR-KEY.
               10  SRK-PGMID           PIC X(8).
               10  SRK-LINENUM         PIC 9(6).
      *    if SR-LINE is non-zero a breakpoint can be set on
      *    that line. if, when SR-LINE is non-zero, SR-GRP is
      *    greater than 0, SR-GRP is the total number of lines
      *    that are part of the same statement as the line (for
      *    purposes of highlighing). Each line that is part of
      *    the group gets the same values of SR-LINE & SR-GRP.
           05  SR-GRP                  PIC S9(4) COMP.
           05  SR-LINE                 PIC S9(8) COMP.
           05  SR-MAIN                 PIC X(72).

       PROCEDURE DIVISION.

           EXEC KICKS ASSIGN TERMCODE(WS-RESP) END-EXEC.
      *                     6144 = 0X1800 = CRLP TERMINAL
           IF WS-RESP NOT = 6144
               EXEC KICKS SEND TEXT
                   FROM(BADTERM) LENGTH(BADTERML)
                   ERASE FREEKB ALARM
               END-EXEC
               EXEC KICKS RETURN END-EXEC.

           OPEN INPUT CARDS.

      * read header card
      *  EOF reading means problem with preprocessor generated file.

           READ CARDS RECORD INTO CARDS-FIRST
                AT END
                DISPLAY 'EOF READING HEADER CARD!'
                MOVE +80 TO LAST-CA-LASTCC
                GO TO DONE-NOW.

      * show what's going on and delete any old source on file

      * note that displayed num deleted always one greater than
      *      prev num lines since deleted includes the header rec

           DISPLAY ' '.
           DISPLAY 'LOADING PROGRAM ID   ', CF-PGMID.
           DISPLAY '** COMPILED ON       ', CF-WCDATE.
           DISPLAY '** NUMBER OF LINES = ', CF-NUMLINES.
           MOVE CF-PGMID TO SRK-PGMID.
           MOVE WS-NUMCARDS TO SRK-LINENUM.
           EXEC KICKS DELETE FILE('KSDB')
               RIDFLD(SR-KEY) KEYLENGTH(WS-SKL-GENERIC)
               GENERIC NUMREC(WS-NUMDELS)
               RESP(WS-RESP)
           END-EXEC.
           IF WS-RESP NOT = KIKRESP(NORMAL)
                        AND KIKRESP(NOTFND)
                        AND KIKRESP(ILLOGIC)
      * illogic happens if KSDB is an newly initialized empty file...
               DISPLAY 'BAD RESPONSE FROM DELETE'
               DISPLAY '** RESP  = ', EIBRESP
               DISPLAY '** RESP2 = ', EIBRESP2
               MOVE +81 TO LAST-CA-LASTCC
               GO TO DONE-NOW
           ELSE
               EXEC KICKS SYNCPOINT END-EXEC
               EXEC KICKS DELAY SECONDS(2) END-EXEC
               DISPLAY '** ', WS-NUMDELS, ' OLD RECORDS DELETED'.

      * load the numnum table
      *  EOF reading means problem with preprocessor generated file.
      *  OVERFLOW means you need to change the table size here.
      *  BAD NUMNUM RECORD means problem with preprocessor file.

       LN-1.
           READ CARDS RECORD INTO CARDS-RECORD
              AT END
                DISPLAY 'EOF READING NUMNUM CARDS!'
                MOVE +82 TO LAST-CA-LASTCC
                GO TO DONE-NOW.
           ADD +1 TO WS-NUMNUMS.
           IF WS-NUMNUMS > 10000 THEN
               DISPLAY 'NUMNUM TABLE OVERFLOW'
               MOVE +83 TO LAST-CA-LASTCC
               GO TO DONE-NOW.
           IF CL-NUMLINES NOT NUMERIC OR
              CL-LINENUM  NOT NUMERIC THEN
               DISPLAY 'BAD NUMNUM RECORD AT LINE ', WS-NUMNUMS
               MOVE +84 TO LAST-CA-LASTCC
               GO TO DONE-NOW.
           MOVE CL-NUMLINES TO NUMNUM-GRP  (WS-NUMNUMS).
           MOVE CL-LINENUM  TO NUMNUM-LINE (WS-NUMNUMS).
           IF WS-NUMNUMS < CF-NUMNUMS THEN GO TO LN-1.

      * write 1st (header) card to file

           MOVE CF-PGMID TO SRK-PGMID.
           MOVE 0 TO SRK-LINENUM.
           MOVE +0 TO SR-LINE, SR-GRP.
      * 'punctuate' CF values for easy sscan (GCC) usage
           MOVE LOW-VALUES TO CFF1, CFF2, CFF3, CFF4, CFF5.
           MOVE CF-MAIN TO SR-MAIN.
           EXEC KICKS WRITE FILE('KSDB')
               FROM(SDB-RECORD)  LENGTH(WS-SRL)
               RIDFLD(SR-KEY) KEYLENGTH(WS-SKL)
               RESP(WS-RESP)
           END-EXEC.
           IF WS-RESP NOT = KIKRESP(NORMAL)
               DISPLAY 'BAD RESPONSE FROM INITIAL WRITE'
               DISPLAY '** RESP  = ', EIBRESP
               DISPLAY '** RESP2 = ', EIBRESP2
               MOVE +85 TO LAST-CA-LASTCC
               GO TO DONE-NOW.
           ADD +1 TO WS-NUMCARDS.

      * write all the source cards to the file
      *  EOF reading means problem with preprocessor generated file.

       LN-2.
           READ CARDS RECORD INTO CARDS-RECORD
              AT END
                DISPLAY 'EOF READING SOURCE CARDS!'
                MOVE +86 TO LAST-CA-LASTCC
                GO TO DONE-NOW.

           MOVE CF-PGMID TO SRK-PGMID.
           MOVE WS-NUMCARDS TO SRK-LINENUM.
           MOVE +0 TO SR-LINE, SR-GRP.
           PERFORM SET-SR-LINE.
           MOVE CR-MAIN TO SR-MAIN.

           EXEC KICKS WRITE FILE('KSDB')
               FROM(SDB-RECORD)  LENGTH(WS-SRL)
               RIDFLD(SR-KEY) KEYLENGTH(WS-SKL)
               RESP(WS-RESP)
           END-EXEC.
           IF WS-RESP = KIKRESP(NOSPACE)
               DISPLAY 'BAD RESPONSE FROM WRITE'
               DISPLAY '** RESP  = ', EIBRESP, ' (NO SPACE)'
               DISPLAY '** RESP2 = ', EIBRESP2
               MOVE +87 TO LAST-CA-LASTCC
               GO TO DONE-NOW.
           IF WS-RESP NOT = KIKRESP(NORMAL)
               DISPLAY 'BAD RESPONSE FROM WRITE'
               DISPLAY '** RESP  = ', EIBRESP
               DISPLAY '** RESP2 = ', EIBRESP2
               MOVE +87 TO LAST-CA-LASTCC
               GO TO DONE-NOW.
           ADD +1 TO WS-NUMCARDS.
           DIVIDE WS-NUMCARDS BY +1000
               GIVING WS-NUMDELS
               REMAINDER WS-RESP.
           IF WS-RESP = 0
               EXEC KICKS SYNCPOINT END-EXEC
               EXEC KICKS DELAY SECONDS(2) END-EXEC.
           IF WS-NUMCARDS NOT GREATER CF-NUMLINES THEN GO TO LN-2.

           READ CARDS RECORD INTO CARDS-RECORD
             AT END GO TO DONE-NOW.
           DISPLAY 'UNREAD SOURCE CARDS REMAINING!'.
           MOVE +88 TO LAST-CA-LASTCC.

       DONE-NOW.
           PERFORM SHOW-HEADERS.
           CLOSE CARDS.
           EXEC KICKS LINK PROGRAM('KLASTCCP') NOHANDLE
               COMMAREA(LAST-CA) END-EXEC.
           EXEC KICKS RETURN END-EXEC.

       SET-SR-LINE SECTION.
           IF WS-NUMNUM-SUB > WS-NUMNUMS THEN
               GO TO SET-SR-LINE-EXIT.
           MOVE NUMNUM-LINE (WS-NUMNUM-SUB) TO WS-NUMNUM-GRP-MIN,
                                               WS-NUMNUM-GRP-MAX.
           ADD  NUMNUM-GRP  (WS-NUMNUM-SUB) TO WS-NUMNUM-GRP-MAX.
           IF NUMNUM-GRP (WS-NUMNUM-SUB) > 0 THEN
               SUBTRACT 1 FROM WS-NUMNUM-GRP-MAX.
           IF SRK-LINENUM > WS-NUMNUM-GRP-MAX THEN
               ADD +1 TO WS-NUMNUM-SUB
               GO TO SET-SR-LINE.
           IF SRK-LINENUM < WS-NUMNUM-GRP-MIN THEN
               GO TO SET-SR-LINE-EXIT.
           MOVE NUMNUM-LINE (WS-NUMNUM-SUB) TO SR-LINE.
           MOVE NUMNUM-GRP  (WS-NUMNUM-SUB) TO SR-GRP.
<NOP>
           DISPLAY '*** ' WS-NUMNUM-SUB ' @ ' SRK-LINENUM ', '
                   SR-LINE ', ' SR-GRP
</NOP>
       SET-SR-LINE-EXIT.
           EXIT.
       SHOW-HEADERS SECTION.
<NOP>
           MOVE LOW-VALUES TO SR-KEY.
           EXEC KICKS STARTBR FILE('KSDB')
               RIDFLD(SR-KEY) KEYLENGTH(WS-SKL)
               NOHANDLE
           END-EXEC.
       SH-1.
           EXEC KICKS READNEXT FILE('KSDB')
               INTO(SDB-RECORD)  LENGTH(WS-SRL)
               RIDFLD(SR-KEY) KEYLENGTH(WS-SKL)
               NOHANDLE
           END-EXEC.
           IF EIBRESP NOT EQUAL DFHRESP(NORMAL) THEN GO TO SH-X.
           IF SRK-LINENUM NOT EQUAL ZERO THEN GO TO SH-1.
           DISPLAY SDB-RECORD.
           GO TO SH-1.
       SH-X.
           EXEC KICKS ENDBR FILE('KSDB')
               NOHANDLE
           END-EXEC.
</NOP>
       SHOW-HEADERS-EXIT.
           EXIT.
/*
//LKED.SYSLMOD DD DSN=K.S.V1R5M0.KIKRPL,DISP=SHR
//LKED.SYSIN DD *
 INCLUDE SKIKLOAD(KIKCOBGX)
 ENTRY KSDBLOAD
 NAME  KSDBLOAD(R)
/*
//
